
NRF_Reciver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025ac  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  080026bc  080026bc  000126bc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002884  08002884  00012884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002888  08002888  00012888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  0800288c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000e0  20000070  080028fc  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000150  080028fc  00020150  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000cea5  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000021e3  00000000  00000000  0002cf3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0000508a  00000000  00000000  0002f121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000008c0  00000000  00000000  000341b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000b30  00000000  00000000  00034a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00014c2e  00000000  00000000  000355a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000b0c6  00000000  00000000  0004a1ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0006df8a  00000000  00000000  00055294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  000c321e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001c78  00000000  00000000  000c3274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	080026a4 	.word	0x080026a4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	080026a4 	.word	0x080026a4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000160:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000162:	4b0e      	ldr	r3, [pc, #56]	; (800019c <HAL_InitTick+0x3c>)
{
 8000164:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000166:	7818      	ldrb	r0, [r3, #0]
 8000168:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800016c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000170:	4a0b      	ldr	r2, [pc, #44]	; (80001a0 <HAL_InitTick+0x40>)
 8000172:	6810      	ldr	r0, [r2, #0]
 8000174:	fbb0 f0f3 	udiv	r0, r0, r3
 8000178:	f000 f890 	bl	800029c <HAL_SYSTICK_Config>
 800017c:	4604      	mov	r4, r0
 800017e:	b958      	cbnz	r0, 8000198 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000180:	2d0f      	cmp	r5, #15
 8000182:	d809      	bhi.n	8000198 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000184:	4602      	mov	r2, r0
 8000186:	4629      	mov	r1, r5
 8000188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800018c:	f000 f854 	bl	8000238 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000190:	4620      	mov	r0, r4
 8000192:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <HAL_InitTick+0x44>)
 8000194:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000196:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000198:	2001      	movs	r0, #1
 800019a:	e7fc      	b.n	8000196 <HAL_InitTick+0x36>
 800019c:	20000000 	.word	0x20000000
 80001a0:	20000008 	.word	0x20000008
 80001a4:	20000004 	.word	0x20000004

080001a8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a8:	4a07      	ldr	r2, [pc, #28]	; (80001c8 <HAL_Init+0x20>)
{
 80001aa:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001ac:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001ae:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001b0:	f043 0310 	orr.w	r3, r3, #16
 80001b4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001b6:	f000 f82d 	bl	8000214 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001ba:	2000      	movs	r0, #0
 80001bc:	f7ff ffd0 	bl	8000160 <HAL_InitTick>
  HAL_MspInit();
 80001c0:	f001 fce8 	bl	8001b94 <HAL_MspInit>
}
 80001c4:	2000      	movs	r0, #0
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	40022000 	.word	0x40022000

080001cc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001cc:	4a03      	ldr	r2, [pc, #12]	; (80001dc <HAL_IncTick+0x10>)
 80001ce:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <HAL_IncTick+0x14>)
 80001d0:	6811      	ldr	r1, [r2, #0]
 80001d2:	781b      	ldrb	r3, [r3, #0]
 80001d4:	440b      	add	r3, r1
 80001d6:	6013      	str	r3, [r2, #0]
}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	200000a0 	.word	0x200000a0
 80001e0:	20000000 	.word	0x20000000

080001e4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001e4:	4b01      	ldr	r3, [pc, #4]	; (80001ec <HAL_GetTick+0x8>)
 80001e6:	6818      	ldr	r0, [r3, #0]
}
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	200000a0 	.word	0x200000a0

080001f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001f0:	b538      	push	{r3, r4, r5, lr}
 80001f2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001f4:	f7ff fff6 	bl	80001e4 <HAL_GetTick>
 80001f8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001fa:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001fc:	bf1e      	ittt	ne
 80001fe:	4b04      	ldrne	r3, [pc, #16]	; (8000210 <HAL_Delay+0x20>)
 8000200:	781b      	ldrbne	r3, [r3, #0]
 8000202:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000204:	f7ff ffee 	bl	80001e4 <HAL_GetTick>
 8000208:	1b43      	subs	r3, r0, r5
 800020a:	42a3      	cmp	r3, r4
 800020c:	d3fa      	bcc.n	8000204 <HAL_Delay+0x14>
  {
  }
}
 800020e:	bd38      	pop	{r3, r4, r5, pc}
 8000210:	20000000 	.word	0x20000000

08000214 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000214:	4907      	ldr	r1, [pc, #28]	; (8000234 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000216:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000218:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800021a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800021e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000222:	0412      	lsls	r2, r2, #16
 8000224:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000228:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800022c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000230:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000232:	4770      	bx	lr
 8000234:	e000ed00 	.word	0xe000ed00

08000238 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000238:	4b16      	ldr	r3, [pc, #88]	; (8000294 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800023a:	b530      	push	{r4, r5, lr}
 800023c:	68dc      	ldr	r4, [r3, #12]
 800023e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000242:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000246:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000248:	2b04      	cmp	r3, #4
 800024a:	bf28      	it	cs
 800024c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000250:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000254:	bf98      	it	ls
 8000256:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000258:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800025c:	bf88      	it	hi
 800025e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000260:	ea21 0303 	bic.w	r3, r1, r3
 8000264:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000266:	fa05 f404 	lsl.w	r4, r5, r4
 800026a:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 800026e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000270:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000274:	bfac      	ite	ge
 8000276:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027a:	4a07      	ldrlt	r2, [pc, #28]	; (8000298 <HAL_NVIC_SetPriority+0x60>)
 800027c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000280:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000282:	bfab      	itete	ge
 8000284:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000288:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000290:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	e000ed00 	.word	0xe000ed00
 8000298:	e000ed14 	.word	0xe000ed14

0800029c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800029c:	3801      	subs	r0, #1
 800029e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002a2:	d20a      	bcs.n	80002ba <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a4:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002a6:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a8:	4a06      	ldr	r2, [pc, #24]	; (80002c4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002aa:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ac:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002b0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002b2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002b4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80002b8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002ba:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	e000e010 	.word	0xe000e010
 80002c4:	e000ed00 	.word	0xe000ed00

080002c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80002cc:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80002ce:	4616      	mov	r6, r2
 80002d0:	4b64      	ldr	r3, [pc, #400]	; (8000464 <HAL_GPIO_Init+0x19c>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002d2:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8000474 <HAL_GPIO_Init+0x1ac>
 80002d6:	f8df e1a0 	ldr.w	lr, [pc, #416]	; 8000478 <HAL_GPIO_Init+0x1b0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80002da:	680d      	ldr	r5, [r1, #0]
 80002dc:	fa35 f406 	lsrs.w	r4, r5, r6
 80002e0:	d102      	bne.n	80002e8 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 80002e2:	b003      	add	sp, #12
 80002e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80002e8:	f04f 0801 	mov.w	r8, #1
 80002ec:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002f0:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 80002f4:	ea38 0505 	bics.w	r5, r8, r5
 80002f8:	d17c      	bne.n	80003f4 <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 80002fa:	684d      	ldr	r5, [r1, #4]
 80002fc:	2d03      	cmp	r5, #3
 80002fe:	d807      	bhi.n	8000310 <HAL_GPIO_Init+0x48>
 8000300:	3d01      	subs	r5, #1
 8000302:	2d02      	cmp	r5, #2
 8000304:	f200 8088 	bhi.w	8000418 <HAL_GPIO_Init+0x150>
 8000308:	e8df f005 	tbb	[pc, r5]
 800030c:	9b96      	.short	0x9b96
 800030e:	a1          	.byte	0xa1
 800030f:	00          	.byte	0x00
 8000310:	2d12      	cmp	r5, #18
 8000312:	f000 8099 	beq.w	8000448 <HAL_GPIO_Init+0x180>
 8000316:	d86f      	bhi.n	80003f8 <HAL_GPIO_Init+0x130>
 8000318:	2d11      	cmp	r5, #17
 800031a:	f000 808f 	beq.w	800043c <HAL_GPIO_Init+0x174>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800031e:	2cff      	cmp	r4, #255	; 0xff
 8000320:	bf98      	it	ls
 8000322:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000324:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000328:	bf88      	it	hi
 800032a:	f100 0a04 	addhi.w	sl, r0, #4
 800032e:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000332:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000336:	bf88      	it	hi
 8000338:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800033a:	fa09 fb05 	lsl.w	fp, r9, r5
 800033e:	ea28 080b 	bic.w	r8, r8, fp
 8000342:	fa02 f505 	lsl.w	r5, r2, r5
 8000346:	ea48 0505 	orr.w	r5, r8, r5
 800034a:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800034e:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000352:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000356:	d04d      	beq.n	80003f4 <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000358:	4f43      	ldr	r7, [pc, #268]	; (8000468 <HAL_GPIO_Init+0x1a0>)
 800035a:	f026 0803 	bic.w	r8, r6, #3
 800035e:	69bd      	ldr	r5, [r7, #24]
 8000360:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000364:	f045 0501 	orr.w	r5, r5, #1
 8000368:	61bd      	str	r5, [r7, #24]
 800036a:	69bd      	ldr	r5, [r7, #24]
 800036c:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8000370:	f005 0501 	and.w	r5, r5, #1
 8000374:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000376:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800037a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800037c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000380:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000384:	fa09 f90b 	lsl.w	r9, r9, fp
 8000388:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800038c:	4d37      	ldr	r5, [pc, #220]	; (800046c <HAL_GPIO_Init+0x1a4>)
 800038e:	42a8      	cmp	r0, r5
 8000390:	d061      	beq.n	8000456 <HAL_GPIO_Init+0x18e>
 8000392:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000396:	42a8      	cmp	r0, r5
 8000398:	d05f      	beq.n	800045a <HAL_GPIO_Init+0x192>
 800039a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800039e:	42a8      	cmp	r0, r5
 80003a0:	d05d      	beq.n	800045e <HAL_GPIO_Init+0x196>
 80003a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003a6:	42a8      	cmp	r0, r5
 80003a8:	bf0c      	ite	eq
 80003aa:	2503      	moveq	r5, #3
 80003ac:	2504      	movne	r5, #4
 80003ae:	fa05 f50b 	lsl.w	r5, r5, fp
 80003b2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80003b6:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80003ba:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003bc:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003c0:	bf14      	ite	ne
 80003c2:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003c4:	43a5      	biceq	r5, r4
 80003c6:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80003c8:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003ca:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003ce:	bf14      	ite	ne
 80003d0:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003d2:	43a5      	biceq	r5, r4
 80003d4:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80003d6:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003d8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003dc:	bf14      	ite	ne
 80003de:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003e0:	43a5      	biceq	r5, r4
 80003e2:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80003e4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003e6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003ea:	bf14      	ite	ne
 80003ec:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003ee:	ea25 0404 	biceq.w	r4, r5, r4
 80003f2:	60dc      	str	r4, [r3, #12]
	position++;
 80003f4:	3601      	adds	r6, #1
 80003f6:	e770      	b.n	80002da <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 80003f8:	4f1d      	ldr	r7, [pc, #116]	; (8000470 <HAL_GPIO_Init+0x1a8>)
 80003fa:	42bd      	cmp	r5, r7
 80003fc:	d00c      	beq.n	8000418 <HAL_GPIO_Init+0x150>
 80003fe:	d817      	bhi.n	8000430 <HAL_GPIO_Init+0x168>
 8000400:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800047c <HAL_GPIO_Init+0x1b4>
 8000404:	454d      	cmp	r5, r9
 8000406:	d007      	beq.n	8000418 <HAL_GPIO_Init+0x150>
 8000408:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 800040c:	454d      	cmp	r5, r9
 800040e:	d003      	beq.n	8000418 <HAL_GPIO_Init+0x150>
 8000410:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8000414:	454d      	cmp	r5, r9
 8000416:	d182      	bne.n	800031e <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000418:	688a      	ldr	r2, [r1, #8]
 800041a:	b1d2      	cbz	r2, 8000452 <HAL_GPIO_Init+0x18a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800041c:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800041e:	bf08      	it	eq
 8000420:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000424:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8000428:	bf18      	it	ne
 800042a:	f8c0 8014 	strne.w	r8, [r0, #20]
 800042e:	e776      	b.n	800031e <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8000430:	4565      	cmp	r5, ip
 8000432:	d0f1      	beq.n	8000418 <HAL_GPIO_Init+0x150>
 8000434:	4575      	cmp	r5, lr
 8000436:	e7ee      	b.n	8000416 <HAL_GPIO_Init+0x14e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000438:	68ca      	ldr	r2, [r1, #12]
          break;
 800043a:	e770      	b.n	800031e <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800043c:	68ca      	ldr	r2, [r1, #12]
 800043e:	3204      	adds	r2, #4
          break;
 8000440:	e76d      	b.n	800031e <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000442:	68ca      	ldr	r2, [r1, #12]
 8000444:	3208      	adds	r2, #8
          break;
 8000446:	e76a      	b.n	800031e <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000448:	68ca      	ldr	r2, [r1, #12]
 800044a:	320c      	adds	r2, #12
          break;
 800044c:	e767      	b.n	800031e <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 800044e:	2200      	movs	r2, #0
 8000450:	e765      	b.n	800031e <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000452:	2204      	movs	r2, #4
 8000454:	e763      	b.n	800031e <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000456:	2500      	movs	r5, #0
 8000458:	e7a9      	b.n	80003ae <HAL_GPIO_Init+0xe6>
 800045a:	2501      	movs	r5, #1
 800045c:	e7a7      	b.n	80003ae <HAL_GPIO_Init+0xe6>
 800045e:	2502      	movs	r5, #2
 8000460:	e7a5      	b.n	80003ae <HAL_GPIO_Init+0xe6>
 8000462:	bf00      	nop
 8000464:	40010400 	.word	0x40010400
 8000468:	40021000 	.word	0x40021000
 800046c:	40010800 	.word	0x40010800
 8000470:	10220000 	.word	0x10220000
 8000474:	10310000 	.word	0x10310000
 8000478:	10320000 	.word	0x10320000
 800047c:	10120000 	.word	0x10120000

08000480 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000480:	b10a      	cbz	r2, 8000486 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000482:	6101      	str	r1, [r0, #16]
  }
}
 8000484:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000486:	0409      	lsls	r1, r1, #16
 8000488:	e7fb      	b.n	8000482 <HAL_GPIO_WritePin+0x2>

0800048a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800048a:	68c3      	ldr	r3, [r0, #12]
 800048c:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800048e:	bf14      	ite	ne
 8000490:	6141      	strne	r1, [r0, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000492:	6101      	streq	r1, [r0, #16]
  }
}
 8000494:	4770      	bx	lr
	...

08000498 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000498:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800049c:	4605      	mov	r5, r0
 800049e:	b338      	cbz	r0, 80004f0 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004a0:	6803      	ldr	r3, [r0, #0]
 80004a2:	07db      	lsls	r3, r3, #31
 80004a4:	d410      	bmi.n	80004c8 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004a6:	682b      	ldr	r3, [r5, #0]
 80004a8:	079f      	lsls	r7, r3, #30
 80004aa:	d45e      	bmi.n	800056a <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004ac:	682b      	ldr	r3, [r5, #0]
 80004ae:	0719      	lsls	r1, r3, #28
 80004b0:	f100 8095 	bmi.w	80005de <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004b4:	682b      	ldr	r3, [r5, #0]
 80004b6:	075a      	lsls	r2, r3, #29
 80004b8:	f100 80bf 	bmi.w	800063a <HAL_RCC_OscConfig+0x1a2>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004bc:	69e8      	ldr	r0, [r5, #28]
 80004be:	2800      	cmp	r0, #0
 80004c0:	f040 812c 	bne.w	800071c <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 80004c4:	2000      	movs	r0, #0
 80004c6:	e029      	b.n	800051c <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80004c8:	4c8f      	ldr	r4, [pc, #572]	; (8000708 <HAL_RCC_OscConfig+0x270>)
 80004ca:	6863      	ldr	r3, [r4, #4]
 80004cc:	f003 030c 	and.w	r3, r3, #12
 80004d0:	2b04      	cmp	r3, #4
 80004d2:	d007      	beq.n	80004e4 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004d4:	6863      	ldr	r3, [r4, #4]
 80004d6:	f003 030c 	and.w	r3, r3, #12
 80004da:	2b08      	cmp	r3, #8
 80004dc:	d10a      	bne.n	80004f4 <HAL_RCC_OscConfig+0x5c>
 80004de:	6863      	ldr	r3, [r4, #4]
 80004e0:	03de      	lsls	r6, r3, #15
 80004e2:	d507      	bpl.n	80004f4 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80004e4:	6823      	ldr	r3, [r4, #0]
 80004e6:	039c      	lsls	r4, r3, #14
 80004e8:	d5dd      	bpl.n	80004a6 <HAL_RCC_OscConfig+0xe>
 80004ea:	686b      	ldr	r3, [r5, #4]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d1da      	bne.n	80004a6 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 80004f0:	2001      	movs	r0, #1
 80004f2:	e013      	b.n	800051c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004f4:	686b      	ldr	r3, [r5, #4]
 80004f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004fa:	d112      	bne.n	8000522 <HAL_RCC_OscConfig+0x8a>
 80004fc:	6823      	ldr	r3, [r4, #0]
 80004fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000502:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000504:	f7ff fe6e 	bl	80001e4 <HAL_GetTick>
 8000508:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800050a:	6823      	ldr	r3, [r4, #0]
 800050c:	0398      	lsls	r0, r3, #14
 800050e:	d4ca      	bmi.n	80004a6 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000510:	f7ff fe68 	bl	80001e4 <HAL_GetTick>
 8000514:	1b80      	subs	r0, r0, r6
 8000516:	2864      	cmp	r0, #100	; 0x64
 8000518:	d9f7      	bls.n	800050a <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 800051a:	2003      	movs	r0, #3
}
 800051c:	b002      	add	sp, #8
 800051e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000522:	b99b      	cbnz	r3, 800054c <HAL_RCC_OscConfig+0xb4>
 8000524:	6823      	ldr	r3, [r4, #0]
 8000526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800052a:	6023      	str	r3, [r4, #0]
 800052c:	6823      	ldr	r3, [r4, #0]
 800052e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000532:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000534:	f7ff fe56 	bl	80001e4 <HAL_GetTick>
 8000538:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800053a:	6823      	ldr	r3, [r4, #0]
 800053c:	0399      	lsls	r1, r3, #14
 800053e:	d5b2      	bpl.n	80004a6 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000540:	f7ff fe50 	bl	80001e4 <HAL_GetTick>
 8000544:	1b80      	subs	r0, r0, r6
 8000546:	2864      	cmp	r0, #100	; 0x64
 8000548:	d9f7      	bls.n	800053a <HAL_RCC_OscConfig+0xa2>
 800054a:	e7e6      	b.n	800051a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800054c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000550:	6823      	ldr	r3, [r4, #0]
 8000552:	d103      	bne.n	800055c <HAL_RCC_OscConfig+0xc4>
 8000554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000558:	6023      	str	r3, [r4, #0]
 800055a:	e7cf      	b.n	80004fc <HAL_RCC_OscConfig+0x64>
 800055c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000560:	6023      	str	r3, [r4, #0]
 8000562:	6823      	ldr	r3, [r4, #0]
 8000564:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000568:	e7cb      	b.n	8000502 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800056a:	4c67      	ldr	r4, [pc, #412]	; (8000708 <HAL_RCC_OscConfig+0x270>)
 800056c:	6863      	ldr	r3, [r4, #4]
 800056e:	f013 0f0c 	tst.w	r3, #12
 8000572:	d007      	beq.n	8000584 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000574:	6863      	ldr	r3, [r4, #4]
 8000576:	f003 030c 	and.w	r3, r3, #12
 800057a:	2b08      	cmp	r3, #8
 800057c:	d110      	bne.n	80005a0 <HAL_RCC_OscConfig+0x108>
 800057e:	6863      	ldr	r3, [r4, #4]
 8000580:	03da      	lsls	r2, r3, #15
 8000582:	d40d      	bmi.n	80005a0 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000584:	6823      	ldr	r3, [r4, #0]
 8000586:	079b      	lsls	r3, r3, #30
 8000588:	d502      	bpl.n	8000590 <HAL_RCC_OscConfig+0xf8>
 800058a:	692b      	ldr	r3, [r5, #16]
 800058c:	2b01      	cmp	r3, #1
 800058e:	d1af      	bne.n	80004f0 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000590:	6823      	ldr	r3, [r4, #0]
 8000592:	696a      	ldr	r2, [r5, #20]
 8000594:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000598:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800059c:	6023      	str	r3, [r4, #0]
 800059e:	e785      	b.n	80004ac <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80005a0:	692a      	ldr	r2, [r5, #16]
 80005a2:	4b5a      	ldr	r3, [pc, #360]	; (800070c <HAL_RCC_OscConfig+0x274>)
 80005a4:	b16a      	cbz	r2, 80005c2 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 80005a6:	2201      	movs	r2, #1
 80005a8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005aa:	f7ff fe1b 	bl	80001e4 <HAL_GetTick>
 80005ae:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005b0:	6823      	ldr	r3, [r4, #0]
 80005b2:	079f      	lsls	r7, r3, #30
 80005b4:	d4ec      	bmi.n	8000590 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80005b6:	f7ff fe15 	bl	80001e4 <HAL_GetTick>
 80005ba:	1b80      	subs	r0, r0, r6
 80005bc:	2802      	cmp	r0, #2
 80005be:	d9f7      	bls.n	80005b0 <HAL_RCC_OscConfig+0x118>
 80005c0:	e7ab      	b.n	800051a <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 80005c2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005c4:	f7ff fe0e 	bl	80001e4 <HAL_GetTick>
 80005c8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80005ca:	6823      	ldr	r3, [r4, #0]
 80005cc:	0798      	lsls	r0, r3, #30
 80005ce:	f57f af6d 	bpl.w	80004ac <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80005d2:	f7ff fe07 	bl	80001e4 <HAL_GetTick>
 80005d6:	1b80      	subs	r0, r0, r6
 80005d8:	2802      	cmp	r0, #2
 80005da:	d9f6      	bls.n	80005ca <HAL_RCC_OscConfig+0x132>
 80005dc:	e79d      	b.n	800051a <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80005de:	69aa      	ldr	r2, [r5, #24]
 80005e0:	4e49      	ldr	r6, [pc, #292]	; (8000708 <HAL_RCC_OscConfig+0x270>)
 80005e2:	4b4b      	ldr	r3, [pc, #300]	; (8000710 <HAL_RCC_OscConfig+0x278>)
 80005e4:	b1da      	cbz	r2, 800061e <HAL_RCC_OscConfig+0x186>
      __HAL_RCC_LSI_ENABLE();
 80005e6:	2201      	movs	r2, #1
 80005e8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80005ea:	f7ff fdfb 	bl	80001e4 <HAL_GetTick>
 80005ee:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80005f0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80005f2:	079b      	lsls	r3, r3, #30
 80005f4:	d50d      	bpl.n	8000612 <HAL_RCC_OscConfig+0x17a>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80005f6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80005fa:	4b46      	ldr	r3, [pc, #280]	; (8000714 <HAL_RCC_OscConfig+0x27c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8000602:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000604:	bf00      	nop
  }
  while (Delay --);
 8000606:	9b01      	ldr	r3, [sp, #4]
 8000608:	1e5a      	subs	r2, r3, #1
 800060a:	9201      	str	r2, [sp, #4]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d1f9      	bne.n	8000604 <HAL_RCC_OscConfig+0x16c>
 8000610:	e750      	b.n	80004b4 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000612:	f7ff fde7 	bl	80001e4 <HAL_GetTick>
 8000616:	1b00      	subs	r0, r0, r4
 8000618:	2802      	cmp	r0, #2
 800061a:	d9e9      	bls.n	80005f0 <HAL_RCC_OscConfig+0x158>
 800061c:	e77d      	b.n	800051a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 800061e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000620:	f7ff fde0 	bl	80001e4 <HAL_GetTick>
 8000624:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000626:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000628:	079f      	lsls	r7, r3, #30
 800062a:	f57f af43 	bpl.w	80004b4 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800062e:	f7ff fdd9 	bl	80001e4 <HAL_GetTick>
 8000632:	1b00      	subs	r0, r0, r4
 8000634:	2802      	cmp	r0, #2
 8000636:	d9f6      	bls.n	8000626 <HAL_RCC_OscConfig+0x18e>
 8000638:	e76f      	b.n	800051a <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800063a:	4c33      	ldr	r4, [pc, #204]	; (8000708 <HAL_RCC_OscConfig+0x270>)
 800063c:	69e3      	ldr	r3, [r4, #28]
 800063e:	00d8      	lsls	r0, r3, #3
 8000640:	d424      	bmi.n	800068c <HAL_RCC_OscConfig+0x1f4>
      pwrclkchanged = SET;
 8000642:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	69e3      	ldr	r3, [r4, #28]
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064a:	61e3      	str	r3, [r4, #28]
 800064c:	69e3      	ldr	r3, [r4, #28]
 800064e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000656:	4e30      	ldr	r6, [pc, #192]	; (8000718 <HAL_RCC_OscConfig+0x280>)
 8000658:	6833      	ldr	r3, [r6, #0]
 800065a:	05d9      	lsls	r1, r3, #23
 800065c:	d518      	bpl.n	8000690 <HAL_RCC_OscConfig+0x1f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800065e:	68eb      	ldr	r3, [r5, #12]
 8000660:	2b01      	cmp	r3, #1
 8000662:	d126      	bne.n	80006b2 <HAL_RCC_OscConfig+0x21a>
 8000664:	6a23      	ldr	r3, [r4, #32]
 8000666:	f043 0301 	orr.w	r3, r3, #1
 800066a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800066c:	f7ff fdba 	bl	80001e4 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000670:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000674:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000676:	6a23      	ldr	r3, [r4, #32]
 8000678:	079b      	lsls	r3, r3, #30
 800067a:	d53f      	bpl.n	80006fc <HAL_RCC_OscConfig+0x264>
    if (pwrclkchanged == SET)
 800067c:	2f00      	cmp	r7, #0
 800067e:	f43f af1d 	beq.w	80004bc <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000682:	69e3      	ldr	r3, [r4, #28]
 8000684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000688:	61e3      	str	r3, [r4, #28]
 800068a:	e717      	b.n	80004bc <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 800068c:	2700      	movs	r7, #0
 800068e:	e7e2      	b.n	8000656 <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000690:	6833      	ldr	r3, [r6, #0]
 8000692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000696:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000698:	f7ff fda4 	bl	80001e4 <HAL_GetTick>
 800069c:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800069e:	6833      	ldr	r3, [r6, #0]
 80006a0:	05da      	lsls	r2, r3, #23
 80006a2:	d4dc      	bmi.n	800065e <HAL_RCC_OscConfig+0x1c6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80006a4:	f7ff fd9e 	bl	80001e4 <HAL_GetTick>
 80006a8:	eba0 0008 	sub.w	r0, r0, r8
 80006ac:	2864      	cmp	r0, #100	; 0x64
 80006ae:	d9f6      	bls.n	800069e <HAL_RCC_OscConfig+0x206>
 80006b0:	e733      	b.n	800051a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006b2:	b9ab      	cbnz	r3, 80006e0 <HAL_RCC_OscConfig+0x248>
 80006b4:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80006b6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006ba:	f023 0301 	bic.w	r3, r3, #1
 80006be:	6223      	str	r3, [r4, #32]
 80006c0:	6a23      	ldr	r3, [r4, #32]
 80006c2:	f023 0304 	bic.w	r3, r3, #4
 80006c6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80006c8:	f7ff fd8c 	bl	80001e4 <HAL_GetTick>
 80006cc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80006ce:	6a23      	ldr	r3, [r4, #32]
 80006d0:	0798      	lsls	r0, r3, #30
 80006d2:	d5d3      	bpl.n	800067c <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80006d4:	f7ff fd86 	bl	80001e4 <HAL_GetTick>
 80006d8:	1b80      	subs	r0, r0, r6
 80006da:	4540      	cmp	r0, r8
 80006dc:	d9f7      	bls.n	80006ce <HAL_RCC_OscConfig+0x236>
 80006de:	e71c      	b.n	800051a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006e0:	2b05      	cmp	r3, #5
 80006e2:	6a23      	ldr	r3, [r4, #32]
 80006e4:	d103      	bne.n	80006ee <HAL_RCC_OscConfig+0x256>
 80006e6:	f043 0304 	orr.w	r3, r3, #4
 80006ea:	6223      	str	r3, [r4, #32]
 80006ec:	e7ba      	b.n	8000664 <HAL_RCC_OscConfig+0x1cc>
 80006ee:	f023 0301 	bic.w	r3, r3, #1
 80006f2:	6223      	str	r3, [r4, #32]
 80006f4:	6a23      	ldr	r3, [r4, #32]
 80006f6:	f023 0304 	bic.w	r3, r3, #4
 80006fa:	e7b6      	b.n	800066a <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80006fc:	f7ff fd72 	bl	80001e4 <HAL_GetTick>
 8000700:	1b80      	subs	r0, r0, r6
 8000702:	4540      	cmp	r0, r8
 8000704:	d9b7      	bls.n	8000676 <HAL_RCC_OscConfig+0x1de>
 8000706:	e708      	b.n	800051a <HAL_RCC_OscConfig+0x82>
 8000708:	40021000 	.word	0x40021000
 800070c:	42420000 	.word	0x42420000
 8000710:	42420480 	.word	0x42420480
 8000714:	20000008 	.word	0x20000008
 8000718:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800071c:	4b2a      	ldr	r3, [pc, #168]	; (80007c8 <HAL_RCC_OscConfig+0x330>)
 800071e:	685a      	ldr	r2, [r3, #4]
 8000720:	461c      	mov	r4, r3
 8000722:	f002 020c 	and.w	r2, r2, #12
 8000726:	2a08      	cmp	r2, #8
 8000728:	d03d      	beq.n	80007a6 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800072a:	2300      	movs	r3, #0
 800072c:	4e27      	ldr	r6, [pc, #156]	; (80007cc <HAL_RCC_OscConfig+0x334>)
 800072e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000730:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000732:	d12b      	bne.n	800078c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000734:	f7ff fd56 	bl	80001e4 <HAL_GetTick>
 8000738:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800073a:	6823      	ldr	r3, [r4, #0]
 800073c:	0199      	lsls	r1, r3, #6
 800073e:	d41f      	bmi.n	8000780 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000740:	6a2b      	ldr	r3, [r5, #32]
 8000742:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000746:	d105      	bne.n	8000754 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000748:	6862      	ldr	r2, [r4, #4]
 800074a:	68a9      	ldr	r1, [r5, #8]
 800074c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000750:	430a      	orrs	r2, r1
 8000752:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000754:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000756:	6862      	ldr	r2, [r4, #4]
 8000758:	430b      	orrs	r3, r1
 800075a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800075e:	4313      	orrs	r3, r2
 8000760:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000762:	2301      	movs	r3, #1
 8000764:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000766:	f7ff fd3d 	bl	80001e4 <HAL_GetTick>
 800076a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800076c:	6823      	ldr	r3, [r4, #0]
 800076e:	019a      	lsls	r2, r3, #6
 8000770:	f53f aea8 	bmi.w	80004c4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000774:	f7ff fd36 	bl	80001e4 <HAL_GetTick>
 8000778:	1b40      	subs	r0, r0, r5
 800077a:	2802      	cmp	r0, #2
 800077c:	d9f6      	bls.n	800076c <HAL_RCC_OscConfig+0x2d4>
 800077e:	e6cc      	b.n	800051a <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000780:	f7ff fd30 	bl	80001e4 <HAL_GetTick>
 8000784:	1bc0      	subs	r0, r0, r7
 8000786:	2802      	cmp	r0, #2
 8000788:	d9d7      	bls.n	800073a <HAL_RCC_OscConfig+0x2a2>
 800078a:	e6c6      	b.n	800051a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 800078c:	f7ff fd2a 	bl	80001e4 <HAL_GetTick>
 8000790:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000792:	6823      	ldr	r3, [r4, #0]
 8000794:	019b      	lsls	r3, r3, #6
 8000796:	f57f ae95 	bpl.w	80004c4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800079a:	f7ff fd23 	bl	80001e4 <HAL_GetTick>
 800079e:	1b40      	subs	r0, r0, r5
 80007a0:	2802      	cmp	r0, #2
 80007a2:	d9f6      	bls.n	8000792 <HAL_RCC_OscConfig+0x2fa>
 80007a4:	e6b9      	b.n	800051a <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80007a6:	2801      	cmp	r0, #1
 80007a8:	f43f aeb8 	beq.w	800051c <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 80007ac:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80007ae:	6a2a      	ldr	r2, [r5, #32]
 80007b0:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80007b4:	4291      	cmp	r1, r2
 80007b6:	f47f ae9b 	bne.w	80004f0 <HAL_RCC_OscConfig+0x58>
 80007ba:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80007bc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80007c0:	4293      	cmp	r3, r2
 80007c2:	f43f ae7f 	beq.w	80004c4 <HAL_RCC_OscConfig+0x2c>
 80007c6:	e693      	b.n	80004f0 <HAL_RCC_OscConfig+0x58>
 80007c8:	40021000 	.word	0x40021000
 80007cc:	42420060 	.word	0x42420060

080007d0 <HAL_RCC_GetSysClockFreq>:
{
 80007d0:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007d2:	4b18      	ldr	r3, [pc, #96]	; (8000834 <HAL_RCC_GetSysClockFreq+0x64>)
{
 80007d4:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007d6:	ac02      	add	r4, sp, #8
 80007d8:	f103 0510 	add.w	r5, r3, #16
 80007dc:	4622      	mov	r2, r4
 80007de:	6818      	ldr	r0, [r3, #0]
 80007e0:	6859      	ldr	r1, [r3, #4]
 80007e2:	3308      	adds	r3, #8
 80007e4:	c203      	stmia	r2!, {r0, r1}
 80007e6:	42ab      	cmp	r3, r5
 80007e8:	4614      	mov	r4, r2
 80007ea:	d1f7      	bne.n	80007dc <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007ec:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 80007f0:	4911      	ldr	r1, [pc, #68]	; (8000838 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007f2:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80007f6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80007f8:	f003 020c 	and.w	r2, r3, #12
 80007fc:	2a08      	cmp	r2, #8
 80007fe:	d117      	bne.n	8000830 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000800:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000804:	a806      	add	r0, sp, #24
 8000806:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000808:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800080a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800080e:	d50c      	bpl.n	800082a <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000810:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000812:	480a      	ldr	r0, [pc, #40]	; (800083c <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000814:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000818:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800081a:	aa06      	add	r2, sp, #24
 800081c:	4413      	add	r3, r2
 800081e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000822:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000826:	b007      	add	sp, #28
 8000828:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <HAL_RCC_GetSysClockFreq+0x70>)
 800082c:	4350      	muls	r0, r2
 800082e:	e7fa      	b.n	8000826 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8000830:	4802      	ldr	r0, [pc, #8]	; (800083c <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8000832:	e7f8      	b.n	8000826 <HAL_RCC_GetSysClockFreq+0x56>
 8000834:	080026bc 	.word	0x080026bc
 8000838:	40021000 	.word	0x40021000
 800083c:	007a1200 	.word	0x007a1200
 8000840:	003d0900 	.word	0x003d0900

08000844 <HAL_RCC_ClockConfig>:
{
 8000844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000848:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800084a:	4604      	mov	r4, r0
 800084c:	b910      	cbnz	r0, 8000854 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800084e:	2001      	movs	r0, #1
}
 8000850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000854:	4a44      	ldr	r2, [pc, #272]	; (8000968 <HAL_RCC_ClockConfig+0x124>)
 8000856:	6813      	ldr	r3, [r2, #0]
 8000858:	f003 0307 	and.w	r3, r3, #7
 800085c:	428b      	cmp	r3, r1
 800085e:	d328      	bcc.n	80008b2 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000860:	6821      	ldr	r1, [r4, #0]
 8000862:	078e      	lsls	r6, r1, #30
 8000864:	d430      	bmi.n	80008c8 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000866:	07ca      	lsls	r2, r1, #31
 8000868:	d443      	bmi.n	80008f2 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800086a:	4a3f      	ldr	r2, [pc, #252]	; (8000968 <HAL_RCC_ClockConfig+0x124>)
 800086c:	6813      	ldr	r3, [r2, #0]
 800086e:	f003 0307 	and.w	r3, r3, #7
 8000872:	42ab      	cmp	r3, r5
 8000874:	d865      	bhi.n	8000942 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000876:	6822      	ldr	r2, [r4, #0]
 8000878:	4d3c      	ldr	r5, [pc, #240]	; (800096c <HAL_RCC_ClockConfig+0x128>)
 800087a:	f012 0f04 	tst.w	r2, #4
 800087e:	d16c      	bne.n	800095a <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000880:	0713      	lsls	r3, r2, #28
 8000882:	d506      	bpl.n	8000892 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000884:	686b      	ldr	r3, [r5, #4]
 8000886:	6922      	ldr	r2, [r4, #16]
 8000888:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800088c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000890:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000892:	f7ff ff9d 	bl	80007d0 <HAL_RCC_GetSysClockFreq>
 8000896:	686b      	ldr	r3, [r5, #4]
 8000898:	4a35      	ldr	r2, [pc, #212]	; (8000970 <HAL_RCC_ClockConfig+0x12c>)
 800089a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800089e:	5cd3      	ldrb	r3, [r2, r3]
 80008a0:	40d8      	lsrs	r0, r3
 80008a2:	4b34      	ldr	r3, [pc, #208]	; (8000974 <HAL_RCC_ClockConfig+0x130>)
 80008a4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80008a6:	4b34      	ldr	r3, [pc, #208]	; (8000978 <HAL_RCC_ClockConfig+0x134>)
 80008a8:	6818      	ldr	r0, [r3, #0]
 80008aa:	f7ff fc59 	bl	8000160 <HAL_InitTick>
  return HAL_OK;
 80008ae:	2000      	movs	r0, #0
 80008b0:	e7ce      	b.n	8000850 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80008b2:	6813      	ldr	r3, [r2, #0]
 80008b4:	f023 0307 	bic.w	r3, r3, #7
 80008b8:	430b      	orrs	r3, r1
 80008ba:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80008bc:	6813      	ldr	r3, [r2, #0]
 80008be:	f003 0307 	and.w	r3, r3, #7
 80008c2:	428b      	cmp	r3, r1
 80008c4:	d1c3      	bne.n	800084e <HAL_RCC_ClockConfig+0xa>
 80008c6:	e7cb      	b.n	8000860 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80008c8:	4b28      	ldr	r3, [pc, #160]	; (800096c <HAL_RCC_ClockConfig+0x128>)
 80008ca:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80008ce:	bf1e      	ittt	ne
 80008d0:	685a      	ldrne	r2, [r3, #4]
 80008d2:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80008d6:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80008d8:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80008da:	bf42      	ittt	mi
 80008dc:	685a      	ldrmi	r2, [r3, #4]
 80008de:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80008e2:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80008e4:	685a      	ldr	r2, [r3, #4]
 80008e6:	68a0      	ldr	r0, [r4, #8]
 80008e8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80008ec:	4302      	orrs	r2, r0
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	e7b9      	b.n	8000866 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008f2:	6862      	ldr	r2, [r4, #4]
 80008f4:	4e1d      	ldr	r6, [pc, #116]	; (800096c <HAL_RCC_ClockConfig+0x128>)
 80008f6:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008f8:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008fa:	d11a      	bne.n	8000932 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008fc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000900:	d0a5      	beq.n	800084e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000902:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000904:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000908:	f023 0303 	bic.w	r3, r3, #3
 800090c:	4313      	orrs	r3, r2
 800090e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000910:	f7ff fc68 	bl	80001e4 <HAL_GetTick>
 8000914:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000916:	6873      	ldr	r3, [r6, #4]
 8000918:	6862      	ldr	r2, [r4, #4]
 800091a:	f003 030c 	and.w	r3, r3, #12
 800091e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000922:	d0a2      	beq.n	800086a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000924:	f7ff fc5e 	bl	80001e4 <HAL_GetTick>
 8000928:	1bc0      	subs	r0, r0, r7
 800092a:	4540      	cmp	r0, r8
 800092c:	d9f3      	bls.n	8000916 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800092e:	2003      	movs	r0, #3
 8000930:	e78e      	b.n	8000850 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000932:	2a02      	cmp	r2, #2
 8000934:	d102      	bne.n	800093c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000936:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800093a:	e7e1      	b.n	8000900 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800093c:	f013 0f02 	tst.w	r3, #2
 8000940:	e7de      	b.n	8000900 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000942:	6813      	ldr	r3, [r2, #0]
 8000944:	f023 0307 	bic.w	r3, r3, #7
 8000948:	432b      	orrs	r3, r5
 800094a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800094c:	6813      	ldr	r3, [r2, #0]
 800094e:	f003 0307 	and.w	r3, r3, #7
 8000952:	42ab      	cmp	r3, r5
 8000954:	f47f af7b 	bne.w	800084e <HAL_RCC_ClockConfig+0xa>
 8000958:	e78d      	b.n	8000876 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800095a:	686b      	ldr	r3, [r5, #4]
 800095c:	68e1      	ldr	r1, [r4, #12]
 800095e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000962:	430b      	orrs	r3, r1
 8000964:	606b      	str	r3, [r5, #4]
 8000966:	e78b      	b.n	8000880 <HAL_RCC_ClockConfig+0x3c>
 8000968:	40022000 	.word	0x40022000
 800096c:	40021000 	.word	0x40021000
 8000970:	08002837 	.word	0x08002837
 8000974:	20000008 	.word	0x20000008
 8000978:	20000004 	.word	0x20000004

0800097c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800097c:	4b04      	ldr	r3, [pc, #16]	; (8000990 <HAL_RCC_GetPCLK1Freq+0x14>)
 800097e:	4a05      	ldr	r2, [pc, #20]	; (8000994 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000986:	5cd3      	ldrb	r3, [r2, r3]
 8000988:	4a03      	ldr	r2, [pc, #12]	; (8000998 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800098a:	6810      	ldr	r0, [r2, #0]
}
 800098c:	40d8      	lsrs	r0, r3
 800098e:	4770      	bx	lr
 8000990:	40021000 	.word	0x40021000
 8000994:	08002847 	.word	0x08002847
 8000998:	20000008 	.word	0x20000008

0800099c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800099c:	4b04      	ldr	r3, [pc, #16]	; (80009b0 <HAL_RCC_GetPCLK2Freq+0x14>)
 800099e:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80009a6:	5cd3      	ldrb	r3, [r2, r3]
 80009a8:	4a03      	ldr	r2, [pc, #12]	; (80009b8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80009aa:	6810      	ldr	r0, [r2, #0]
}
 80009ac:	40d8      	lsrs	r0, r3
 80009ae:	4770      	bx	lr
 80009b0:	40021000 	.word	0x40021000
 80009b4:	08002847 	.word	0x08002847
 80009b8:	20000008 	.word	0x20000008

080009bc <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80009bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009be:	4604      	mov	r4, r0
 80009c0:	460e      	mov	r6, r1
 80009c2:	4615      	mov	r5, r2
 80009c4:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80009c6:	6822      	ldr	r2, [r4, #0]
 80009c8:	6893      	ldr	r3, [r2, #8]
 80009ca:	ea36 0303 	bics.w	r3, r6, r3
 80009ce:	d001      	beq.n	80009d4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80009d0:	2000      	movs	r0, #0
 80009d2:	e02d      	b.n	8000a30 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x74>
    if (Timeout != HAL_MAX_DELAY)
 80009d4:	1c6b      	adds	r3, r5, #1
 80009d6:	d0f7      	beq.n	80009c8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80009d8:	f7ff fc04 	bl	80001e4 <HAL_GetTick>
 80009dc:	1bc0      	subs	r0, r0, r7
 80009de:	4285      	cmp	r5, r0
 80009e0:	d8f1      	bhi.n	80009c6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80009e2:	6823      	ldr	r3, [r4, #0]
 80009e4:	685a      	ldr	r2, [r3, #4]
 80009e6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80009ea:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80009ec:	6862      	ldr	r2, [r4, #4]
 80009ee:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80009f2:	d10a      	bne.n	8000a0a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x4e>
 80009f4:	68a2      	ldr	r2, [r4, #8]
 80009f6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80009fa:	d002      	beq.n	8000a02 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80009fc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000a00:	d103      	bne.n	8000a0a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000a08:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000a0a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000a0c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000a10:	d107      	bne.n	8000a22 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x66>
          SPI_RESET_CRC(hspi);
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000a20:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8000a22:	2301      	movs	r3, #1
 8000a24:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000a28:	2300      	movs	r3, #0
 8000a2a:	2003      	movs	r0, #3
 8000a2c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8000a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000a32 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8000a32:	b538      	push	{r3, r4, r5, lr}
 8000a34:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000a36:	6842      	ldr	r2, [r0, #4]
{
 8000a38:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000a3a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000a3e:	d116      	bne.n	8000a6e <SPI_EndRxTransaction+0x3c>
 8000a40:	6882      	ldr	r2, [r0, #8]
 8000a42:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000a46:	d002      	beq.n	8000a4e <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000a48:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000a4c:	d10f      	bne.n	8000a6e <SPI_EndRxTransaction+0x3c>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8000a4e:	6825      	ldr	r5, [r4, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8000a50:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    __HAL_SPI_DISABLE(hspi);
 8000a54:	6828      	ldr	r0, [r5, #0]
 8000a56:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8000a5a:	6028      	str	r0, [r5, #0]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8000a5c:	d107      	bne.n	8000a6e <SPI_EndRxTransaction+0x3c>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8000a5e:	460a      	mov	r2, r1
 8000a60:	2101      	movs	r1, #1
 8000a62:	4620      	mov	r0, r4
 8000a64:	f7ff ffaa 	bl	80009bc <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8000a68:	b920      	cbnz	r0, 8000a74 <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8000a6a:	2000      	movs	r0, #0
}
 8000a6c:	bd38      	pop	{r3, r4, r5, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000a6e:	460a      	mov	r2, r1
 8000a70:	2180      	movs	r1, #128	; 0x80
 8000a72:	e7f6      	b.n	8000a62 <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000a74:	6d63      	ldr	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8000a76:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000a78:	f043 0320 	orr.w	r3, r3, #32
 8000a7c:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8000a7e:	e7f5      	b.n	8000a6c <SPI_EndRxTransaction+0x3a>

08000a80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000a80:	b510      	push	{r4, lr}
 8000a82:	4613      	mov	r3, r2
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000a84:	460a      	mov	r2, r1
 8000a86:	2180      	movs	r1, #128	; 0x80
{
 8000a88:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000a8a:	f7ff ff97 	bl	80009bc <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8000a8e:	b120      	cbz	r0, 8000a9a <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8000a90:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000a92:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a94:	f043 0320 	orr.w	r3, r3, #32
 8000a98:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8000a9a:	bd10      	pop	{r4, pc}

08000a9c <HAL_SPI_Init>:
{
 8000a9c:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8000a9e:	4604      	mov	r4, r0
 8000aa0:	2800      	cmp	r0, #0
 8000aa2:	d034      	beq.n	8000b0e <HAL_SPI_Init+0x72>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000aa8:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000aac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ab0:	b91b      	cbnz	r3, 8000aba <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8000ab2:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8000ab6:	f001 f88f 	bl	8001bd8 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8000aba:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8000abc:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000abe:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000ac2:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000ac4:	69a1      	ldr	r1, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8000ac6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000aca:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000acc:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8000ad0:	4303      	orrs	r3, r0
 8000ad2:	68e0      	ldr	r0, [r4, #12]
 8000ad4:	4303      	orrs	r3, r0
 8000ad6:	6920      	ldr	r0, [r4, #16]
 8000ad8:	4303      	orrs	r3, r0
 8000ada:	6960      	ldr	r0, [r4, #20]
 8000adc:	4303      	orrs	r3, r0
 8000ade:	69e0      	ldr	r0, [r4, #28]
 8000ae0:	4303      	orrs	r3, r0
 8000ae2:	6a20      	ldr	r0, [r4, #32]
 8000ae4:	4303      	orrs	r3, r0
 8000ae6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000ae8:	4303      	orrs	r3, r0
 8000aea:	f401 7000 	and.w	r0, r1, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8000aee:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000af0:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8000af2:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000af6:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8000af8:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000afa:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000afc:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000afe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000b02:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8000b04:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000b06:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000b08:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8000b0c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000b0e:	2001      	movs	r0, #1
 8000b10:	e7fc      	b.n	8000b0c <HAL_SPI_Init+0x70>

08000b12 <HAL_SPI_Transmit>:
{
 8000b12:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000b16:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000b18:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8000b1c:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8000b1e:	2b01      	cmp	r3, #1
{
 8000b20:	460d      	mov	r5, r1
 8000b22:	4617      	mov	r7, r2
  __HAL_LOCK(hspi);
 8000b24:	f000 8098 	beq.w	8000c58 <HAL_SPI_Transmit+0x146>
 8000b28:	2301      	movs	r3, #1
 8000b2a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000b2e:	f7ff fb59 	bl	80001e4 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8000b32:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8000b36:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	b2d8      	uxtb	r0, r3
 8000b3c:	f040 808a 	bne.w	8000c54 <HAL_SPI_Transmit+0x142>
  if ((pData == NULL) || (Size == 0U))
 8000b40:	2d00      	cmp	r5, #0
 8000b42:	d05b      	beq.n	8000bfc <HAL_SPI_Transmit+0xea>
 8000b44:	2f00      	cmp	r7, #0
 8000b46:	d059      	beq.n	8000bfc <HAL_SPI_Transmit+0xea>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000b4e:	2300      	movs	r3, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000b50:	68a2      	ldr	r2, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000b52:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8000b54:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8000b58:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000b5a:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8000b5c:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8000b5e:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8000b60:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000b62:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8000b66:	bf08      	it	eq
 8000b68:	681a      	ldreq	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000b6a:	6325      	str	r5, [r4, #48]	; 0x30
    SPI_1LINE_TX(hspi);
 8000b6c:	bf08      	it	eq
 8000b6e:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
  hspi->TxXferSize  = Size;
 8000b72:	86a7      	strh	r7, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8000b74:	bf08      	it	eq
 8000b76:	601a      	streq	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000b78:	681a      	ldr	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000b7a:	68e1      	ldr	r1, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000b7c:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000b7e:	bf5e      	ittt	pl
 8000b80:	681a      	ldrpl	r2, [r3, #0]
 8000b82:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8000b86:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000b88:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8000b8c:	6862      	ldr	r2, [r4, #4]
 8000b8e:	d13e      	bne.n	8000c0e <HAL_SPI_Transmit+0xfc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000b90:	b10a      	cbz	r2, 8000b96 <HAL_SPI_Transmit+0x84>
 8000b92:	2f01      	cmp	r7, #1
 8000b94:	d107      	bne.n	8000ba6 <HAL_SPI_Transmit+0x94>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000b96:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000b9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8000b9c:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000b9e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000ba6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	b9a3      	cbnz	r3, 8000bd6 <HAL_SPI_Transmit+0xc4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000bac:	4642      	mov	r2, r8
 8000bae:	4631      	mov	r1, r6
 8000bb0:	4620      	mov	r0, r4
 8000bb2:	f7ff ff65 	bl	8000a80 <SPI_EndRxTxTransaction>
 8000bb6:	2800      	cmp	r0, #0
 8000bb8:	d149      	bne.n	8000c4e <HAL_SPI_Transmit+0x13c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000bba:	68a3      	ldr	r3, [r4, #8]
 8000bbc:	b933      	cbnz	r3, 8000bcc <HAL_SPI_Transmit+0xba>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000bbe:	9301      	str	r3, [sp, #4]
 8000bc0:	6823      	ldr	r3, [r4, #0]
 8000bc2:	68da      	ldr	r2, [r3, #12]
 8000bc4:	9201      	str	r2, [sp, #4]
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	9301      	str	r3, [sp, #4]
 8000bca:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000bcc:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8000bce:	3800      	subs	r0, #0
 8000bd0:	bf18      	it	ne
 8000bd2:	2001      	movne	r0, #1
error:
 8000bd4:	e012      	b.n	8000bfc <HAL_SPI_Transmit+0xea>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000bd6:	6822      	ldr	r2, [r4, #0]
 8000bd8:	6893      	ldr	r3, [r2, #8]
 8000bda:	0798      	lsls	r0, r3, #30
 8000bdc:	d505      	bpl.n	8000bea <HAL_SPI_Transmit+0xd8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000bde:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000be0:	f833 1b02 	ldrh.w	r1, [r3], #2
 8000be4:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8000be6:	6323      	str	r3, [r4, #48]	; 0x30
 8000be8:	e7d9      	b.n	8000b9e <HAL_SPI_Transmit+0x8c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8000bea:	f7ff fafb 	bl	80001e4 <HAL_GetTick>
 8000bee:	eba0 0008 	sub.w	r0, r0, r8
 8000bf2:	42b0      	cmp	r0, r6
 8000bf4:	d3d7      	bcc.n	8000ba6 <HAL_SPI_Transmit+0x94>
 8000bf6:	1c71      	adds	r1, r6, #1
 8000bf8:	d0d5      	beq.n	8000ba6 <HAL_SPI_Transmit+0x94>
          errorcode = HAL_TIMEOUT;
 8000bfa:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000c02:	2300      	movs	r3, #0
 8000c04:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8000c08:	b002      	add	sp, #8
 8000c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000c0e:	b10a      	cbz	r2, 8000c14 <HAL_SPI_Transmit+0x102>
 8000c10:	2f01      	cmp	r7, #1
 8000c12:	d108      	bne.n	8000c26 <HAL_SPI_Transmit+0x114>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000c14:	782a      	ldrb	r2, [r5, #0]
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000c16:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8000c18:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000c1e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000c20:	3b01      	subs	r3, #1
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8000c26:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d0be      	beq.n	8000bac <HAL_SPI_Transmit+0x9a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000c2e:	6823      	ldr	r3, [r4, #0]
 8000c30:	689a      	ldr	r2, [r3, #8]
 8000c32:	0792      	lsls	r2, r2, #30
 8000c34:	d502      	bpl.n	8000c3c <HAL_SPI_Transmit+0x12a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000c36:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000c38:	7812      	ldrb	r2, [r2, #0]
 8000c3a:	e7ec      	b.n	8000c16 <HAL_SPI_Transmit+0x104>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8000c3c:	f7ff fad2 	bl	80001e4 <HAL_GetTick>
 8000c40:	eba0 0008 	sub.w	r0, r0, r8
 8000c44:	42b0      	cmp	r0, r6
 8000c46:	d3ee      	bcc.n	8000c26 <HAL_SPI_Transmit+0x114>
 8000c48:	1c73      	adds	r3, r6, #1
 8000c4a:	d0ec      	beq.n	8000c26 <HAL_SPI_Transmit+0x114>
 8000c4c:	e7d5      	b.n	8000bfa <HAL_SPI_Transmit+0xe8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000c4e:	2320      	movs	r3, #32
 8000c50:	6563      	str	r3, [r4, #84]	; 0x54
 8000c52:	e7b2      	b.n	8000bba <HAL_SPI_Transmit+0xa8>
    errorcode = HAL_BUSY;
 8000c54:	2002      	movs	r0, #2
 8000c56:	e7d1      	b.n	8000bfc <HAL_SPI_Transmit+0xea>
  __HAL_LOCK(hspi);
 8000c58:	2002      	movs	r0, #2
 8000c5a:	e7d5      	b.n	8000c08 <HAL_SPI_Transmit+0xf6>

08000c5c <HAL_SPI_TransmitReceive>:
{
 8000c5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000c60:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000c62:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8000c66:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8000c68:	2b01      	cmp	r3, #1
{
 8000c6a:	460d      	mov	r5, r1
 8000c6c:	4691      	mov	r9, r2
 8000c6e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8000c72:	f000 80e0 	beq.w	8000e36 <HAL_SPI_TransmitReceive+0x1da>
 8000c76:	2301      	movs	r3, #1
 8000c78:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000c7c:	f7ff fab2 	bl	80001e4 <HAL_GetTick>
  tmp_state           = hspi->State;
 8000c80:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8000c84:	4607      	mov	r7, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8000c86:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 8000c88:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 8000c8a:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8000c8c:	d00a      	beq.n	8000ca4 <HAL_SPI_TransmitReceive+0x48>
 8000c8e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000c92:	f040 80ce 	bne.w	8000e32 <HAL_SPI_TransmitReceive+0x1d6>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8000c96:	68a3      	ldr	r3, [r4, #8]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	f040 80ca 	bne.w	8000e32 <HAL_SPI_TransmitReceive+0x1d6>
 8000c9e:	2904      	cmp	r1, #4
 8000ca0:	f040 80c7 	bne.w	8000e32 <HAL_SPI_TransmitReceive+0x1d6>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8000ca4:	2d00      	cmp	r5, #0
 8000ca6:	d03f      	beq.n	8000d28 <HAL_SPI_TransmitReceive+0xcc>
 8000ca8:	f1b9 0f00 	cmp.w	r9, #0
 8000cac:	d03c      	beq.n	8000d28 <HAL_SPI_TransmitReceive+0xcc>
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d03a      	beq.n	8000d28 <HAL_SPI_TransmitReceive+0xcc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000cb2:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000cb6:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000cba:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000cbc:	bf1c      	itt	ne
 8000cbe:	2305      	movne	r3, #5
 8000cc0:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8000cc8:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000ccc:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8000cce:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8000cd0:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000cd2:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 8000cd4:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000cd6:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 8000cd8:	bf58      	it	pl
 8000cda:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8000cdc:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8000cde:	bf58      	it	pl
 8000ce0:	f041 0140 	orrpl.w	r1, r1, #64	; 0x40
  hspi->TxXferSize  = Size;
 8000ce4:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8000ce6:	bf58      	it	pl
 8000ce8:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000cea:	68e1      	ldr	r1, [r4, #12]
 8000cec:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8000cf0:	d151      	bne.n	8000d96 <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000cf2:	b10a      	cbz	r2, 8000cf8 <HAL_SPI_TransmitReceive+0x9c>
 8000cf4:	2e01      	cmp	r6, #1
 8000cf6:	d107      	bne.n	8000d08 <HAL_SPI_TransmitReceive+0xac>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000cf8:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000cfc:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8000cfe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8000d00:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8000d02:	3b01      	subs	r3, #1
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8000d08:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000d0a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	b96b      	cbnz	r3, 8000d2c <HAL_SPI_TransmitReceive+0xd0>
 8000d10:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	b953      	cbnz	r3, 8000d2c <HAL_SPI_TransmitReceive+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000d16:	463a      	mov	r2, r7
 8000d18:	4641      	mov	r1, r8
 8000d1a:	4620      	mov	r0, r4
 8000d1c:	f7ff feb0 	bl	8000a80 <SPI_EndRxTxTransaction>
 8000d20:	2800      	cmp	r0, #0
 8000d22:	d07b      	beq.n	8000e1c <HAL_SPI_TransmitReceive+0x1c0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000d24:	2320      	movs	r3, #32
 8000d26:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8000d28:	2001      	movs	r0, #1
 8000d2a:	e02b      	b.n	8000d84 <HAL_SPI_TransmitReceive+0x128>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8000d2c:	6821      	ldr	r1, [r4, #0]
 8000d2e:	688b      	ldr	r3, [r1, #8]
 8000d30:	079a      	lsls	r2, r3, #30
 8000d32:	d50d      	bpl.n	8000d50 <HAL_SPI_TransmitReceive+0xf4>
 8000d34:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	b153      	cbz	r3, 8000d50 <HAL_SPI_TransmitReceive+0xf4>
 8000d3a:	b14d      	cbz	r5, 8000d50 <HAL_SPI_TransmitReceive+0xf4>
        txallowed = 0U;
 8000d3c:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000d3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000d40:	f833 2b02 	ldrh.w	r2, [r3], #2
 8000d44:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8000d46:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000d48:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8000d50:	688a      	ldr	r2, [r1, #8]
 8000d52:	f012 0201 	ands.w	r2, r2, #1
 8000d56:	d00c      	beq.n	8000d72 <HAL_SPI_TransmitReceive+0x116>
 8000d58:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	b14b      	cbz	r3, 8000d72 <HAL_SPI_TransmitReceive+0x116>
        txallowed = 1U;
 8000d5e:	4615      	mov	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8000d60:	68c9      	ldr	r1, [r1, #12]
 8000d62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000d64:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8000d68:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8000d6a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000d6c:	3b01      	subs	r3, #1
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8000d72:	f7ff fa37 	bl	80001e4 <HAL_GetTick>
 8000d76:	1bc0      	subs	r0, r0, r7
 8000d78:	4540      	cmp	r0, r8
 8000d7a:	d3c6      	bcc.n	8000d0a <HAL_SPI_TransmitReceive+0xae>
 8000d7c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8000d80:	d0c3      	beq.n	8000d0a <HAL_SPI_TransmitReceive+0xae>
        errorcode = HAL_TIMEOUT;
 8000d82:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000d84:	2301      	movs	r3, #1
 8000d86:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8000d90:	b003      	add	sp, #12
 8000d92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000d96:	b10a      	cbz	r2, 8000d9c <HAL_SPI_TransmitReceive+0x140>
 8000d98:	2e01      	cmp	r6, #1
 8000d9a:	d108      	bne.n	8000dae <HAL_SPI_TransmitReceive+0x152>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8000d9c:	782a      	ldrb	r2, [r5, #0]
 8000d9e:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8000da0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000da2:	3301      	adds	r3, #1
 8000da4:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8000da6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000da8:	3b01      	subs	r3, #1
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8000dae:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000db0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	b91b      	cbnz	r3, 8000dbe <HAL_SPI_TransmitReceive+0x162>
 8000db6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d0ab      	beq.n	8000d16 <HAL_SPI_TransmitReceive+0xba>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8000dbe:	6822      	ldr	r2, [r4, #0]
 8000dc0:	6893      	ldr	r3, [r2, #8]
 8000dc2:	079b      	lsls	r3, r3, #30
 8000dc4:	d50e      	bpl.n	8000de4 <HAL_SPI_TransmitReceive+0x188>
 8000dc6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	b15b      	cbz	r3, 8000de4 <HAL_SPI_TransmitReceive+0x188>
 8000dcc:	b155      	cbz	r5, 8000de4 <HAL_SPI_TransmitReceive+0x188>
        txallowed = 0U;
 8000dce:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8000dd0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8000dd6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000dd8:	3301      	adds	r3, #1
 8000dda:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000ddc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000dde:	3b01      	subs	r3, #1
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8000de4:	6822      	ldr	r2, [r4, #0]
 8000de6:	6891      	ldr	r1, [r2, #8]
 8000de8:	f011 0101 	ands.w	r1, r1, #1
 8000dec:	d00d      	beq.n	8000e0a <HAL_SPI_TransmitReceive+0x1ae>
 8000dee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	b153      	cbz	r3, 8000e0a <HAL_SPI_TransmitReceive+0x1ae>
        txallowed = 1U;
 8000df4:	460d      	mov	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8000df6:	68d2      	ldr	r2, [r2, #12]
 8000df8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000dfa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8000dfc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000dfe:	3301      	adds	r3, #1
 8000e00:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8000e02:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000e04:	3b01      	subs	r3, #1
 8000e06:	b29b      	uxth	r3, r3
 8000e08:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8000e0a:	f7ff f9eb 	bl	80001e4 <HAL_GetTick>
 8000e0e:	1bc0      	subs	r0, r0, r7
 8000e10:	4540      	cmp	r0, r8
 8000e12:	d3cd      	bcc.n	8000db0 <HAL_SPI_TransmitReceive+0x154>
 8000e14:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8000e18:	d0ca      	beq.n	8000db0 <HAL_SPI_TransmitReceive+0x154>
 8000e1a:	e7b2      	b.n	8000d82 <HAL_SPI_TransmitReceive+0x126>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000e1c:	68a3      	ldr	r3, [r4, #8]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d1b0      	bne.n	8000d84 <HAL_SPI_TransmitReceive+0x128>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000e22:	6823      	ldr	r3, [r4, #0]
 8000e24:	9001      	str	r0, [sp, #4]
 8000e26:	68da      	ldr	r2, [r3, #12]
 8000e28:	9201      	str	r2, [sp, #4]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	9301      	str	r3, [sp, #4]
 8000e2e:	9b01      	ldr	r3, [sp, #4]
 8000e30:	e7a8      	b.n	8000d84 <HAL_SPI_TransmitReceive+0x128>
    errorcode = HAL_BUSY;
 8000e32:	2002      	movs	r0, #2
 8000e34:	e7a6      	b.n	8000d84 <HAL_SPI_TransmitReceive+0x128>
  __HAL_LOCK(hspi);
 8000e36:	2002      	movs	r0, #2
 8000e38:	e7aa      	b.n	8000d90 <HAL_SPI_TransmitReceive+0x134>

08000e3a <HAL_SPI_Receive>:
{
 8000e3a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000e3e:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8000e40:	6843      	ldr	r3, [r0, #4]
{
 8000e42:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8000e44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8000e48:	4688      	mov	r8, r1
 8000e4a:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8000e4c:	d10c      	bne.n	8000e68 <HAL_SPI_Receive+0x2e>
 8000e4e:	6883      	ldr	r3, [r0, #8]
 8000e50:	b953      	cbnz	r3, 8000e68 <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8000e52:	2304      	movs	r3, #4
 8000e54:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8000e58:	4613      	mov	r3, r2
 8000e5a:	9500      	str	r5, [sp, #0]
 8000e5c:	460a      	mov	r2, r1
 8000e5e:	f7ff fefd 	bl	8000c5c <HAL_SPI_TransmitReceive>
}
 8000e62:	b002      	add	sp, #8
 8000e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8000e68:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d07b      	beq.n	8000f68 <HAL_SPI_Receive+0x12e>
 8000e70:	2301      	movs	r3, #1
 8000e72:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000e76:	f7ff f9b5 	bl	80001e4 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8000e7a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8000e7e:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	b2d8      	uxtb	r0, r3
 8000e84:	d16e      	bne.n	8000f64 <HAL_SPI_Receive+0x12a>
  if ((pData == NULL) || (Size == 0U))
 8000e86:	f1b8 0f00 	cmp.w	r8, #0
 8000e8a:	d059      	beq.n	8000f40 <HAL_SPI_Receive+0x106>
 8000e8c:	2e00      	cmp	r6, #0
 8000e8e:	d057      	beq.n	8000f40 <HAL_SPI_Receive+0x106>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8000e90:	2304      	movs	r3, #4
 8000e92:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000e96:	2300      	movs	r3, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000e98:	68a2      	ldr	r2, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000e9a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8000e9c:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8000ea0:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8000ea2:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferCount = 0U;
 8000ea4:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->TxXferSize  = 0U;
 8000ea6:	86a3      	strh	r3, [r4, #52]	; 0x34
 8000ea8:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000eaa:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    SPI_1LINE_RX(hspi);
 8000eae:	bf08      	it	eq
 8000eb0:	681a      	ldreq	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8000eb2:	87a6      	strh	r6, [r4, #60]	; 0x3c
    SPI_1LINE_RX(hspi);
 8000eb4:	bf08      	it	eq
 8000eb6:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8000eba:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
    SPI_1LINE_RX(hspi);
 8000ebe:	bf08      	it	eq
 8000ec0:	601a      	streq	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	0656      	lsls	r6, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000ec6:	bf5e      	ittt	pl
 8000ec8:	681a      	ldrpl	r2, [r3, #0]
 8000eca:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8000ece:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8000ed0:	68e3      	ldr	r3, [r4, #12]
 8000ed2:	b1f3      	cbz	r3, 8000f12 <HAL_SPI_Receive+0xd8>
    while (hspi->RxXferCount > 0U)
 8000ed4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	b1fb      	cbz	r3, 8000f1a <HAL_SPI_Receive+0xe0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8000eda:	6823      	ldr	r3, [r4, #0]
 8000edc:	689a      	ldr	r2, [r3, #8]
 8000ede:	07d2      	lsls	r2, r2, #31
 8000ee0:	d535      	bpl.n	8000f4e <HAL_SPI_Receive+0x114>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8000ee2:	68da      	ldr	r2, [r3, #12]
 8000ee4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000ee6:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8000eea:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8000eec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8000ef4:	e7ee      	b.n	8000ed4 <HAL_SPI_Receive+0x9a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8000ef6:	6823      	ldr	r3, [r4, #0]
 8000ef8:	689a      	ldr	r2, [r3, #8]
 8000efa:	07d0      	lsls	r0, r2, #31
 8000efc:	d518      	bpl.n	8000f30 <HAL_SPI_Receive+0xf6>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8000efe:	7b1b      	ldrb	r3, [r3, #12]
 8000f00:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000f02:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8000f04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000f06:	3301      	adds	r3, #1
 8000f08:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8000f0a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8000f12:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d1ed      	bne.n	8000ef6 <HAL_SPI_Receive+0xbc>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000f1a:	463a      	mov	r2, r7
 8000f1c:	4629      	mov	r1, r5
 8000f1e:	4620      	mov	r0, r4
 8000f20:	f7ff fd87 	bl	8000a32 <SPI_EndRxTransaction>
 8000f24:	b9d8      	cbnz	r0, 8000f5e <HAL_SPI_Receive+0x124>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000f26:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8000f28:	3800      	subs	r0, #0
 8000f2a:	bf18      	it	ne
 8000f2c:	2001      	movne	r0, #1
error :
 8000f2e:	e007      	b.n	8000f40 <HAL_SPI_Receive+0x106>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8000f30:	f7ff f958 	bl	80001e4 <HAL_GetTick>
 8000f34:	1bc0      	subs	r0, r0, r7
 8000f36:	42a8      	cmp	r0, r5
 8000f38:	d3eb      	bcc.n	8000f12 <HAL_SPI_Receive+0xd8>
 8000f3a:	1c69      	adds	r1, r5, #1
 8000f3c:	d0e9      	beq.n	8000f12 <HAL_SPI_Receive+0xd8>
          errorcode = HAL_TIMEOUT;
 8000f3e:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8000f40:	2301      	movs	r3, #1
 8000f42:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000f46:	2300      	movs	r3, #0
 8000f48:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8000f4c:	e789      	b.n	8000e62 <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8000f4e:	f7ff f949 	bl	80001e4 <HAL_GetTick>
 8000f52:	1bc0      	subs	r0, r0, r7
 8000f54:	42a8      	cmp	r0, r5
 8000f56:	d3bd      	bcc.n	8000ed4 <HAL_SPI_Receive+0x9a>
 8000f58:	1c6b      	adds	r3, r5, #1
 8000f5a:	d0bb      	beq.n	8000ed4 <HAL_SPI_Receive+0x9a>
 8000f5c:	e7ef      	b.n	8000f3e <HAL_SPI_Receive+0x104>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000f5e:	2320      	movs	r3, #32
 8000f60:	6563      	str	r3, [r4, #84]	; 0x54
 8000f62:	e7e0      	b.n	8000f26 <HAL_SPI_Receive+0xec>
    errorcode = HAL_BUSY;
 8000f64:	2002      	movs	r0, #2
 8000f66:	e7eb      	b.n	8000f40 <HAL_SPI_Receive+0x106>
  __HAL_LOCK(hspi);
 8000f68:	2002      	movs	r0, #2
 8000f6a:	e77a      	b.n	8000e62 <HAL_SPI_Receive+0x28>

08000f6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000f6c:	b538      	push	{r3, r4, r5, lr}
 8000f6e:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f70:	6803      	ldr	r3, [r0, #0]
 8000f72:	68c1      	ldr	r1, [r0, #12]
 8000f74:	691a      	ldr	r2, [r3, #16]
 8000f76:	2419      	movs	r4, #25
 8000f78:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000f80:	6882      	ldr	r2, [r0, #8]
 8000f82:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8000f84:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000f86:	4302      	orrs	r2, r0
 8000f88:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 8000f8a:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8000f8e:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000f92:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8000f94:	430a      	orrs	r2, r1
 8000f96:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000f98:	695a      	ldr	r2, [r3, #20]
 8000f9a:	69a9      	ldr	r1, [r5, #24]
 8000f9c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	; (8000fdc <UART_SetConfig+0x70>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d114      	bne.n	8000fd4 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8000faa:	f7ff fcf7 	bl	800099c <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000fae:	4344      	muls	r4, r0
 8000fb0:	686b      	ldr	r3, [r5, #4]
 8000fb2:	2264      	movs	r2, #100	; 0x64
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	fbb4 f4f3 	udiv	r4, r4, r3
 8000fba:	fbb4 f1f2 	udiv	r1, r4, r2
 8000fbe:	fb02 4311 	mls	r3, r2, r1, r4
 8000fc2:	011b      	lsls	r3, r3, #4
 8000fc4:	3332      	adds	r3, #50	; 0x32
 8000fc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8000fca:	6828      	ldr	r0, [r5, #0]
 8000fcc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8000fd0:	6083      	str	r3, [r0, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 8000fd2:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8000fd4:	f7ff fcd2 	bl	800097c <HAL_RCC_GetPCLK1Freq>
 8000fd8:	e7e9      	b.n	8000fae <UART_SetConfig+0x42>
 8000fda:	bf00      	nop
 8000fdc:	40013800 	.word	0x40013800

08000fe0 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	460e      	mov	r6, r1
 8000fe6:	4617      	mov	r7, r2
 8000fe8:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000fea:	6822      	ldr	r2, [r4, #0]
 8000fec:	6813      	ldr	r3, [r2, #0]
 8000fee:	ea36 0303 	bics.w	r3, r6, r3
 8000ff2:	d101      	bne.n	8000ff8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	e014      	b.n	8001022 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8000ff8:	1c6b      	adds	r3, r5, #1
 8000ffa:	d0f7      	beq.n	8000fec <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000ffc:	b995      	cbnz	r5, 8001024 <UART_WaitOnFlagUntilTimeout.constprop.0+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000ffe:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8001000:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001002:	68da      	ldr	r2, [r3, #12]
 8001004:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001008:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800100a:	695a      	ldr	r2, [r3, #20]
 800100c:	f022 0201 	bic.w	r2, r2, #1
 8001010:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001012:	2320      	movs	r3, #32
 8001014:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001018:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800101c:	2300      	movs	r3, #0
 800101e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 8001022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001024:	f7ff f8de 	bl	80001e4 <HAL_GetTick>
 8001028:	1bc0      	subs	r0, r0, r7
 800102a:	4285      	cmp	r5, r0
 800102c:	d2dd      	bcs.n	8000fea <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 800102e:	e7e6      	b.n	8000ffe <UART_WaitOnFlagUntilTimeout.constprop.0+0x1e>

08001030 <HAL_UART_Init>:
{
 8001030:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001032:	4604      	mov	r4, r0
 8001034:	b340      	cbz	r0, 8001088 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001036:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800103a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800103e:	b91b      	cbnz	r3, 8001048 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001040:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001044:	f000 fe02 	bl	8001c4c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001048:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800104a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800104c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001050:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001052:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001054:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001058:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800105a:	f7ff ff87 	bl	8000f6c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800105e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001060:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001062:	691a      	ldr	r2, [r3, #16]
 8001064:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001068:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800106a:	695a      	ldr	r2, [r3, #20]
 800106c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001070:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001072:	68da      	ldr	r2, [r3, #12]
 8001074:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001078:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800107a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800107c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800107e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001082:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8001086:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001088:	2001      	movs	r0, #1
 800108a:	e7fc      	b.n	8001086 <HAL_UART_Init+0x56>

0800108c <HAL_UART_Transmit>:
{
 800108c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001090:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001092:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8001096:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8001098:	2b20      	cmp	r3, #32
{
 800109a:	460d      	mov	r5, r1
 800109c:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800109e:	d14e      	bne.n	800113e <HAL_UART_Transmit+0xb2>
    if ((pData == NULL) || (Size == 0U))
 80010a0:	2900      	cmp	r1, #0
 80010a2:	d04a      	beq.n	800113a <HAL_UART_Transmit+0xae>
 80010a4:	2a00      	cmp	r2, #0
 80010a6:	d048      	beq.n	800113a <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 80010a8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d046      	beq.n	800113e <HAL_UART_Transmit+0xb2>
 80010b0:	2301      	movs	r3, #1
 80010b2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80010ba:	2321      	movs	r3, #33	; 0x21
 80010bc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80010c0:	f7ff f890 	bl	80001e4 <HAL_GetTick>
 80010c4:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 80010c6:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80010ca:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80010ce:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	b963      	cbnz	r3, 80010ee <HAL_UART_Transmit+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80010d4:	463b      	mov	r3, r7
 80010d6:	4632      	mov	r2, r6
 80010d8:	2140      	movs	r1, #64	; 0x40
 80010da:	4620      	mov	r0, r4
 80010dc:	f7ff ff80 	bl	8000fe0 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80010e0:	b9a0      	cbnz	r0, 800110c <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 80010e2:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80010e4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 80010e8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 80010ec:	e00f      	b.n	800110e <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 80010ee:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80010f0:	4632      	mov	r2, r6
      huart->TxXferCount--;
 80010f2:	3b01      	subs	r3, #1
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80010f8:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80010fa:	2180      	movs	r1, #128	; 0x80
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80010fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001100:	4620      	mov	r0, r4
 8001102:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001104:	d110      	bne.n	8001128 <HAL_UART_Transmit+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001106:	f7ff ff6b 	bl	8000fe0 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800110a:	b110      	cbz	r0, 8001112 <HAL_UART_Transmit+0x86>
          return HAL_TIMEOUT;
 800110c:	2003      	movs	r0, #3
}
 800110e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001112:	882b      	ldrh	r3, [r5, #0]
 8001114:	6822      	ldr	r2, [r4, #0]
 8001116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800111a:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800111c:	6923      	ldr	r3, [r4, #16]
 800111e:	b90b      	cbnz	r3, 8001124 <HAL_UART_Transmit+0x98>
          pData += 2U;
 8001120:	3502      	adds	r5, #2
 8001122:	e7d4      	b.n	80010ce <HAL_UART_Transmit+0x42>
          pData += 1U;
 8001124:	3501      	adds	r5, #1
 8001126:	e7d2      	b.n	80010ce <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001128:	f7ff ff5a 	bl	8000fe0 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800112c:	2800      	cmp	r0, #0
 800112e:	d1ed      	bne.n	800110c <HAL_UART_Transmit+0x80>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001130:	6823      	ldr	r3, [r4, #0]
 8001132:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	e7c9      	b.n	80010ce <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800113a:	2001      	movs	r0, #1
 800113c:	e7e7      	b.n	800110e <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 800113e:	2002      	movs	r0, #2
 8001140:	e7e5      	b.n	800110e <HAL_UART_Transmit+0x82>

08001142 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001142:	b530      	push	{r4, r5, lr}
 8001144:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001146:	2210      	movs	r2, #16
 8001148:	2100      	movs	r1, #0
 800114a:	a809      	add	r0, sp, #36	; 0x24
 800114c:	f000 fe62 	bl	8001e14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001150:	2100      	movs	r1, #0
 8001152:	2214      	movs	r2, #20
 8001154:	a801      	add	r0, sp, #4
 8001156:	f000 fe5d 	bl	8001e14 <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800115a:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800115c:	2201      	movs	r2, #1
 800115e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001162:	2500      	movs	r5, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001164:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001168:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800116c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001170:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001172:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001174:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001176:	9508      	str	r5, [sp, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001178:	f7ff f98e 	bl	8000498 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117c:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800117e:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001182:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001186:	4621      	mov	r1, r4
 8001188:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800118a:	e9cd 3504 	strd	r3, r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800118e:	9503      	str	r5, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001190:	f7ff fb58 	bl	8000844 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001194:	b011      	add	sp, #68	; 0x44
 8001196:	bd30      	pop	{r4, r5, pc}

08001198 <main>:
{
 8001198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800119c:	b0a8      	sub	sp, #160	; 0xa0
  HAL_Init();
 800119e:	f7ff f803 	bl	80001a8 <HAL_Init>
  SystemClock_Config();
 80011a2:	f7ff ffce 	bl	8001142 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a6:	2210      	movs	r2, #16
 80011a8:	2100      	movs	r1, #0
 80011aa:	a818      	add	r0, sp, #96	; 0x60
 80011ac:	f000 fe32 	bl	8001e14 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b0:	4bc1      	ldr	r3, [pc, #772]	; (80014b8 <main+0x320>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDPIN_GPIO_Port, LEDPIN_Pin, GPIO_PIN_RESET);
 80011b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b6:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LEDPIN_GPIO_Port, LEDPIN_Pin, GPIO_PIN_RESET);
 80011b8:	48c0      	ldr	r0, [pc, #768]	; (80014bc <main+0x324>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ba:	f042 0210 	orr.w	r2, r2, #16
 80011be:	619a      	str	r2, [r3, #24]
 80011c0:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : LEDPIN_Pin */
  GPIO_InitStruct.Pin = LEDPIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c4:	f002 0210 	and.w	r2, r2, #16
 80011c8:	9205      	str	r2, [sp, #20]
 80011ca:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011cc:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2702      	movs	r7, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d0:	f042 0220 	orr.w	r2, r2, #32
 80011d4:	619a      	str	r2, [r3, #24]
 80011d6:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d8:	f04f 0801 	mov.w	r8, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011dc:	f002 0220 	and.w	r2, r2, #32
 80011e0:	9206      	str	r2, [sp, #24]
 80011e2:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e4:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 80011e6:	2518      	movs	r5, #24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e8:	f042 0204 	orr.w	r2, r2, #4
 80011ec:	619a      	str	r2, [r3, #24]
 80011ee:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LEDPIN_GPIO_Port, LEDPIN_Pin, GPIO_PIN_RESET);
 80011f0:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f2:	f003 0304 	and.w	r3, r3, #4
 80011f6:	9307      	str	r3, [sp, #28]
 80011f8:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(LEDPIN_GPIO_Port, LEDPIN_Pin, GPIO_PIN_RESET);
 80011fa:	f7ff f941 	bl	8000480 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	2118      	movs	r1, #24
 8001202:	48af      	ldr	r0, [pc, #700]	; (80014c0 <main+0x328>)
 8001204:	f7ff f93c 	bl	8000480 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001208:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(LEDPIN_GPIO_Port, &GPIO_InitStruct);
 800120c:	48ab      	ldr	r0, [pc, #684]	; (80014bc <main+0x324>)
 800120e:	a918      	add	r1, sp, #96	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001210:	e9cd 3818 	strd	r3, r8, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001214:	e9cd 471a 	strd	r4, r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(LEDPIN_GPIO_Port, &GPIO_InitStruct);
 8001218:	f7ff f856 	bl	80002c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800121c:	2204      	movs	r2, #4
 800121e:	4ba9      	ldr	r3, [pc, #676]	; (80014c4 <main+0x32c>)
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8001220:	48a7      	ldr	r0, [pc, #668]	; (80014c0 <main+0x328>)
 8001222:	a918      	add	r1, sp, #96	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001224:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	941a      	str	r4, [sp, #104]	; 0x68
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 800122a:	f7ff f84d 	bl	80002c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122e:	48a4      	ldr	r0, [pc, #656]	; (80014c0 <main+0x328>)
 8001230:	a918      	add	r1, sp, #96	; 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001232:	e9cd 5818 	strd	r5, r8, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	e9cd 471a 	strd	r4, r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123a:	f7ff f845 	bl	80002c8 <HAL_GPIO_Init>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800123e:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 8001242:	48a1      	ldr	r0, [pc, #644]	; (80014c8 <main+0x330>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001244:	49a1      	ldr	r1, [pc, #644]	; (80014cc <main+0x334>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001246:	260c      	movs	r6, #12
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001248:	e9c0 1300 	strd	r1, r3, [r0]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800124c:	f44f 7300 	mov.w	r3, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001250:	e9c0 3506 	strd	r3, r5, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 8001254:	230a      	movs	r3, #10
  huart1.Instance = USART1;
 8001256:	4d9e      	ldr	r5, [pc, #632]	; (80014d0 <main+0x338>)
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001258:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800125c:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001260:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001264:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001266:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001268:	f7ff fc18 	bl	8000a9c <HAL_SPI_Init>
  huart1.Init.BaudRate = 1000000;
 800126c:	4b99      	ldr	r3, [pc, #612]	; (80014d4 <main+0x33c>)
 800126e:	489a      	ldr	r0, [pc, #616]	; (80014d8 <main+0x340>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001270:	e9c5 4402 	strd	r4, r4, [r5, #8]
  huart1.Init.BaudRate = 1000000;
 8001274:	e9c5 0300 	strd	r0, r3, [r5]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001278:	4628      	mov	r0, r5
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800127a:	e9c5 6405 	strd	r6, r4, [r5, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 800127e:	612c      	str	r4, [r5, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001280:	61ec      	str	r4, [r5, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001282:	f7ff fed5 	bl	8001030 <HAL_UART_Init>
  DWT_Init(); // счётчик для микросекундных пауз
 8001286:	f000 f97f 	bl	8001588 <DWT_Init>
  uint8_t res = isChipConnected(); // проверяет подключён ли модуль к SPI
 800128a:	f000 faa7 	bl	80017dc <isChipConnected>
  char str[64] = {0,};
 800128e:	4621      	mov	r1, r4
 8001290:	223c      	movs	r2, #60	; 0x3c
 8001292:	a809      	add	r0, sp, #36	; 0x24
 8001294:	9408      	str	r4, [sp, #32]
 8001296:	f000 fdbd 	bl	8001e14 <memset>
  snprintf(str, 64, "Connected: %s\n", 1 ? "OK" : "NOT OK");
 800129a:	2140      	movs	r1, #64	; 0x40
 800129c:	4b8f      	ldr	r3, [pc, #572]	; (80014dc <main+0x344>)
 800129e:	4a90      	ldr	r2, [pc, #576]	; (80014e0 <main+0x348>)
 80012a0:	a808      	add	r0, sp, #32
 80012a2:	f000 fdbf 	bl	8001e24 <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 80012a6:	a808      	add	r0, sp, #32
 80012a8:	f7fe ff52 	bl	8000150 <strlen>
 80012ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b0:	b282      	uxth	r2, r0
 80012b2:	a908      	add	r1, sp, #32
 80012b4:	4628      	mov	r0, r5
 80012b6:	f7ff fee9 	bl	800108c <HAL_UART_Transmit>
  res = NRF_Init(); // инициализация
 80012ba:	f000 fbd3 	bl	8001a64 <NRF_Init>
  snprintf(str, 64, "Init: %s\n", res > 0 && res < 255 ? "OK" : "NOT OK");
 80012be:	4a87      	ldr	r2, [pc, #540]	; (80014dc <main+0x344>)
 80012c0:	4b88      	ldr	r3, [pc, #544]	; (80014e4 <main+0x34c>)
 80012c2:	3801      	subs	r0, #1
 80012c4:	b2c0      	uxtb	r0, r0
 80012c6:	28fd      	cmp	r0, #253	; 0xfd
 80012c8:	bf98      	it	ls
 80012ca:	4613      	movls	r3, r2
 80012cc:	2140      	movs	r1, #64	; 0x40
 80012ce:	4a86      	ldr	r2, [pc, #536]	; (80014e8 <main+0x350>)
 80012d0:	a808      	add	r0, sp, #32
 80012d2:	f000 fda7 	bl	8001e24 <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 80012d6:	a808      	add	r0, sp, #32
 80012d8:	f7fe ff3a 	bl	8000150 <strlen>
 80012dc:	a908      	add	r1, sp, #32
 80012de:	b282      	uxth	r2, r0
 80012e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e4:	4628      	mov	r0, r5
 80012e6:	f7ff fed1 	bl	800108c <HAL_UART_Transmit>
  setAutoAck(false);				//автоподтверждение
 80012ea:	4620      	mov	r0, r4
 80012ec:	f000 fb76 	bl	80019dc <setAutoAck>
  setDataRate(RF24_250KBPS); 		//скорость передачи данных
 80012f0:	4638      	mov	r0, r7
 80012f2:	f000 fb95 	bl	8001a20 <setDataRate>
  setPALevel(RF24_PA_MAX);		//мощность передатчика
 80012f6:	2003      	movs	r0, #3
 80012f8:	f000 fb76 	bl	80019e8 <setPALevel>
  setCRCLength(RF24_CRC_16);
 80012fc:	4638      	mov	r0, r7
 80012fe:	f000 fc22 	bl	8001b46 <setCRCLength>
  setChannel(0x5); 				//частотный канал
 8001302:	2005      	movs	r0, #5
 8001304:	f000 fa5d 	bl	80017c2 <setChannel>
  setAddressWidth(5);			//установить длину идентификатора трубы
 8001308:	2005      	movs	r0, #5
 800130a:	f000 faf1 	bl	80018f0 <setAddressWidth>
  openReadingPipe(1, pipe1);	//открыть трубу №1 на приёмнике. В скобках номер трубы и индетификатор
 800130e:	a368      	add	r3, pc, #416	; (adr r3, 80014b0 <main+0x318>)
 8001310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001314:	4640      	mov	r0, r8
 8001316:	f000 faaf 	bl	8001878 <openReadingPipe>
  startListening(); 			//включить прослушивание труб на приёмнике
 800131a:	f000 fb15 	bl	8001948 <startListening>
  uint8_t status = get_status();
 800131e:	f000 fa4d 	bl	80017bc <get_status>
  snprintf(str, 64, "get_status: 0x%02x\n", status);
 8001322:	2140      	movs	r1, #64	; 0x40
  uint8_t status = get_status();
 8001324:	4603      	mov	r3, r0
  snprintf(str, 64, "get_status: 0x%02x\n", status);
 8001326:	4a71      	ldr	r2, [pc, #452]	; (80014ec <main+0x354>)
 8001328:	a808      	add	r0, sp, #32
 800132a:	f000 fd7b 	bl	8001e24 <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 800132e:	a808      	add	r0, sp, #32
 8001330:	f7fe ff0e 	bl	8000150 <strlen>
 8001334:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001338:	b282      	uxth	r2, r0
 800133a:	a908      	add	r1, sp, #32
 800133c:	4628      	mov	r0, r5
 800133e:	f7ff fea5 	bl	800108c <HAL_UART_Transmit>
  status = getPALevel();
 8001342:	f000 fb66 	bl	8001a12 <getPALevel>
  snprintf(str, 64, "getPALevel: 0x%02x  ", status);
 8001346:	2140      	movs	r1, #64	; 0x40
 8001348:	4603      	mov	r3, r0
 800134a:	4a69      	ldr	r2, [pc, #420]	; (80014f0 <main+0x358>)
  status = getPALevel();
 800134c:	4604      	mov	r4, r0
  snprintf(str, 64, "getPALevel: 0x%02x  ", status);
 800134e:	a808      	add	r0, sp, #32
 8001350:	f000 fd68 	bl	8001e24 <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8001354:	a808      	add	r0, sp, #32
 8001356:	f7fe fefb 	bl	8000150 <strlen>
 800135a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135e:	b282      	uxth	r2, r0
 8001360:	a908      	add	r1, sp, #32
 8001362:	4628      	mov	r0, r5
 8001364:	f7ff fe92 	bl	800108c <HAL_UART_Transmit>
  if(status == 0x00)
 8001368:	2c00      	cmp	r4, #0
 800136a:	f040 80d3 	bne.w	8001514 <main+0x37c>
	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_PA_MIN\n", strlen("RF24_PA_MIN\n"), 1000);
 800136e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001372:	4632      	mov	r2, r6
 8001374:	495f      	ldr	r1, [pc, #380]	; (80014f4 <main+0x35c>)
	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_PA_MAX\n", strlen("RF24_PA_MAX\n"), 1000);
 8001376:	4628      	mov	r0, r5
 8001378:	f7ff fe88 	bl	800108c <HAL_UART_Transmit>
  status = getChannel();
 800137c:	f000 fa25 	bl	80017ca <getChannel>
  snprintf(str, 64, "getChannel: 0x%02x № %d\n", status, status);
 8001380:	2140      	movs	r1, #64	; 0x40
  status = getChannel();
 8001382:	4603      	mov	r3, r0
  snprintf(str, 64, "getChannel: 0x%02x № %d\n", status, status);
 8001384:	4a5c      	ldr	r2, [pc, #368]	; (80014f8 <main+0x360>)
 8001386:	9000      	str	r0, [sp, #0]
 8001388:	a808      	add	r0, sp, #32
 800138a:	f000 fd4b 	bl	8001e24 <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 800138e:	a808      	add	r0, sp, #32
 8001390:	f7fe fede 	bl	8000150 <strlen>
 8001394:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001398:	b282      	uxth	r2, r0
 800139a:	a908      	add	r1, sp, #32
 800139c:	484c      	ldr	r0, [pc, #304]	; (80014d0 <main+0x338>)
 800139e:	f7ff fe75 	bl	800108c <HAL_UART_Transmit>
  status = getDataRate();
 80013a2:	f000 fbc1 	bl	8001b28 <getDataRate>
  snprintf(str, 64, "getDataRate: 0x%02x  ", status);
 80013a6:	2140      	movs	r1, #64	; 0x40
 80013a8:	4603      	mov	r3, r0
 80013aa:	4a54      	ldr	r2, [pc, #336]	; (80014fc <main+0x364>)
  status = getDataRate();
 80013ac:	4604      	mov	r4, r0
  snprintf(str, 64, "getDataRate: 0x%02x  ", status);
 80013ae:	a808      	add	r0, sp, #32
 80013b0:	f000 fd38 	bl	8001e24 <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 80013b4:	a808      	add	r0, sp, #32
 80013b6:	f7fe fecb 	bl	8000150 <strlen>
 80013ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013be:	b282      	uxth	r2, r0
 80013c0:	a908      	add	r1, sp, #32
 80013c2:	4843      	ldr	r0, [pc, #268]	; (80014d0 <main+0x338>)
 80013c4:	f7ff fe62 	bl	800108c <HAL_UART_Transmit>
  if(status == 0x02)
 80013c8:	2c02      	cmp	r4, #2
	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_250KBPS\n", strlen("RF24_250KBPS\n"), 1000);
 80013ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  if(status == 0x02)
 80013ce:	f040 80b7 	bne.w	8001540 <main+0x3a8>
	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_250KBPS\n", strlen("RF24_250KBPS\n"), 1000);
 80013d2:	220d      	movs	r2, #13
 80013d4:	494a      	ldr	r1, [pc, #296]	; (8001500 <main+0x368>)
	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_1MBPS\n", strlen("RF24_1MBPS\n"), 1000);
 80013d6:	483e      	ldr	r0, [pc, #248]	; (80014d0 <main+0x338>)
 80013d8:	f7ff fe58 	bl	800108c <HAL_UART_Transmit>
  status = getPayloadSize();
 80013dc:	f000 f9f8 	bl	80017d0 <getPayloadSize>
  snprintf(str, 64, "getPayloadSize: %d\n", status);
 80013e0:	2140      	movs	r1, #64	; 0x40
  status = getPayloadSize();
 80013e2:	4603      	mov	r3, r0
  snprintf(str, 64, "getPayloadSize: %d\n", status);
 80013e4:	4a47      	ldr	r2, [pc, #284]	; (8001504 <main+0x36c>)
 80013e6:	a808      	add	r0, sp, #32
 80013e8:	f000 fd1c 	bl	8001e24 <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 80013ec:	a808      	add	r0, sp, #32
 80013ee:	f7fe feaf 	bl	8000150 <strlen>
 80013f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f6:	b282      	uxth	r2, r0
 80013f8:	a908      	add	r1, sp, #32
 80013fa:	4835      	ldr	r0, [pc, #212]	; (80014d0 <main+0x338>)
 80013fc:	f7ff fe46 	bl	800108c <HAL_UART_Transmit>
  status = getCRCLength();
 8001400:	f000 fbb4 	bl	8001b6c <getCRCLength>
  snprintf(str, 64, "getCRCLength: 0x%02x  ", status);
 8001404:	2140      	movs	r1, #64	; 0x40
 8001406:	4603      	mov	r3, r0
 8001408:	4a3f      	ldr	r2, [pc, #252]	; (8001508 <main+0x370>)
  status = getCRCLength();
 800140a:	4604      	mov	r4, r0
  snprintf(str, 64, "getCRCLength: 0x%02x  ", status);
 800140c:	a808      	add	r0, sp, #32
 800140e:	f000 fd09 	bl	8001e24 <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8001412:	a808      	add	r0, sp, #32
 8001414:	f7fe fe9c 	bl	8000150 <strlen>
 8001418:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800141c:	b282      	uxth	r2, r0
 800141e:	a908      	add	r1, sp, #32
 8001420:	482b      	ldr	r0, [pc, #172]	; (80014d0 <main+0x338>)
 8001422:	f7ff fe33 	bl	800108c <HAL_UART_Transmit>
  if(status == 0x00)
 8001426:	2c00      	cmp	r4, #0
 8001428:	f040 8091 	bne.w	800154e <main+0x3b6>
	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_CRC_DISABLED\n", strlen("RF24_CRC_DISABLED\n"), 1000);
 800142c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001430:	2212      	movs	r2, #18
 8001432:	4936      	ldr	r1, [pc, #216]	; (800150c <main+0x374>)
	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_CRC_16\n", strlen("RF24_CRC_16\n"), 1000);
 8001434:	4826      	ldr	r0, [pc, #152]	; (80014d0 <main+0x338>)
 8001436:	f7ff fe29 	bl	800108c <HAL_UART_Transmit>
  maskIRQ(true, true, true); // маскируем прерывания
 800143a:	2201      	movs	r2, #1
 800143c:	4611      	mov	r1, r2
 800143e:	4610      	mov	r0, r2
 8001440:	f000 f9ea 	bl	8001818 <maskIRQ>
			HAL_GPIO_TogglePin(LEDPIN_GPIO_Port, LEDPIN_Pin);
 8001444:	4e1d      	ldr	r6, [pc, #116]	; (80014bc <main+0x324>)
			snprintf(str, 64, "data[0]=%d data[1]=%d data[2]=%d data[3]%d\n", nrf_data[0], nrf_data[1], nrf_data[2],nrf_data[3]);
 8001446:	4d32      	ldr	r5, [pc, #200]	; (8001510 <main+0x378>)
			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8001448:	4c21      	ldr	r4, [pc, #132]	; (80014d0 <main+0x338>)
	int16_t nrf_data[32] = {0,}; // буфер указываем максимального размера
 800144a:	2240      	movs	r2, #64	; 0x40
 800144c:	2100      	movs	r1, #0
 800144e:	a818      	add	r0, sp, #96	; 0x60
 8001450:	f000 fce0 	bl	8001e14 <memset>
	uint8_t pipe_num = 1;
 8001454:	2301      	movs	r3, #1
	if(available(&pipe_num)) // проверяем пришло ли что-то
 8001456:	f10d 0013 	add.w	r0, sp, #19
	uint8_t pipe_num = 1;
 800145a:	f88d 3013 	strb.w	r3, [sp, #19]
	if(available(&pipe_num)) // проверяем пришло ли что-то
 800145e:	f000 f9f0 	bl	8001842 <available>
 8001462:	2800      	cmp	r0, #0
 8001464:	d0f1      	beq.n	800144a <main+0x2b2>
			HAL_GPIO_TogglePin(LEDPIN_GPIO_Port, LEDPIN_Pin);
 8001466:	4630      	mov	r0, r6
 8001468:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800146c:	f7ff f80d 	bl	800048a <HAL_GPIO_TogglePin>
			read(&nrf_data, count); // Читаем данные в массив nrf_data и указываем сколько байт читать
 8001470:	a818      	add	r0, sp, #96	; 0x60
 8001472:	2120      	movs	r1, #32
 8001474:	f000 f9f6 	bl	8001864 <read>
			snprintf(str, 64, "data[0]=%d data[1]=%d data[2]=%d data[3]%d\n", nrf_data[0], nrf_data[1], nrf_data[2],nrf_data[3]);
 8001478:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
 800147c:	462a      	mov	r2, r5
 800147e:	9302      	str	r3, [sp, #8]
 8001480:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 8001484:	2140      	movs	r1, #64	; 0x40
 8001486:	9301      	str	r3, [sp, #4]
 8001488:	f9bd 3062 	ldrsh.w	r3, [sp, #98]	; 0x62
 800148c:	a808      	add	r0, sp, #32
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
 8001494:	f000 fcc6 	bl	8001e24 <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 1000);
 8001498:	a808      	add	r0, sp, #32
 800149a:	f7fe fe59 	bl	8000150 <strlen>
 800149e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a2:	b282      	uxth	r2, r0
 80014a4:	a908      	add	r1, sp, #32
 80014a6:	4620      	mov	r0, r4
 80014a8:	f7ff fdf0 	bl	800108c <HAL_UART_Transmit>
  {
 80014ac:	e7cd      	b.n	800144a <main+0x2b2>
 80014ae:	bf00      	nop
 80014b0:	e8f0f0e2 	.word	0xe8f0f0e2
 80014b4:	000000e8 	.word	0x000000e8
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40011000 	.word	0x40011000
 80014c0:	40010800 	.word	0x40010800
 80014c4:	10210000 	.word	0x10210000
 80014c8:	200000e4 	.word	0x200000e4
 80014cc:	40013000 	.word	0x40013000
 80014d0:	200000a4 	.word	0x200000a4
 80014d4:	000f4240 	.word	0x000f4240
 80014d8:	40013800 	.word	0x40013800
 80014dc:	080026d1 	.word	0x080026d1
 80014e0:	080026d4 	.word	0x080026d4
 80014e4:	080026cd 	.word	0x080026cd
 80014e8:	080026e3 	.word	0x080026e3
 80014ec:	080026ed 	.word	0x080026ed
 80014f0:	08002701 	.word	0x08002701
 80014f4:	08002716 	.word	0x08002716
 80014f8:	0800274b 	.word	0x0800274b
 80014fc:	08002766 	.word	0x08002766
 8001500:	0800277c 	.word	0x0800277c
 8001504:	080027a2 	.word	0x080027a2
 8001508:	080027b6 	.word	0x080027b6
 800150c:	080027cd 	.word	0x080027cd
 8001510:	080027f9 	.word	0x080027f9
  else if(status == 0x01)
 8001514:	2c01      	cmp	r4, #1
 8001516:	d104      	bne.n	8001522 <main+0x38a>
	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_PA_LOW\n", strlen("RF24_PA_LOW\n"), 1000);
 8001518:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151c:	4632      	mov	r2, r6
 800151e:	4913      	ldr	r1, [pc, #76]	; (800156c <main+0x3d4>)
 8001520:	e729      	b.n	8001376 <main+0x1de>
  else if(status == 0x02)
 8001522:	2c02      	cmp	r4, #2
 8001524:	d104      	bne.n	8001530 <main+0x398>
	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_PA_HIGH\n", strlen("RF24_PA_HIGH\n"), 1000);
 8001526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800152a:	220d      	movs	r2, #13
 800152c:	4910      	ldr	r1, [pc, #64]	; (8001570 <main+0x3d8>)
 800152e:	e722      	b.n	8001376 <main+0x1de>
  else if(status == 0x03)
 8001530:	2c03      	cmp	r4, #3
 8001532:	f47f af23 	bne.w	800137c <main+0x1e4>
	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_PA_MAX\n", strlen("RF24_PA_MAX\n"), 1000);
 8001536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153a:	4632      	mov	r2, r6
 800153c:	490d      	ldr	r1, [pc, #52]	; (8001574 <main+0x3dc>)
 800153e:	e71a      	b.n	8001376 <main+0x1de>
  else if(status == 0x01)
 8001540:	2c01      	cmp	r4, #1
	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_2MBPS\n", strlen("RF24_2MBPS\n"), 1000);
 8001542:	f04f 020b 	mov.w	r2, #11
 8001546:	bf0c      	ite	eq
 8001548:	490b      	ldreq	r1, [pc, #44]	; (8001578 <main+0x3e0>)
	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_1MBPS\n", strlen("RF24_1MBPS\n"), 1000);
 800154a:	490c      	ldrne	r1, [pc, #48]	; (800157c <main+0x3e4>)
 800154c:	e743      	b.n	80013d6 <main+0x23e>
  else if(status == 0x01)
 800154e:	2c01      	cmp	r4, #1
 8001550:	d104      	bne.n	800155c <main+0x3c4>
	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_CRC_8\n", strlen("RF24_CRC_8\n"), 1000);
 8001552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001556:	220b      	movs	r2, #11
 8001558:	4909      	ldr	r1, [pc, #36]	; (8001580 <main+0x3e8>)
 800155a:	e76b      	b.n	8001434 <main+0x29c>
  else if(status == 0x02)
 800155c:	2c02      	cmp	r4, #2
 800155e:	f47f af6c 	bne.w	800143a <main+0x2a2>
	  HAL_UART_Transmit(&huart1, (uint8_t*)"RF24_CRC_16\n", strlen("RF24_CRC_16\n"), 1000);
 8001562:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001566:	220c      	movs	r2, #12
 8001568:	4906      	ldr	r1, [pc, #24]	; (8001584 <main+0x3ec>)
 800156a:	e763      	b.n	8001434 <main+0x29c>
 800156c:	08002723 	.word	0x08002723
 8001570:	08002730 	.word	0x08002730
 8001574:	0800273e 	.word	0x0800273e
 8001578:	0800278a 	.word	0x0800278a
 800157c:	08002796 	.word	0x08002796
 8001580:	080027e0 	.word	0x080027e0
 8001584:	080027ec 	.word	0x080027ec

08001588 <DWT_Init>:
uint8_t txDelay = 0;


void DWT_Init(void)
{
    SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8001588:	4a05      	ldr	r2, [pc, #20]	; (80015a0 <DWT_Init+0x18>)
 800158a:	6813      	ldr	r3, [r2, #0]
 800158c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001590:	6013      	str	r3, [r2, #0]
	DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8001592:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <DWT_Init+0x1c>)
 8001594:	6813      	ldr	r3, [r2, #0]
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	6013      	str	r3, [r2, #0]
}
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	e000edfc 	.word	0xe000edfc
 80015a4:	e0001000 	.word	0xe0001000

080015a8 <delay_us>:

void delay_us(uint32_t us) // DelayMicro
{
    uint32_t us_count_tic =  us * (SystemCoreClock / 1000000);
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <delay_us+0x1c>)
 80015aa:	4a07      	ldr	r2, [pc, #28]	; (80015c8 <delay_us+0x20>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	fbb3 f3f2 	udiv	r3, r3, r2
    DWT->CYCCNT = 0U; // обнуляем счётчик
 80015b2:	2200      	movs	r2, #0
    uint32_t us_count_tic =  us * (SystemCoreClock / 1000000);
 80015b4:	4358      	muls	r0, r3
    DWT->CYCCNT = 0U; // обнуляем счётчик
 80015b6:	4b05      	ldr	r3, [pc, #20]	; (80015cc <delay_us+0x24>)
 80015b8:	605a      	str	r2, [r3, #4]
    while(DWT->CYCCNT < us_count_tic);
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	4282      	cmp	r2, r0
 80015be:	d3fc      	bcc.n	80015ba <delay_us+0x12>
}
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	20000008 	.word	0x20000008
 80015c8:	000f4240 	.word	0x000f4240
 80015cc:	e0001000 	.word	0xe0001000

080015d0 <csn>:

void csn(uint8_t level)
{
 80015d0:	b508      	push	{r3, lr}
 80015d2:	4602      	mov	r2, r0
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, level);
 80015d4:	2110      	movs	r1, #16
 80015d6:	4804      	ldr	r0, [pc, #16]	; (80015e8 <csn+0x18>)
 80015d8:	f7fe ff52 	bl	8000480 <HAL_GPIO_WritePin>
	delay_us(5);
}
 80015dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	delay_us(5);
 80015e0:	2005      	movs	r0, #5
 80015e2:	f7ff bfe1 	b.w	80015a8 <delay_us>
 80015e6:	bf00      	nop
 80015e8:	40010800 	.word	0x40010800

080015ec <ce>:

void ce(uint8_t level)
{
 80015ec:	4602      	mov	r2, r0
	HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, level);
 80015ee:	2108      	movs	r1, #8
 80015f0:	4801      	ldr	r0, [pc, #4]	; (80015f8 <ce+0xc>)
 80015f2:	f7fe bf45 	b.w	8000480 <HAL_GPIO_WritePin>
 80015f6:	bf00      	nop
 80015f8:	40010800 	.word	0x40010800

080015fc <read_register>:
}

uint8_t read_register(uint8_t reg)
{
 80015fc:	b530      	push	{r4, r5, lr}
	uint8_t addr = R_REGISTER | (REGISTER_MASK & reg);
 80015fe:	f000 001f 	and.w	r0, r0, #31
{
 8001602:	b085      	sub	sp, #20
	uint8_t dt = 0;

	csn(LOW);
	HAL_SPI_TransmitReceive(&hspi1, &addr, &dt, 1, 1000);
 8001604:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	uint8_t addr = R_REGISTER | (REGISTER_MASK & reg);
 8001608:	f88d 000e 	strb.w	r0, [sp, #14]
	uint8_t dt = 0;
 800160c:	2000      	movs	r0, #0
	HAL_SPI_TransmitReceive(&hspi1, &addr, &dt, 1, 1000);
 800160e:	4c0e      	ldr	r4, [pc, #56]	; (8001648 <read_register+0x4c>)
	uint8_t dt = 0;
 8001610:	f88d 000f 	strb.w	r0, [sp, #15]
	csn(LOW);
 8001614:	f7ff ffdc 	bl	80015d0 <csn>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &dt, 1, 1000);
 8001618:	f10d 020f 	add.w	r2, sp, #15
 800161c:	f10d 010e 	add.w	r1, sp, #14
 8001620:	2301      	movs	r3, #1
 8001622:	4620      	mov	r0, r4
 8001624:	9500      	str	r5, [sp, #0]
 8001626:	f7ff fb19 	bl	8000c5c <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)0xff, &dt, 1, 1000);
 800162a:	2301      	movs	r3, #1
 800162c:	21ff      	movs	r1, #255	; 0xff
 800162e:	f10d 020f 	add.w	r2, sp, #15
 8001632:	4620      	mov	r0, r4
 8001634:	9500      	str	r5, [sp, #0]
 8001636:	f7ff fb11 	bl	8000c5c <HAL_SPI_TransmitReceive>
	csn(HIGH);
 800163a:	2001      	movs	r0, #1
 800163c:	f7ff ffc8 	bl	80015d0 <csn>
	return dt;
}
 8001640:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8001644:	b005      	add	sp, #20
 8001646:	bd30      	pop	{r4, r5, pc}
 8001648:	200000e4 	.word	0x200000e4

0800164c <write_registerMy>:

uint8_t write_registerMy(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 800164c:	4603      	mov	r3, r0
 800164e:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t status = 0;
 8001650:	2000      	movs	r0, #0
	uint8_t addr = W_REGISTER | (REGISTER_MASK & reg);

	csn(LOW);
	HAL_SPI_TransmitReceive(&hspi1, &addr, &status, 1, 100);
 8001652:	2764      	movs	r7, #100	; 0x64
{
 8001654:	460c      	mov	r4, r1
 8001656:	4615      	mov	r5, r2
	HAL_SPI_TransmitReceive(&hspi1, &addr, &status, 1, 100);
 8001658:	4e10      	ldr	r6, [pc, #64]	; (800169c <write_registerMy+0x50>)
	uint8_t addr = W_REGISTER | (REGISTER_MASK & reg);
 800165a:	f003 031f 	and.w	r3, r3, #31
{
 800165e:	b085      	sub	sp, #20
	uint8_t addr = W_REGISTER | (REGISTER_MASK & reg);
 8001660:	f043 0320 	orr.w	r3, r3, #32
	uint8_t status = 0;
 8001664:	f88d 000e 	strb.w	r0, [sp, #14]
	uint8_t addr = W_REGISTER | (REGISTER_MASK & reg);
 8001668:	f88d 300f 	strb.w	r3, [sp, #15]
	csn(LOW);
 800166c:	f7ff ffb0 	bl	80015d0 <csn>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &status, 1, 100);
 8001670:	f10d 020e 	add.w	r2, sp, #14
 8001674:	f10d 010f 	add.w	r1, sp, #15
 8001678:	2301      	movs	r3, #1
 800167a:	4630      	mov	r0, r6
 800167c:	9700      	str	r7, [sp, #0]
 800167e:	f7ff faed 	bl	8000c5c <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)buf, len, 100);
 8001682:	463b      	mov	r3, r7
 8001684:	462a      	mov	r2, r5
 8001686:	4621      	mov	r1, r4
 8001688:	4630      	mov	r0, r6
 800168a:	f7ff fa42 	bl	8000b12 <HAL_SPI_Transmit>
	csn(HIGH);
 800168e:	2001      	movs	r0, #1
 8001690:	f7ff ff9e 	bl	80015d0 <csn>
	return status;
}
 8001694:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8001698:	b005      	add	sp, #20
 800169a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800169c:	200000e4 	.word	0x200000e4

080016a0 <write_register>:

uint8_t write_register(uint8_t reg, uint8_t value)
{
 80016a0:	4603      	mov	r3, r0
	uint8_t status = 0;
 80016a2:	2000      	movs	r0, #0
{
 80016a4:	b510      	push	{r4, lr}
	uint8_t addr = W_REGISTER | (REGISTER_MASK & reg);
 80016a6:	f003 031f 	and.w	r3, r3, #31
{
 80016aa:	b086      	sub	sp, #24
	uint8_t addr = W_REGISTER | (REGISTER_MASK & reg);
 80016ac:	f043 0320 	orr.w	r3, r3, #32
{
 80016b0:	f88d 100f 	strb.w	r1, [sp, #15]
	uint8_t status = 0;
 80016b4:	f88d 0016 	strb.w	r0, [sp, #22]
	uint8_t addr = W_REGISTER | (REGISTER_MASK & reg);
 80016b8:	f88d 3017 	strb.w	r3, [sp, #23]
	csn(LOW);
 80016bc:	f7ff ff88 	bl	80015d0 <csn>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &status, 1, 100);
 80016c0:	2364      	movs	r3, #100	; 0x64
 80016c2:	4c0c      	ldr	r4, [pc, #48]	; (80016f4 <write_register+0x54>)
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	f10d 0216 	add.w	r2, sp, #22
 80016ca:	f10d 0117 	add.w	r1, sp, #23
 80016ce:	2301      	movs	r3, #1
 80016d0:	4620      	mov	r0, r4
 80016d2:	f7ff fac3 	bl	8000c5c <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 80016d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016da:	2201      	movs	r2, #1
 80016dc:	f10d 010f 	add.w	r1, sp, #15
 80016e0:	4620      	mov	r0, r4
 80016e2:	f7ff fa16 	bl	8000b12 <HAL_SPI_Transmit>
	csn(HIGH);
 80016e6:	2001      	movs	r0, #1
 80016e8:	f7ff ff72 	bl	80015d0 <csn>
	return status;
}
 80016ec:	f89d 0016 	ldrb.w	r0, [sp, #22]
 80016f0:	b006      	add	sp, #24
 80016f2:	bd10      	pop	{r4, pc}
 80016f4:	200000e4 	.word	0x200000e4

080016f8 <read_payload>:
	csn(HIGH);
	return status;
}

uint8_t read_payload(void* buf, uint8_t data_len)
{
 80016f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t status = 0;
	uint8_t* current = (uint8_t*)buf;

	if(data_len > payload_size)
 80016fa:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <read_payload+0x70>)
{
 80016fc:	4606      	mov	r6, r0
	if(data_len > payload_size)
 80016fe:	781c      	ldrb	r4, [r3, #0]
	{
		data_len = payload_size;
	}

	uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
 8001700:	4b1a      	ldr	r3, [pc, #104]	; (800176c <read_payload+0x74>)
 8001702:	42a1      	cmp	r1, r4
 8001704:	bf28      	it	cs
 8001706:	4621      	movcs	r1, r4
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	460d      	mov	r5, r1
 800170c:	bb03      	cbnz	r3, 8001750 <read_payload+0x58>
 800170e:	1a64      	subs	r4, r4, r1
 8001710:	b2e4      	uxtb	r4, r4

	uint8_t addr = R_RX_PAYLOAD;
 8001712:	2361      	movs	r3, #97	; 0x61
	csn(LOW);
 8001714:	2000      	movs	r0, #0
	uint8_t addr = R_RX_PAYLOAD;
 8001716:	f88d 3006 	strb.w	r3, [sp, #6]
	csn(LOW);
 800171a:	f7ff ff59 	bl	80015d0 <csn>
	HAL_SPI_Transmit(&hspi1, &addr, 1, 100);
 800171e:	2364      	movs	r3, #100	; 0x64
 8001720:	2201      	movs	r2, #1
 8001722:	f10d 0106 	add.w	r1, sp, #6
 8001726:	4812      	ldr	r0, [pc, #72]	; (8001770 <read_payload+0x78>)
 8001728:	f7ff f9f3 	bl	8000b12 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*)current, data_len, 100);
 800172c:	462a      	mov	r2, r5
 800172e:	4631      	mov	r1, r6
 8001730:	2364      	movs	r3, #100	; 0x64
 8001732:	480f      	ldr	r0, [pc, #60]	; (8001770 <read_payload+0x78>)
 8001734:	f7ff fb81 	bl	8000e3a <HAL_SPI_Receive>

	while(blank_len--)
	{
		uint8_t empt = 0;
 8001738:	2500      	movs	r5, #0
		HAL_SPI_Receive(&hspi1, &empt, 1, 100);
 800173a:	4e0d      	ldr	r6, [pc, #52]	; (8001770 <read_payload+0x78>)
	while(blank_len--)
 800173c:	3c01      	subs	r4, #1
 800173e:	b2e4      	uxtb	r4, r4
 8001740:	2cff      	cmp	r4, #255	; 0xff
 8001742:	d107      	bne.n	8001754 <read_payload+0x5c>
	}

	csn(HIGH);
 8001744:	2001      	movs	r0, #1
 8001746:	f7ff ff43 	bl	80015d0 <csn>
	return status;
}
 800174a:	2000      	movs	r0, #0
 800174c:	b002      	add	sp, #8
 800174e:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
 8001750:	2400      	movs	r4, #0
 8001752:	e7de      	b.n	8001712 <read_payload+0x1a>
		HAL_SPI_Receive(&hspi1, &empt, 1, 100);
 8001754:	2364      	movs	r3, #100	; 0x64
 8001756:	2201      	movs	r2, #1
 8001758:	4630      	mov	r0, r6
 800175a:	f10d 0107 	add.w	r1, sp, #7
		uint8_t empt = 0;
 800175e:	f88d 5007 	strb.w	r5, [sp, #7]
		HAL_SPI_Receive(&hspi1, &empt, 1, 100);
 8001762:	f7ff fb6a 	bl	8000e3a <HAL_SPI_Receive>
 8001766:	e7e9      	b.n	800173c <read_payload+0x44>
 8001768:	2000008d 	.word	0x2000008d
 800176c:	2000013c 	.word	0x2000013c
 8001770:	200000e4 	.word	0x200000e4

08001774 <spiTrans>:
{
	return spiTrans(FLUSH_TX);
}

uint8_t spiTrans(uint8_t cmd)
{
 8001774:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8001776:	f88d 000f 	strb.w	r0, [sp, #15]
	uint8_t status = 0;
 800177a:	2000      	movs	r0, #0
 800177c:	f88d 0017 	strb.w	r0, [sp, #23]
	csn(LOW);
 8001780:	f7ff ff26 	bl	80015d0 <csn>
	HAL_SPI_TransmitReceive(&hspi1, &cmd, &status, 1, 1000);
 8001784:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001788:	f10d 0217 	add.w	r2, sp, #23
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	f10d 010f 	add.w	r1, sp, #15
 8001792:	2301      	movs	r3, #1
 8001794:	4805      	ldr	r0, [pc, #20]	; (80017ac <spiTrans+0x38>)
 8001796:	f7ff fa61 	bl	8000c5c <HAL_SPI_TransmitReceive>
	csn(HIGH);
 800179a:	2001      	movs	r0, #1
 800179c:	f7ff ff18 	bl	80015d0 <csn>
	return status;
}
 80017a0:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80017a4:	b007      	add	sp, #28
 80017a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80017aa:	bf00      	nop
 80017ac:	200000e4 	.word	0x200000e4

080017b0 <flush_rx>:
	return spiTrans(FLUSH_RX);
 80017b0:	20e2      	movs	r0, #226	; 0xe2
 80017b2:	f7ff bfdf 	b.w	8001774 <spiTrans>

080017b6 <flush_tx>:
	return spiTrans(FLUSH_TX);
 80017b6:	20e1      	movs	r0, #225	; 0xe1
 80017b8:	f7ff bfdc 	b.w	8001774 <spiTrans>

080017bc <get_status>:

uint8_t get_status(void)
{
	return spiTrans(NOP);
 80017bc:	20ff      	movs	r0, #255	; 0xff
 80017be:	f7ff bfd9 	b.w	8001774 <spiTrans>

080017c2 <setChannel>:
}

void setChannel(uint8_t channel)
{
 80017c2:	4601      	mov	r1, r0
	write_register(RF_CH, channel);
 80017c4:	2005      	movs	r0, #5
 80017c6:	f7ff bf6b 	b.w	80016a0 <write_register>

080017ca <getChannel>:
}

uint8_t getChannel()
{
	return read_register(RF_CH);
 80017ca:	2005      	movs	r0, #5
 80017cc:	f7ff bf16 	b.w	80015fc <read_register>

080017d0 <getPayloadSize>:
}

uint8_t getPayloadSize(void)
{
	return payload_size;
}
 80017d0:	4b01      	ldr	r3, [pc, #4]	; (80017d8 <getPayloadSize+0x8>)
 80017d2:	7818      	ldrb	r0, [r3, #0]
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	2000008d 	.word	0x2000008d

080017dc <isChipConnected>:
	write_register(NRF_CONFIG, (read_register(NRF_CONFIG)) & ~(1 << PRIM_RX));
	return (setup != 0 && setup != 0xff);
}

bool isChipConnected()
{
 80017dc:	b508      	push	{r3, lr}
	uint8_t setup = read_register(SETUP_AW);
 80017de:	2003      	movs	r0, #3
 80017e0:	f7ff ff0c 	bl	80015fc <read_register>

	if(setup >= 1 && setup <= 3)
 80017e4:	3801      	subs	r0, #1
 80017e6:	b2c0      	uxtb	r0, r0
	{
		return true;
	}

	return false;
}
 80017e8:	2802      	cmp	r0, #2
 80017ea:	bf8c      	ite	hi
 80017ec:	2000      	movhi	r0, #0
 80017ee:	2001      	movls	r0, #1
 80017f0:	bd08      	pop	{r3, pc}

080017f2 <powerUp>:
}

//Power up now. Radio will not power down unless instructed by MCU for config changes etc.
void powerUp(void)
{
	uint8_t cfg = read_register(NRF_CONFIG);
 80017f2:	2000      	movs	r0, #0
{
 80017f4:	b508      	push	{r3, lr}
	uint8_t cfg = read_register(NRF_CONFIG);
 80017f6:	f7ff ff01 	bl	80015fc <read_register>
 80017fa:	4601      	mov	r1, r0
	// if not powered up then power up and wait for the radio to initialize
	if(!(cfg & (1 << PWR_UP)))
 80017fc:	f010 0002 	ands.w	r0, r0, #2
 8001800:	d109      	bne.n	8001816 <powerUp+0x24>
	{
		write_register(NRF_CONFIG, cfg | (1 << PWR_UP));
 8001802:	f041 0102 	orr.w	r1, r1, #2
 8001806:	b2c9      	uxtb	r1, r1
 8001808:	f7ff ff4a 	bl	80016a0 <write_register>
		HAL_Delay(5);
	}
}
 800180c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_Delay(5);
 8001810:	2005      	movs	r0, #5
 8001812:	f7fe bced 	b.w	80001f0 <HAL_Delay>
}
 8001816:	bd08      	pop	{r3, pc}

08001818 <maskIRQ>:
		ce(HIGH);
	}
}

void maskIRQ(bool tx, bool fail, bool rx)
{
 8001818:	b570      	push	{r4, r5, r6, lr}
 800181a:	4614      	mov	r4, r2
 800181c:	4606      	mov	r6, r0
	uint8_t config = read_register(NRF_CONFIG);
 800181e:	2000      	movs	r0, #0
{
 8001820:	460d      	mov	r5, r1
	uint8_t config = read_register(NRF_CONFIG);
 8001822:	f7ff feeb 	bl	80015fc <read_register>
	config &= ~(1 << MASK_MAX_RT | 1 << MASK_TX_DS | 1 << MASK_RX_DR); //clear the interrupt flags
	config |= fail << MASK_MAX_RT | tx << MASK_TX_DS | rx << MASK_RX_DR; // set the specified interrupt flags
 8001826:	01a4      	lsls	r4, r4, #6
 8001828:	ea44 1446 	orr.w	r4, r4, r6, lsl #5
 800182c:	ea44 1105 	orr.w	r1, r4, r5, lsl #4
	config &= ~(1 << MASK_MAX_RT | 1 << MASK_TX_DS | 1 << MASK_RX_DR); //clear the interrupt flags
 8001830:	f020 0070 	bic.w	r0, r0, #112	; 0x70
	config |= fail << MASK_MAX_RT | tx << MASK_TX_DS | rx << MASK_RX_DR; // set the specified interrupt flags
 8001834:	4301      	orrs	r1, r0
	write_register(NRF_CONFIG, config);
 8001836:	b2c9      	uxtb	r1, r1
 8001838:	2000      	movs	r0, #0
}
 800183a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	write_register(NRF_CONFIG, config);
 800183e:	f7ff bf2f 	b.w	80016a0 <write_register>

08001842 <available>:
{
	return available(NULL);
}

bool available(uint8_t* pipe_num)
{
 8001842:	b510      	push	{r4, lr}
 8001844:	4604      	mov	r4, r0
	if(!(read_register(FIFO_STATUS) & (1 << RX_EMPTY)))
 8001846:	2017      	movs	r0, #23
 8001848:	f7ff fed8 	bl	80015fc <read_register>
 800184c:	07c3      	lsls	r3, r0, #31
 800184e:	d407      	bmi.n	8001860 <available+0x1e>
	{
		if(pipe_num) // If the caller wants the pipe number, include that
 8001850:	b124      	cbz	r4, 800185c <available+0x1a>
		{
			uint8_t status = get_status();
 8001852:	f7ff ffb3 	bl	80017bc <get_status>
			*pipe_num = (status >> RX_P_NO) & 0x07;
 8001856:	f3c0 0042 	ubfx	r0, r0, #1, #3
 800185a:	7020      	strb	r0, [r4, #0]
 800185c:	2001      	movs	r0, #1
 800185e:	e000      	b.n	8001862 <available+0x20>
		}

		return 1;
	}

	return 0;
 8001860:	2000      	movs	r0, #0
}
 8001862:	bd10      	pop	{r4, pc}

08001864 <read>:

void read(void* buf, uint8_t len)
{
 8001864:	b508      	push	{r3, lr}
	read_payload(buf, len);
 8001866:	f7ff ff47 	bl	80016f8 <read_payload>
	write_register(NRF_STATUS, (1 << RX_DR) | (1 << MAX_RT) | (1 << TX_DS));
}
 800186a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	write_register(NRF_STATUS, (1 << RX_DR) | (1 << MAX_RT) | (1 << TX_DS));
 800186e:	2170      	movs	r1, #112	; 0x70
 8001870:	2007      	movs	r0, #7
 8001872:	f7ff bf15 	b.w	80016a0 <write_register>
	...

08001878 <openReadingPipe>:

static const uint8_t child_payload_size[] = {RX_PW_P0, RX_PW_P1, RX_PW_P2, RX_PW_P3, RX_PW_P4, RX_PW_P5};


void openReadingPipe(uint8_t child, uint64_t address)
{
 8001878:	b513      	push	{r0, r1, r4, lr}
	if(child == 0)
 800187a:	4604      	mov	r4, r0
{
 800187c:	e9cd 2300 	strd	r2, r3, [sp]
	if(child == 0)
 8001880:	bb00      	cbnz	r0, 80018c4 <openReadingPipe+0x4c>
	{
		memcpy(pipe0_reading_address, &address, addr_width);
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <openReadingPipe+0x60>)
 8001884:	4669      	mov	r1, sp
 8001886:	781a      	ldrb	r2, [r3, #0]
 8001888:	4814      	ldr	r0, [pc, #80]	; (80018dc <openReadingPipe+0x64>)
 800188a:	f000 fab5 	bl	8001df8 <memcpy>

	if(child <= 6)
	{
		// For pipes 2-5, only write the LSB
		if(child < 2)
		  write_registerMy(child_pipe[child], (const uint8_t*)&address, addr_width);
 800188e:	4669      	mov	r1, sp
 8001890:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <openReadingPipe+0x60>)
 8001892:	781a      	ldrb	r2, [r3, #0]
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <openReadingPipe+0x68>)
 8001896:	5d18      	ldrb	r0, [r3, r4]
		else
		  write_registerMy(child_pipe[child], (const uint8_t*)&address, 1);
 8001898:	f7ff fed8 	bl	800164c <write_registerMy>

		write_register(child_payload_size[child], payload_size);
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <openReadingPipe+0x6c>)
 800189e:	7819      	ldrb	r1, [r3, #0]
 80018a0:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <openReadingPipe+0x70>)
 80018a2:	5d18      	ldrb	r0, [r3, r4]
 80018a4:	f7ff fefc 	bl	80016a0 <write_register>
		write_register(EN_RXADDR, read_register(EN_RXADDR) | (1 << child_pipe_enable[child]));
 80018a8:	2002      	movs	r0, #2
 80018aa:	f7ff fea7 	bl	80015fc <read_register>
 80018ae:	2101      	movs	r1, #1
 80018b0:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <openReadingPipe+0x74>)
 80018b2:	5d1b      	ldrb	r3, [r3, r4]
 80018b4:	4099      	lsls	r1, r3
 80018b6:	4301      	orrs	r1, r0
 80018b8:	b2c9      	uxtb	r1, r1
 80018ba:	2002      	movs	r0, #2
 80018bc:	f7ff fef0 	bl	80016a0 <write_register>
	}
}
 80018c0:	b002      	add	sp, #8
 80018c2:	bd10      	pop	{r4, pc}
	if(child <= 6)
 80018c4:	2806      	cmp	r0, #6
 80018c6:	d8fb      	bhi.n	80018c0 <openReadingPipe+0x48>
		if(child < 2)
 80018c8:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <openReadingPipe+0x68>)
 80018ca:	2c01      	cmp	r4, #1
 80018cc:	5c18      	ldrb	r0, [r3, r0]
 80018ce:	d0de      	beq.n	800188e <openReadingPipe+0x16>
		  write_registerMy(child_pipe[child], (const uint8_t*)&address, 1);
 80018d0:	2201      	movs	r2, #1
 80018d2:	4669      	mov	r1, sp
 80018d4:	e7e0      	b.n	8001898 <openReadingPipe+0x20>
 80018d6:	bf00      	nop
 80018d8:	2000008c 	.word	0x2000008c
 80018dc:	2000008e 	.word	0x2000008e
 80018e0:	0800282b 	.word	0x0800282b
 80018e4:	2000008d 	.word	0x2000008d
 80018e8:	08002825 	.word	0x08002825
 80018ec:	08002831 	.word	0x08002831

080018f0 <setAddressWidth>:

void setAddressWidth(uint8_t a_width)
{
	if(a_width -= 2)
 80018f0:	1e81      	subs	r1, r0, #2
 80018f2:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
{
 80018f6:	b538      	push	{r3, r4, r5, lr}
 80018f8:	4d08      	ldr	r5, [pc, #32]	; (800191c <setAddressWidth+0x2c>)
	if(a_width -= 2)
 80018fa:	d008      	beq.n	800190e <setAddressWidth+0x1e>
	{
		write_register(SETUP_AW, a_width%4);
 80018fc:	f001 0403 	and.w	r4, r1, #3
 8001900:	4621      	mov	r1, r4
 8001902:	2003      	movs	r0, #3
		addr_width = (a_width%4) + 2;
 8001904:	3402      	adds	r4, #2
		write_register(SETUP_AW, a_width%4);
 8001906:	f7ff fecb 	bl	80016a0 <write_register>
		addr_width = (a_width%4) + 2;
 800190a:	702c      	strb	r4, [r5, #0]
	else
	{
        write_register(SETUP_AW, 0);
        addr_width = 2;
    }
}
 800190c:	bd38      	pop	{r3, r4, r5, pc}
        write_register(SETUP_AW, 0);
 800190e:	2003      	movs	r0, #3
 8001910:	f7ff fec6 	bl	80016a0 <write_register>
        addr_width = 2;
 8001914:	2302      	movs	r3, #2
 8001916:	702b      	strb	r3, [r5, #0]
}
 8001918:	e7f8      	b.n	800190c <setAddressWidth+0x1c>
 800191a:	bf00      	nop
 800191c:	2000008c 	.word	0x2000008c

08001920 <closeReadingPipe>:

void closeReadingPipe(uint8_t pipe)
{
 8001920:	b510      	push	{r4, lr}
 8001922:	4604      	mov	r4, r0
	write_register(EN_RXADDR, read_register(EN_RXADDR) & ~(1 << child_pipe_enable[pipe]));
 8001924:	2002      	movs	r0, #2
 8001926:	f7ff fe69 	bl	80015fc <read_register>
 800192a:	2101      	movs	r1, #1
 800192c:	4b05      	ldr	r3, [pc, #20]	; (8001944 <closeReadingPipe+0x24>)
 800192e:	5d1b      	ldrb	r3, [r3, r4]
}
 8001930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	write_register(EN_RXADDR, read_register(EN_RXADDR) & ~(1 << child_pipe_enable[pipe]));
 8001934:	4099      	lsls	r1, r3
 8001936:	ea20 0101 	bic.w	r1, r0, r1
 800193a:	b2c9      	uxtb	r1, r1
 800193c:	2002      	movs	r0, #2
 800193e:	f7ff beaf 	b.w	80016a0 <write_register>
 8001942:	bf00      	nop
 8001944:	08002831 	.word	0x08002831

08001948 <startListening>:
{
 8001948:	b508      	push	{r3, lr}
	powerUp();
 800194a:	f7ff ff52 	bl	80017f2 <powerUp>
	write_register(NRF_CONFIG, read_register(NRF_CONFIG) | (1 << PRIM_RX));
 800194e:	2000      	movs	r0, #0
 8001950:	f7ff fe54 	bl	80015fc <read_register>
 8001954:	f040 0101 	orr.w	r1, r0, #1
 8001958:	b2c9      	uxtb	r1, r1
 800195a:	2000      	movs	r0, #0
 800195c:	f7ff fea0 	bl	80016a0 <write_register>
	write_register(NRF_STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
 8001960:	2170      	movs	r1, #112	; 0x70
 8001962:	2007      	movs	r0, #7
 8001964:	f7ff fe9c 	bl	80016a0 <write_register>
	ce(HIGH);
 8001968:	2001      	movs	r0, #1
 800196a:	f7ff fe3f 	bl	80015ec <ce>
	if(pipe0_reading_address[0] > 0)
 800196e:	490a      	ldr	r1, [pc, #40]	; (8001998 <startListening+0x50>)
 8001970:	7808      	ldrb	r0, [r1, #0]
 8001972:	b168      	cbz	r0, 8001990 <startListening+0x48>
		write_registerMy(RX_ADDR_P0, pipe0_reading_address, addr_width);
 8001974:	4b09      	ldr	r3, [pc, #36]	; (800199c <startListening+0x54>)
 8001976:	200a      	movs	r0, #10
 8001978:	781a      	ldrb	r2, [r3, #0]
 800197a:	f7ff fe67 	bl	800164c <write_registerMy>
	if(read_register(FEATURE) & (1 << EN_ACK_PAY))
 800197e:	201d      	movs	r0, #29
 8001980:	f7ff fe3c 	bl	80015fc <read_register>
 8001984:	0783      	lsls	r3, r0, #30
 8001986:	d506      	bpl.n	8001996 <startListening+0x4e>
}
 8001988:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		flush_tx();
 800198c:	f7ff bf13 	b.w	80017b6 <flush_tx>
		closeReadingPipe(0);
 8001990:	f7ff ffc6 	bl	8001920 <closeReadingPipe>
 8001994:	e7f3      	b.n	800197e <startListening+0x36>
}
 8001996:	bd08      	pop	{r3, pc}
 8001998:	2000008e 	.word	0x2000008e
 800199c:	2000008c 	.word	0x2000008c

080019a0 <toggle_features>:

void toggle_features(void)
{
	uint8_t addr = ACTIVATE;
 80019a0:	2350      	movs	r3, #80	; 0x50
{
 80019a2:	b513      	push	{r0, r1, r4, lr}
	csn(LOW);
	HAL_SPI_Transmit(&hspi1, &addr, 1, 1000);
 80019a4:	4c0c      	ldr	r4, [pc, #48]	; (80019d8 <toggle_features+0x38>)
	csn(LOW);
 80019a6:	2000      	movs	r0, #0
	uint8_t addr = ACTIVATE;
 80019a8:	f88d 3007 	strb.w	r3, [sp, #7]
	csn(LOW);
 80019ac:	f7ff fe10 	bl	80015d0 <csn>
	HAL_SPI_Transmit(&hspi1, &addr, 1, 1000);
 80019b0:	f10d 0107 	add.w	r1, sp, #7
 80019b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019b8:	2201      	movs	r2, #1
 80019ba:	4620      	mov	r0, r4
 80019bc:	f7ff f8a9 	bl	8000b12 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)0x73, 1, 1000);
 80019c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c4:	2201      	movs	r2, #1
 80019c6:	2173      	movs	r1, #115	; 0x73
 80019c8:	4620      	mov	r0, r4
 80019ca:	f7ff f8a2 	bl	8000b12 <HAL_SPI_Transmit>
	csn(HIGH);
 80019ce:	2001      	movs	r0, #1
 80019d0:	f7ff fdfe 	bl	80015d0 <csn>
}
 80019d4:	b002      	add	sp, #8
 80019d6:	bd10      	pop	{r4, pc}
 80019d8:	200000e4 	.word	0x200000e4

080019dc <setAutoAck>:
	return p_variant;
}

void setAutoAck(bool enable)
{
	if(enable)
 80019dc:	4601      	mov	r1, r0
 80019de:	b100      	cbz	r0, 80019e2 <setAutoAck+0x6>
		write_register(EN_AA, 0x3F);
 80019e0:	213f      	movs	r1, #63	; 0x3f
	else
		write_register(EN_AA, 0);
 80019e2:	2001      	movs	r0, #1
 80019e4:	f7ff be5c 	b.w	80016a0 <write_register>

080019e8 <setPALevel>:
		write_register(EN_AA, en_aa);
	}
}

void setPALevel(uint8_t level)
{
 80019e8:	b510      	push	{r4, lr}
 80019ea:	4604      	mov	r4, r0
  uint8_t setup = read_register(RF_SETUP) & 0xF8;
 80019ec:	2006      	movs	r0, #6
 80019ee:	f7ff fe05 	bl	80015fc <read_register>

  if(level > 3) // If invalid level, go to max PA
 80019f2:	2c03      	cmp	r4, #3
  {
	  level = (RF24_PA_MAX << 1) + 1;		// +1 to support the SI24R1 chip extra bit
 80019f4:	bf8e      	itee	hi
 80019f6:	2407      	movhi	r4, #7
  }
  else
  {
	  level = (level << 1) + 1;	 		// Else set level as requested
 80019f8:	0064      	lslls	r4, r4, #1
 80019fa:	3401      	addls	r4, #1
  uint8_t setup = read_register(RF_SETUP) & 0xF8;
 80019fc:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
	  level = (level << 1) + 1;	 		// Else set level as requested
 8001a00:	bf98      	it	ls
 8001a02:	f004 04ff 	andls.w	r4, r4, #255	; 0xff
  }

  write_register(RF_SETUP, setup |= level);	// Write it to the chip
 8001a06:	4321      	orrs	r1, r4
 8001a08:	2006      	movs	r0, #6
}
 8001a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  write_register(RF_SETUP, setup |= level);	// Write it to the chip
 8001a0e:	f7ff be47 	b.w	80016a0 <write_register>

08001a12 <getPALevel>:

uint8_t getPALevel(void)
{
 8001a12:	b508      	push	{r3, lr}
	return (read_register(RF_SETUP) & ((1 << RF_PWR_LOW) | (1 << RF_PWR_HIGH))) >> 1;
 8001a14:	2006      	movs	r0, #6
 8001a16:	f7ff fdf1 	bl	80015fc <read_register>
}
 8001a1a:	f3c0 0041 	ubfx	r0, r0, #1, #2
 8001a1e:	bd08      	pop	{r3, pc}

08001a20 <setDataRate>:

bool setDataRate(rf24_datarate_e speed)
{
 8001a20:	b538      	push	{r3, r4, r5, lr}
 8001a22:	4605      	mov	r5, r0
	bool result = false;
	uint8_t setup = read_register(RF_SETUP);
 8001a24:	2006      	movs	r0, #6
 8001a26:	f7ff fde9 	bl	80015fc <read_register>
	setup &= ~((1 << RF_DR_LOW) | (1 << RF_DR_HIGH));
	txDelay = 85;

	if(speed == RF24_250KBPS)
 8001a2a:	2d02      	cmp	r5, #2
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <setDataRate+0x40>)
	setup &= ~((1 << RF_DR_LOW) | (1 << RF_DR_HIGH));
 8001a2e:	f000 04d7 	and.w	r4, r0, #215	; 0xd7
	if(speed == RF24_250KBPS)
 8001a32:	d10e      	bne.n	8001a52 <setDataRate+0x32>
	{
		setup |= (1 << RF_DR_LOW);
		txDelay = 155;
 8001a34:	229b      	movs	r2, #155	; 0x9b
		setup |= (1 << RF_DR_LOW);
 8001a36:	f044 0420 	orr.w	r4, r4, #32
			setup |= (1 << RF_DR_HIGH);
			txDelay = 65;
		}
	}

	write_register(RF_SETUP, setup);
 8001a3a:	4621      	mov	r1, r4
 8001a3c:	2006      	movs	r0, #6
			txDelay = 65;
 8001a3e:	701a      	strb	r2, [r3, #0]
	write_register(RF_SETUP, setup);
 8001a40:	f7ff fe2e 	bl	80016a0 <write_register>
	uint8_t ggg = read_register(RF_SETUP);
 8001a44:	2006      	movs	r0, #6
 8001a46:	f7ff fdd9 	bl	80015fc <read_register>
	{
		result = true;
	}

	return result;
}
 8001a4a:	1a23      	subs	r3, r4, r0
 8001a4c:	4258      	negs	r0, r3
 8001a4e:	4158      	adcs	r0, r3
 8001a50:	bd38      	pop	{r3, r4, r5, pc}
		if(speed == RF24_2MBPS)
 8001a52:	2d01      	cmp	r5, #1
	txDelay = 85;
 8001a54:	bf12      	itee	ne
 8001a56:	2255      	movne	r2, #85	; 0x55
			txDelay = 65;
 8001a58:	2241      	moveq	r2, #65	; 0x41
			setup |= (1 << RF_DR_HIGH);
 8001a5a:	f044 0408 	orreq.w	r4, r4, #8
			txDelay = 65;
 8001a5e:	e7ec      	b.n	8001a3a <setDataRate+0x1a>
 8001a60:	20000093 	.word	0x20000093

08001a64 <NRF_Init>:
	payload_size = 32;
 8001a64:	2220      	movs	r2, #32
{
 8001a66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	addr_width = 5;
 8001a68:	2705      	movs	r7, #5
	p_variant = false;
 8001a6a:	2400      	movs	r4, #0
	payload_size = 32;
 8001a6c:	4b29      	ldr	r3, [pc, #164]	; (8001b14 <NRF_Init+0xb0>)
	p_variant = false;
 8001a6e:	4e2a      	ldr	r6, [pc, #168]	; (8001b18 <NRF_Init+0xb4>)
	payload_size = 32;
 8001a70:	701a      	strb	r2, [r3, #0]
	addr_width = 5;
 8001a72:	4b2a      	ldr	r3, [pc, #168]	; (8001b1c <NRF_Init+0xb8>)
	dynamic_payloads_enabled = false;
 8001a74:	4d2a      	ldr	r5, [pc, #168]	; (8001b20 <NRF_Init+0xbc>)
	addr_width = 5;
 8001a76:	701f      	strb	r7, [r3, #0]
	pipe0_reading_address[0] = 0;
 8001a78:	4b2a      	ldr	r3, [pc, #168]	; (8001b24 <NRF_Init+0xc0>)
	ce(LOW);
 8001a7a:	4620      	mov	r0, r4
	pipe0_reading_address[0] = 0;
 8001a7c:	701c      	strb	r4, [r3, #0]
	p_variant = false;
 8001a7e:	7034      	strb	r4, [r6, #0]
	dynamic_payloads_enabled = false;
 8001a80:	702c      	strb	r4, [r5, #0]
	ce(LOW);
 8001a82:	f7ff fdb3 	bl	80015ec <ce>
	csn(HIGH);
 8001a86:	2001      	movs	r0, #1
 8001a88:	f7ff fda2 	bl	80015d0 <csn>
	HAL_Delay(5);
 8001a8c:	4638      	mov	r0, r7
 8001a8e:	f7fe fbaf 	bl	80001f0 <HAL_Delay>
	write_register(NRF_CONFIG, 0x0C); // Reset NRF_CONFIG and enable 16-bit CRC.
 8001a92:	210c      	movs	r1, #12
 8001a94:	4620      	mov	r0, r4
 8001a96:	f7ff fe03 	bl	80016a0 <write_register>
	write_register(NRF_CONFIG, disable);
}

void setRetries(uint8_t delay, uint8_t count)
{
	write_register(SETUP_RETR, (delay&0xf)<<ARD | (count&0xf)<<ARC);
 8001a9a:	215f      	movs	r1, #95	; 0x5f
 8001a9c:	2004      	movs	r0, #4
 8001a9e:	f7ff fdff 	bl	80016a0 <write_register>
	setPALevel(RF24_PA_MAX); // Reset value is MAX
 8001aa2:	2003      	movs	r0, #3
 8001aa4:	f7ff ffa0 	bl	80019e8 <setPALevel>
	if(setDataRate(RF24_250KBPS)) // check for connected module and if this is a p nRF24l01 variant
 8001aa8:	2002      	movs	r0, #2
 8001aaa:	f7ff ffb9 	bl	8001a20 <setDataRate>
 8001aae:	b108      	cbz	r0, 8001ab4 <NRF_Init+0x50>
		p_variant = true;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	7033      	strb	r3, [r6, #0]
	setup = read_register(RF_SETUP);
 8001ab4:	2006      	movs	r0, #6
 8001ab6:	f7ff fda1 	bl	80015fc <read_register>
	dynamic_payloads_enabled = false;
 8001aba:	2600      	movs	r6, #0
	setup = read_register(RF_SETUP);
 8001abc:	4604      	mov	r4, r0
	setDataRate(RF24_1MBPS); // Then set the data rate to the slowest (and most reliable) speed supported by all hardware.
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f7ff ffae 	bl	8001a20 <setDataRate>
	toggle_features();
 8001ac4:	f7ff ff6c 	bl	80019a0 <toggle_features>
	write_register(FEATURE, 0);
 8001ac8:	2100      	movs	r1, #0
 8001aca:	201d      	movs	r0, #29
 8001acc:	f7ff fde8 	bl	80016a0 <write_register>
	write_register(DYNPD, 0);
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	201c      	movs	r0, #28
 8001ad4:	f7ff fde4 	bl	80016a0 <write_register>
	write_register(NRF_STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
 8001ad8:	2170      	movs	r1, #112	; 0x70
 8001ada:	2007      	movs	r0, #7
	dynamic_payloads_enabled = false;
 8001adc:	702e      	strb	r6, [r5, #0]
	write_register(NRF_STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
 8001ade:	f7ff fddf 	bl	80016a0 <write_register>
	setChannel(76);
 8001ae2:	204c      	movs	r0, #76	; 0x4c
 8001ae4:	f7ff fe6d 	bl	80017c2 <setChannel>
	flush_rx();
 8001ae8:	f7ff fe62 	bl	80017b0 <flush_rx>
	flush_tx();
 8001aec:	f7ff fe63 	bl	80017b6 <flush_tx>
	powerUp(); //Power up by default when begin() is called
 8001af0:	f7ff fe7f 	bl	80017f2 <powerUp>
	write_register(NRF_CONFIG, (read_register(NRF_CONFIG)) & ~(1 << PRIM_RX));
 8001af4:	4630      	mov	r0, r6
 8001af6:	f7ff fd81 	bl	80015fc <read_register>
 8001afa:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 8001afe:	4630      	mov	r0, r6
 8001b00:	f7ff fdce 	bl	80016a0 <write_register>
	return (setup != 0 && setup != 0xff);
 8001b04:	1e60      	subs	r0, r4, #1
 8001b06:	b2c0      	uxtb	r0, r0
}
 8001b08:	28fd      	cmp	r0, #253	; 0xfd
 8001b0a:	bf8c      	ite	hi
 8001b0c:	2000      	movhi	r0, #0
 8001b0e:	2001      	movls	r0, #1
 8001b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b12:	bf00      	nop
 8001b14:	2000008d 	.word	0x2000008d
 8001b18:	2000013d 	.word	0x2000013d
 8001b1c:	2000008c 	.word	0x2000008c
 8001b20:	2000013c 	.word	0x2000013c
 8001b24:	2000008e 	.word	0x2000008e

08001b28 <getDataRate>:
	uint8_t dr = read_register(RF_SETUP) & ((1 << RF_DR_LOW) | (1 << RF_DR_HIGH));
 8001b28:	2006      	movs	r0, #6
{
 8001b2a:	b508      	push	{r3, lr}
	uint8_t dr = read_register(RF_SETUP) & ((1 << RF_DR_LOW) | (1 << RF_DR_HIGH));
 8001b2c:	f7ff fd66 	bl	80015fc <read_register>
 8001b30:	f000 0028 	and.w	r0, r0, #40	; 0x28
	if(dr == (1 << RF_DR_LOW))
 8001b34:	2820      	cmp	r0, #32
 8001b36:	d004      	beq.n	8001b42 <getDataRate+0x1a>
		result = RF24_250KBPS;
 8001b38:	f1a0 0308 	sub.w	r3, r0, #8
 8001b3c:	4258      	negs	r0, r3
 8001b3e:	4158      	adcs	r0, r3
}
 8001b40:	bd08      	pop	{r3, pc}
		result = RF24_250KBPS;
 8001b42:	2002      	movs	r0, #2
 8001b44:	e7fc      	b.n	8001b40 <getDataRate+0x18>

08001b46 <setCRCLength>:
{
 8001b46:	b510      	push	{r4, lr}
 8001b48:	4604      	mov	r4, r0
	uint8_t config = read_register(NRF_CONFIG) & ~((1 << CRCO) | (1 << EN_CRC));
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	f7ff fd56 	bl	80015fc <read_register>
 8001b50:	f000 01f3 	and.w	r1, r0, #243	; 0xf3
	if(length == RF24_CRC_DISABLED)
 8001b54:	b12c      	cbz	r4, 8001b62 <setCRCLength+0x1c>
	else if(length == RF24_CRC_8)
 8001b56:	2c01      	cmp	r4, #1
		config |= (1 << EN_CRC);
 8001b58:	bf0c      	ite	eq
 8001b5a:	f041 0108 	orreq.w	r1, r1, #8
		config |= (1 << CRCO);
 8001b5e:	f041 010c 	orrne.w	r1, r1, #12
	write_register(NRF_CONFIG, config);
 8001b62:	2000      	movs	r0, #0
}
 8001b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	write_register(NRF_CONFIG, config);
 8001b68:	f7ff bd9a 	b.w	80016a0 <write_register>

08001b6c <getCRCLength>:
{
 8001b6c:	b510      	push	{r4, lr}
	uint8_t config = read_register(NRF_CONFIG) & ((1 << CRCO) | (1 << EN_CRC));
 8001b6e:	2000      	movs	r0, #0
 8001b70:	f7ff fd44 	bl	80015fc <read_register>
 8001b74:	4604      	mov	r4, r0
	uint8_t AA = read_register(EN_AA);
 8001b76:	2001      	movs	r0, #1
 8001b78:	f7ff fd40 	bl	80015fc <read_register>
	if(config & (1 << EN_CRC) || AA)
 8001b7c:	f004 0308 	and.w	r3, r4, #8
 8001b80:	4303      	orrs	r3, r0
 8001b82:	f013 00ff 	ands.w	r0, r3, #255	; 0xff
 8001b86:	d004      	beq.n	8001b92 <getCRCLength+0x26>
		  result = RF24_CRC_8;
 8001b88:	f014 0f04 	tst.w	r4, #4
 8001b8c:	bf14      	ite	ne
 8001b8e:	2002      	movne	r0, #2
 8001b90:	2001      	moveq	r0, #1
}
 8001b92:	bd10      	pop	{r4, pc}

08001b94 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b94:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <HAL_MspInit+0x3c>)
{
 8001b96:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b98:	699a      	ldr	r2, [r3, #24]
 8001b9a:	f042 0201 	orr.w	r2, r2, #1
 8001b9e:	619a      	str	r2, [r3, #24]
 8001ba0:	699a      	ldr	r2, [r3, #24]
 8001ba2:	f002 0201 	and.w	r2, r2, #1
 8001ba6:	9200      	str	r2, [sp, #0]
 8001ba8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001baa:	69da      	ldr	r2, [r3, #28]
 8001bac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001bb0:	61da      	str	r2, [r3, #28]
 8001bb2:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001bb4:	4a07      	ldr	r2, [pc, #28]	; (8001bd4 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bba:	9301      	str	r3, [sp, #4]
 8001bbc:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001bbe:	6853      	ldr	r3, [r2, #4]
 8001bc0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bc4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bc8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bca:	b002      	add	sp, #8
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40010000 	.word	0x40010000

08001bd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bd8:	b510      	push	{r4, lr}
 8001bda:	4604      	mov	r4, r0
 8001bdc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bde:	2210      	movs	r2, #16
 8001be0:	2100      	movs	r1, #0
 8001be2:	a802      	add	r0, sp, #8
 8001be4:	f000 f916 	bl	8001e14 <memset>
  if(hspi->Instance==SPI1)
 8001be8:	6822      	ldr	r2, [r4, #0]
 8001bea:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <HAL_SPI_MspInit+0x6c>)
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d126      	bne.n	8001c3e <HAL_SPI_MspInit+0x66>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bf0:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8001bf4:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf6:	4814      	ldr	r0, [pc, #80]	; (8001c48 <HAL_SPI_MspInit+0x70>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bf8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001bfc:	619a      	str	r2, [r3, #24]
 8001bfe:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c00:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c02:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001c06:	9200      	str	r2, [sp, #0]
 8001c08:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0a:	699a      	ldr	r2, [r3, #24]
 8001c0c:	f042 0204 	orr.w	r2, r2, #4
 8001c10:	619a      	str	r2, [r3, #24]
 8001c12:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c14:	22a0      	movs	r2, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	9301      	str	r3, [sp, #4]
 8001c1c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c24:	2303      	movs	r3, #3
 8001c26:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c28:	f7fe fb4e 	bl	80002c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c2c:	2140      	movs	r1, #64	; 0x40
 8001c2e:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c30:	4805      	ldr	r0, [pc, #20]	; (8001c48 <HAL_SPI_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c32:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c36:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3a:	f7fe fb45 	bl	80002c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c3e:	b006      	add	sp, #24
 8001c40:	bd10      	pop	{r4, pc}
 8001c42:	bf00      	nop
 8001c44:	40013000 	.word	0x40013000
 8001c48:	40010800 	.word	0x40010800

08001c4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c4c:	b510      	push	{r4, lr}
 8001c4e:	4604      	mov	r4, r0
 8001c50:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c52:	2210      	movs	r2, #16
 8001c54:	2100      	movs	r1, #0
 8001c56:	a802      	add	r0, sp, #8
 8001c58:	f000 f8dc 	bl	8001e14 <memset>
  if(huart->Instance==USART1)
 8001c5c:	6822      	ldr	r2, [r4, #0]
 8001c5e:	4b17      	ldr	r3, [pc, #92]	; (8001cbc <HAL_UART_MspInit+0x70>)
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d128      	bne.n	8001cb6 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c64:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001c68:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6a:	4815      	ldr	r0, [pc, #84]	; (8001cc0 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c70:	619a      	str	r2, [r3, #24]
 8001c72:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c74:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c76:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001c7a:	9200      	str	r2, [sp, #0]
 8001c7c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7e:	699a      	ldr	r2, [r3, #24]
 8001c80:	f042 0204 	orr.w	r2, r2, #4
 8001c84:	619a      	str	r2, [r3, #24]
 8001c86:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c88:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	9301      	str	r3, [sp, #4]
 8001c92:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c94:	2302      	movs	r3, #2
 8001c96:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9e:	f7fe fb13 	bl	80002c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ca6:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca8:	4805      	ldr	r0, [pc, #20]	; (8001cc0 <HAL_UART_MspInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001caa:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cae:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb2:	f7fe fb09 	bl	80002c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001cb6:	b006      	add	sp, #24
 8001cb8:	bd10      	pop	{r4, pc}
 8001cba:	bf00      	nop
 8001cbc:	40013800 	.word	0x40013800
 8001cc0:	40010800 	.word	0x40010800

08001cc4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001cc4:	4770      	bx	lr

08001cc6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cc6:	e7fe      	b.n	8001cc6 <HardFault_Handler>

08001cc8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc8:	e7fe      	b.n	8001cc8 <MemManage_Handler>

08001cca <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cca:	e7fe      	b.n	8001cca <BusFault_Handler>

08001ccc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <UsageFault_Handler>

08001cce <SVC_Handler>:
 8001cce:	4770      	bx	lr

08001cd0 <DebugMon_Handler>:
 8001cd0:	4770      	bx	lr

08001cd2 <PendSV_Handler>:
 8001cd2:	4770      	bx	lr

08001cd4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cd4:	f7fe ba7a 	b.w	80001cc <HAL_IncTick>

08001cd8 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001cd8:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001cda:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <_sbrk+0x2c>)
{
 8001cdc:	4602      	mov	r2, r0
	if (heap_end == 0)
 8001cde:	6819      	ldr	r1, [r3, #0]
 8001ce0:	b909      	cbnz	r1, 8001ce6 <_sbrk+0xe>
		heap_end = &end;
 8001ce2:	4909      	ldr	r1, [pc, #36]	; (8001d08 <_sbrk+0x30>)
 8001ce4:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8001ce6:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8001ce8:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8001cea:	4402      	add	r2, r0
 8001cec:	428a      	cmp	r2, r1
 8001cee:	d906      	bls.n	8001cfe <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001cf0:	f000 f858 	bl	8001da4 <__errno>
 8001cf4:	230c      	movs	r3, #12
 8001cf6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001cf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8001cfc:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8001cfe:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8001d00:	e7fc      	b.n	8001cfc <_sbrk+0x24>
 8001d02:	bf00      	nop
 8001d04:	20000094 	.word	0x20000094
 8001d08:	20000150 	.word	0x20000150

08001d0c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001d0c:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <SystemInit+0x40>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	f042 0201 	orr.w	r2, r2, #1
 8001d14:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001d16:	6859      	ldr	r1, [r3, #4]
 8001d18:	4a0d      	ldr	r2, [pc, #52]	; (8001d50 <SystemInit+0x44>)
 8001d1a:	400a      	ands	r2, r1
 8001d1c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001d24:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d28:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d30:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001d38:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001d3a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001d3e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001d40:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d44:	4b03      	ldr	r3, [pc, #12]	; (8001d54 <SystemInit+0x48>)
 8001d46:	609a      	str	r2, [r3, #8]
#endif 
}
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	f8ff0000 	.word	0xf8ff0000
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001d58:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001d5a:	e003      	b.n	8001d64 <LoopCopyDataInit>

08001d5c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001d5e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001d60:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001d62:	3104      	adds	r1, #4

08001d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001d64:	480a      	ldr	r0, [pc, #40]	; (8001d90 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001d66:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001d68:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001d6a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001d6c:	d3f6      	bcc.n	8001d5c <CopyDataInit>
  ldr r2, =_sbss
 8001d6e:	4a0a      	ldr	r2, [pc, #40]	; (8001d98 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001d70:	e002      	b.n	8001d78 <LoopFillZerobss>

08001d72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001d72:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001d74:	f842 3b04 	str.w	r3, [r2], #4

08001d78 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001d78:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001d7a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001d7c:	d3f9      	bcc.n	8001d72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d7e:	f7ff ffc5 	bl	8001d0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d82:	f000 f815 	bl	8001db0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d86:	f7ff fa07 	bl	8001198 <main>
  bx lr
 8001d8a:	4770      	bx	lr
  ldr r3, =_sidata
 8001d8c:	0800288c 	.word	0x0800288c
  ldr r0, =_sdata
 8001d90:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001d94:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8001d98:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8001d9c:	20000150 	.word	0x20000150

08001da0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001da0:	e7fe      	b.n	8001da0 <ADC1_2_IRQHandler>
	...

08001da4 <__errno>:
 8001da4:	4b01      	ldr	r3, [pc, #4]	; (8001dac <__errno+0x8>)
 8001da6:	6818      	ldr	r0, [r3, #0]
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	2000000c 	.word	0x2000000c

08001db0 <__libc_init_array>:
 8001db0:	b570      	push	{r4, r5, r6, lr}
 8001db2:	2600      	movs	r6, #0
 8001db4:	4d0c      	ldr	r5, [pc, #48]	; (8001de8 <__libc_init_array+0x38>)
 8001db6:	4c0d      	ldr	r4, [pc, #52]	; (8001dec <__libc_init_array+0x3c>)
 8001db8:	1b64      	subs	r4, r4, r5
 8001dba:	10a4      	asrs	r4, r4, #2
 8001dbc:	42a6      	cmp	r6, r4
 8001dbe:	d109      	bne.n	8001dd4 <__libc_init_array+0x24>
 8001dc0:	f000 fc70 	bl	80026a4 <_init>
 8001dc4:	2600      	movs	r6, #0
 8001dc6:	4d0a      	ldr	r5, [pc, #40]	; (8001df0 <__libc_init_array+0x40>)
 8001dc8:	4c0a      	ldr	r4, [pc, #40]	; (8001df4 <__libc_init_array+0x44>)
 8001dca:	1b64      	subs	r4, r4, r5
 8001dcc:	10a4      	asrs	r4, r4, #2
 8001dce:	42a6      	cmp	r6, r4
 8001dd0:	d105      	bne.n	8001dde <__libc_init_array+0x2e>
 8001dd2:	bd70      	pop	{r4, r5, r6, pc}
 8001dd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dd8:	4798      	blx	r3
 8001dda:	3601      	adds	r6, #1
 8001ddc:	e7ee      	b.n	8001dbc <__libc_init_array+0xc>
 8001dde:	f855 3b04 	ldr.w	r3, [r5], #4
 8001de2:	4798      	blx	r3
 8001de4:	3601      	adds	r6, #1
 8001de6:	e7f2      	b.n	8001dce <__libc_init_array+0x1e>
 8001de8:	08002884 	.word	0x08002884
 8001dec:	08002884 	.word	0x08002884
 8001df0:	08002884 	.word	0x08002884
 8001df4:	08002888 	.word	0x08002888

08001df8 <memcpy>:
 8001df8:	440a      	add	r2, r1
 8001dfa:	4291      	cmp	r1, r2
 8001dfc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001e00:	d100      	bne.n	8001e04 <memcpy+0xc>
 8001e02:	4770      	bx	lr
 8001e04:	b510      	push	{r4, lr}
 8001e06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001e0a:	4291      	cmp	r1, r2
 8001e0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001e10:	d1f9      	bne.n	8001e06 <memcpy+0xe>
 8001e12:	bd10      	pop	{r4, pc}

08001e14 <memset>:
 8001e14:	4603      	mov	r3, r0
 8001e16:	4402      	add	r2, r0
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d100      	bne.n	8001e1e <memset+0xa>
 8001e1c:	4770      	bx	lr
 8001e1e:	f803 1b01 	strb.w	r1, [r3], #1
 8001e22:	e7f9      	b.n	8001e18 <memset+0x4>

08001e24 <sniprintf>:
 8001e24:	b40c      	push	{r2, r3}
 8001e26:	b530      	push	{r4, r5, lr}
 8001e28:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <sniprintf+0x64>)
 8001e2a:	1e0c      	subs	r4, r1, #0
 8001e2c:	681d      	ldr	r5, [r3, #0]
 8001e2e:	b09d      	sub	sp, #116	; 0x74
 8001e30:	da08      	bge.n	8001e44 <sniprintf+0x20>
 8001e32:	238b      	movs	r3, #139	; 0x8b
 8001e34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e38:	602b      	str	r3, [r5, #0]
 8001e3a:	b01d      	add	sp, #116	; 0x74
 8001e3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001e40:	b002      	add	sp, #8
 8001e42:	4770      	bx	lr
 8001e44:	f44f 7302 	mov.w	r3, #520	; 0x208
 8001e48:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001e4c:	bf0c      	ite	eq
 8001e4e:	4623      	moveq	r3, r4
 8001e50:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8001e54:	9304      	str	r3, [sp, #16]
 8001e56:	9307      	str	r3, [sp, #28]
 8001e58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e5c:	9002      	str	r0, [sp, #8]
 8001e5e:	9006      	str	r0, [sp, #24]
 8001e60:	f8ad 3016 	strh.w	r3, [sp, #22]
 8001e64:	4628      	mov	r0, r5
 8001e66:	ab21      	add	r3, sp, #132	; 0x84
 8001e68:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8001e6a:	a902      	add	r1, sp, #8
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	f000 f869 	bl	8001f44 <_svfiprintf_r>
 8001e72:	1c43      	adds	r3, r0, #1
 8001e74:	bfbc      	itt	lt
 8001e76:	238b      	movlt	r3, #139	; 0x8b
 8001e78:	602b      	strlt	r3, [r5, #0]
 8001e7a:	2c00      	cmp	r4, #0
 8001e7c:	d0dd      	beq.n	8001e3a <sniprintf+0x16>
 8001e7e:	2200      	movs	r2, #0
 8001e80:	9b02      	ldr	r3, [sp, #8]
 8001e82:	701a      	strb	r2, [r3, #0]
 8001e84:	e7d9      	b.n	8001e3a <sniprintf+0x16>
 8001e86:	bf00      	nop
 8001e88:	2000000c 	.word	0x2000000c

08001e8c <__ssputs_r>:
 8001e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e90:	688e      	ldr	r6, [r1, #8]
 8001e92:	4682      	mov	sl, r0
 8001e94:	429e      	cmp	r6, r3
 8001e96:	460c      	mov	r4, r1
 8001e98:	4690      	mov	r8, r2
 8001e9a:	461f      	mov	r7, r3
 8001e9c:	d838      	bhi.n	8001f10 <__ssputs_r+0x84>
 8001e9e:	898a      	ldrh	r2, [r1, #12]
 8001ea0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001ea4:	d032      	beq.n	8001f0c <__ssputs_r+0x80>
 8001ea6:	6825      	ldr	r5, [r4, #0]
 8001ea8:	6909      	ldr	r1, [r1, #16]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	eba5 0901 	sub.w	r9, r5, r1
 8001eb0:	6965      	ldr	r5, [r4, #20]
 8001eb2:	444b      	add	r3, r9
 8001eb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001eb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001ebc:	106d      	asrs	r5, r5, #1
 8001ebe:	429d      	cmp	r5, r3
 8001ec0:	bf38      	it	cc
 8001ec2:	461d      	movcc	r5, r3
 8001ec4:	0553      	lsls	r3, r2, #21
 8001ec6:	d531      	bpl.n	8001f2c <__ssputs_r+0xa0>
 8001ec8:	4629      	mov	r1, r5
 8001eca:	f000 fb45 	bl	8002558 <_malloc_r>
 8001ece:	4606      	mov	r6, r0
 8001ed0:	b950      	cbnz	r0, 8001ee8 <__ssputs_r+0x5c>
 8001ed2:	230c      	movs	r3, #12
 8001ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ed8:	f8ca 3000 	str.w	r3, [sl]
 8001edc:	89a3      	ldrh	r3, [r4, #12]
 8001ede:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ee2:	81a3      	strh	r3, [r4, #12]
 8001ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ee8:	464a      	mov	r2, r9
 8001eea:	6921      	ldr	r1, [r4, #16]
 8001eec:	f7ff ff84 	bl	8001df8 <memcpy>
 8001ef0:	89a3      	ldrh	r3, [r4, #12]
 8001ef2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001efa:	81a3      	strh	r3, [r4, #12]
 8001efc:	6126      	str	r6, [r4, #16]
 8001efe:	444e      	add	r6, r9
 8001f00:	6026      	str	r6, [r4, #0]
 8001f02:	463e      	mov	r6, r7
 8001f04:	6165      	str	r5, [r4, #20]
 8001f06:	eba5 0509 	sub.w	r5, r5, r9
 8001f0a:	60a5      	str	r5, [r4, #8]
 8001f0c:	42be      	cmp	r6, r7
 8001f0e:	d900      	bls.n	8001f12 <__ssputs_r+0x86>
 8001f10:	463e      	mov	r6, r7
 8001f12:	4632      	mov	r2, r6
 8001f14:	4641      	mov	r1, r8
 8001f16:	6820      	ldr	r0, [r4, #0]
 8001f18:	f000 fab8 	bl	800248c <memmove>
 8001f1c:	68a3      	ldr	r3, [r4, #8]
 8001f1e:	6822      	ldr	r2, [r4, #0]
 8001f20:	1b9b      	subs	r3, r3, r6
 8001f22:	4432      	add	r2, r6
 8001f24:	2000      	movs	r0, #0
 8001f26:	60a3      	str	r3, [r4, #8]
 8001f28:	6022      	str	r2, [r4, #0]
 8001f2a:	e7db      	b.n	8001ee4 <__ssputs_r+0x58>
 8001f2c:	462a      	mov	r2, r5
 8001f2e:	f000 fb6d 	bl	800260c <_realloc_r>
 8001f32:	4606      	mov	r6, r0
 8001f34:	2800      	cmp	r0, #0
 8001f36:	d1e1      	bne.n	8001efc <__ssputs_r+0x70>
 8001f38:	4650      	mov	r0, sl
 8001f3a:	6921      	ldr	r1, [r4, #16]
 8001f3c:	f000 fac0 	bl	80024c0 <_free_r>
 8001f40:	e7c7      	b.n	8001ed2 <__ssputs_r+0x46>
	...

08001f44 <_svfiprintf_r>:
 8001f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f48:	4698      	mov	r8, r3
 8001f4a:	898b      	ldrh	r3, [r1, #12]
 8001f4c:	4607      	mov	r7, r0
 8001f4e:	061b      	lsls	r3, r3, #24
 8001f50:	460d      	mov	r5, r1
 8001f52:	4614      	mov	r4, r2
 8001f54:	b09d      	sub	sp, #116	; 0x74
 8001f56:	d50e      	bpl.n	8001f76 <_svfiprintf_r+0x32>
 8001f58:	690b      	ldr	r3, [r1, #16]
 8001f5a:	b963      	cbnz	r3, 8001f76 <_svfiprintf_r+0x32>
 8001f5c:	2140      	movs	r1, #64	; 0x40
 8001f5e:	f000 fafb 	bl	8002558 <_malloc_r>
 8001f62:	6028      	str	r0, [r5, #0]
 8001f64:	6128      	str	r0, [r5, #16]
 8001f66:	b920      	cbnz	r0, 8001f72 <_svfiprintf_r+0x2e>
 8001f68:	230c      	movs	r3, #12
 8001f6a:	603b      	str	r3, [r7, #0]
 8001f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f70:	e0d1      	b.n	8002116 <_svfiprintf_r+0x1d2>
 8001f72:	2340      	movs	r3, #64	; 0x40
 8001f74:	616b      	str	r3, [r5, #20]
 8001f76:	2300      	movs	r3, #0
 8001f78:	9309      	str	r3, [sp, #36]	; 0x24
 8001f7a:	2320      	movs	r3, #32
 8001f7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001f80:	2330      	movs	r3, #48	; 0x30
 8001f82:	f04f 0901 	mov.w	r9, #1
 8001f86:	f8cd 800c 	str.w	r8, [sp, #12]
 8001f8a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002130 <_svfiprintf_r+0x1ec>
 8001f8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001f92:	4623      	mov	r3, r4
 8001f94:	469a      	mov	sl, r3
 8001f96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001f9a:	b10a      	cbz	r2, 8001fa0 <_svfiprintf_r+0x5c>
 8001f9c:	2a25      	cmp	r2, #37	; 0x25
 8001f9e:	d1f9      	bne.n	8001f94 <_svfiprintf_r+0x50>
 8001fa0:	ebba 0b04 	subs.w	fp, sl, r4
 8001fa4:	d00b      	beq.n	8001fbe <_svfiprintf_r+0x7a>
 8001fa6:	465b      	mov	r3, fp
 8001fa8:	4622      	mov	r2, r4
 8001faa:	4629      	mov	r1, r5
 8001fac:	4638      	mov	r0, r7
 8001fae:	f7ff ff6d 	bl	8001e8c <__ssputs_r>
 8001fb2:	3001      	adds	r0, #1
 8001fb4:	f000 80aa 	beq.w	800210c <_svfiprintf_r+0x1c8>
 8001fb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001fba:	445a      	add	r2, fp
 8001fbc:	9209      	str	r2, [sp, #36]	; 0x24
 8001fbe:	f89a 3000 	ldrb.w	r3, [sl]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 80a2 	beq.w	800210c <_svfiprintf_r+0x1c8>
 8001fc8:	2300      	movs	r3, #0
 8001fca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001fd2:	f10a 0a01 	add.w	sl, sl, #1
 8001fd6:	9304      	str	r3, [sp, #16]
 8001fd8:	9307      	str	r3, [sp, #28]
 8001fda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001fde:	931a      	str	r3, [sp, #104]	; 0x68
 8001fe0:	4654      	mov	r4, sl
 8001fe2:	2205      	movs	r2, #5
 8001fe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001fe8:	4851      	ldr	r0, [pc, #324]	; (8002130 <_svfiprintf_r+0x1ec>)
 8001fea:	f000 fa41 	bl	8002470 <memchr>
 8001fee:	9a04      	ldr	r2, [sp, #16]
 8001ff0:	b9d8      	cbnz	r0, 800202a <_svfiprintf_r+0xe6>
 8001ff2:	06d0      	lsls	r0, r2, #27
 8001ff4:	bf44      	itt	mi
 8001ff6:	2320      	movmi	r3, #32
 8001ff8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001ffc:	0711      	lsls	r1, r2, #28
 8001ffe:	bf44      	itt	mi
 8002000:	232b      	movmi	r3, #43	; 0x2b
 8002002:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002006:	f89a 3000 	ldrb.w	r3, [sl]
 800200a:	2b2a      	cmp	r3, #42	; 0x2a
 800200c:	d015      	beq.n	800203a <_svfiprintf_r+0xf6>
 800200e:	4654      	mov	r4, sl
 8002010:	2000      	movs	r0, #0
 8002012:	f04f 0c0a 	mov.w	ip, #10
 8002016:	9a07      	ldr	r2, [sp, #28]
 8002018:	4621      	mov	r1, r4
 800201a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800201e:	3b30      	subs	r3, #48	; 0x30
 8002020:	2b09      	cmp	r3, #9
 8002022:	d94e      	bls.n	80020c2 <_svfiprintf_r+0x17e>
 8002024:	b1b0      	cbz	r0, 8002054 <_svfiprintf_r+0x110>
 8002026:	9207      	str	r2, [sp, #28]
 8002028:	e014      	b.n	8002054 <_svfiprintf_r+0x110>
 800202a:	eba0 0308 	sub.w	r3, r0, r8
 800202e:	fa09 f303 	lsl.w	r3, r9, r3
 8002032:	4313      	orrs	r3, r2
 8002034:	46a2      	mov	sl, r4
 8002036:	9304      	str	r3, [sp, #16]
 8002038:	e7d2      	b.n	8001fe0 <_svfiprintf_r+0x9c>
 800203a:	9b03      	ldr	r3, [sp, #12]
 800203c:	1d19      	adds	r1, r3, #4
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	9103      	str	r1, [sp, #12]
 8002042:	2b00      	cmp	r3, #0
 8002044:	bfbb      	ittet	lt
 8002046:	425b      	neglt	r3, r3
 8002048:	f042 0202 	orrlt.w	r2, r2, #2
 800204c:	9307      	strge	r3, [sp, #28]
 800204e:	9307      	strlt	r3, [sp, #28]
 8002050:	bfb8      	it	lt
 8002052:	9204      	strlt	r2, [sp, #16]
 8002054:	7823      	ldrb	r3, [r4, #0]
 8002056:	2b2e      	cmp	r3, #46	; 0x2e
 8002058:	d10c      	bne.n	8002074 <_svfiprintf_r+0x130>
 800205a:	7863      	ldrb	r3, [r4, #1]
 800205c:	2b2a      	cmp	r3, #42	; 0x2a
 800205e:	d135      	bne.n	80020cc <_svfiprintf_r+0x188>
 8002060:	9b03      	ldr	r3, [sp, #12]
 8002062:	3402      	adds	r4, #2
 8002064:	1d1a      	adds	r2, r3, #4
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	9203      	str	r2, [sp, #12]
 800206a:	2b00      	cmp	r3, #0
 800206c:	bfb8      	it	lt
 800206e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002072:	9305      	str	r3, [sp, #20]
 8002074:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002140 <_svfiprintf_r+0x1fc>
 8002078:	2203      	movs	r2, #3
 800207a:	4650      	mov	r0, sl
 800207c:	7821      	ldrb	r1, [r4, #0]
 800207e:	f000 f9f7 	bl	8002470 <memchr>
 8002082:	b140      	cbz	r0, 8002096 <_svfiprintf_r+0x152>
 8002084:	2340      	movs	r3, #64	; 0x40
 8002086:	eba0 000a 	sub.w	r0, r0, sl
 800208a:	fa03 f000 	lsl.w	r0, r3, r0
 800208e:	9b04      	ldr	r3, [sp, #16]
 8002090:	3401      	adds	r4, #1
 8002092:	4303      	orrs	r3, r0
 8002094:	9304      	str	r3, [sp, #16]
 8002096:	f814 1b01 	ldrb.w	r1, [r4], #1
 800209a:	2206      	movs	r2, #6
 800209c:	4825      	ldr	r0, [pc, #148]	; (8002134 <_svfiprintf_r+0x1f0>)
 800209e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80020a2:	f000 f9e5 	bl	8002470 <memchr>
 80020a6:	2800      	cmp	r0, #0
 80020a8:	d038      	beq.n	800211c <_svfiprintf_r+0x1d8>
 80020aa:	4b23      	ldr	r3, [pc, #140]	; (8002138 <_svfiprintf_r+0x1f4>)
 80020ac:	bb1b      	cbnz	r3, 80020f6 <_svfiprintf_r+0x1b2>
 80020ae:	9b03      	ldr	r3, [sp, #12]
 80020b0:	3307      	adds	r3, #7
 80020b2:	f023 0307 	bic.w	r3, r3, #7
 80020b6:	3308      	adds	r3, #8
 80020b8:	9303      	str	r3, [sp, #12]
 80020ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020bc:	4433      	add	r3, r6
 80020be:	9309      	str	r3, [sp, #36]	; 0x24
 80020c0:	e767      	b.n	8001f92 <_svfiprintf_r+0x4e>
 80020c2:	460c      	mov	r4, r1
 80020c4:	2001      	movs	r0, #1
 80020c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80020ca:	e7a5      	b.n	8002018 <_svfiprintf_r+0xd4>
 80020cc:	2300      	movs	r3, #0
 80020ce:	f04f 0c0a 	mov.w	ip, #10
 80020d2:	4619      	mov	r1, r3
 80020d4:	3401      	adds	r4, #1
 80020d6:	9305      	str	r3, [sp, #20]
 80020d8:	4620      	mov	r0, r4
 80020da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80020de:	3a30      	subs	r2, #48	; 0x30
 80020e0:	2a09      	cmp	r2, #9
 80020e2:	d903      	bls.n	80020ec <_svfiprintf_r+0x1a8>
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0c5      	beq.n	8002074 <_svfiprintf_r+0x130>
 80020e8:	9105      	str	r1, [sp, #20]
 80020ea:	e7c3      	b.n	8002074 <_svfiprintf_r+0x130>
 80020ec:	4604      	mov	r4, r0
 80020ee:	2301      	movs	r3, #1
 80020f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80020f4:	e7f0      	b.n	80020d8 <_svfiprintf_r+0x194>
 80020f6:	ab03      	add	r3, sp, #12
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	462a      	mov	r2, r5
 80020fc:	4638      	mov	r0, r7
 80020fe:	4b0f      	ldr	r3, [pc, #60]	; (800213c <_svfiprintf_r+0x1f8>)
 8002100:	a904      	add	r1, sp, #16
 8002102:	f3af 8000 	nop.w
 8002106:	1c42      	adds	r2, r0, #1
 8002108:	4606      	mov	r6, r0
 800210a:	d1d6      	bne.n	80020ba <_svfiprintf_r+0x176>
 800210c:	89ab      	ldrh	r3, [r5, #12]
 800210e:	065b      	lsls	r3, r3, #25
 8002110:	f53f af2c 	bmi.w	8001f6c <_svfiprintf_r+0x28>
 8002114:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002116:	b01d      	add	sp, #116	; 0x74
 8002118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800211c:	ab03      	add	r3, sp, #12
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	462a      	mov	r2, r5
 8002122:	4638      	mov	r0, r7
 8002124:	4b05      	ldr	r3, [pc, #20]	; (800213c <_svfiprintf_r+0x1f8>)
 8002126:	a904      	add	r1, sp, #16
 8002128:	f000 f87c 	bl	8002224 <_printf_i>
 800212c:	e7eb      	b.n	8002106 <_svfiprintf_r+0x1c2>
 800212e:	bf00      	nop
 8002130:	0800284f 	.word	0x0800284f
 8002134:	08002859 	.word	0x08002859
 8002138:	00000000 	.word	0x00000000
 800213c:	08001e8d 	.word	0x08001e8d
 8002140:	08002855 	.word	0x08002855

08002144 <_printf_common>:
 8002144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002148:	4616      	mov	r6, r2
 800214a:	4699      	mov	r9, r3
 800214c:	688a      	ldr	r2, [r1, #8]
 800214e:	690b      	ldr	r3, [r1, #16]
 8002150:	4607      	mov	r7, r0
 8002152:	4293      	cmp	r3, r2
 8002154:	bfb8      	it	lt
 8002156:	4613      	movlt	r3, r2
 8002158:	6033      	str	r3, [r6, #0]
 800215a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800215e:	460c      	mov	r4, r1
 8002160:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002164:	b10a      	cbz	r2, 800216a <_printf_common+0x26>
 8002166:	3301      	adds	r3, #1
 8002168:	6033      	str	r3, [r6, #0]
 800216a:	6823      	ldr	r3, [r4, #0]
 800216c:	0699      	lsls	r1, r3, #26
 800216e:	bf42      	ittt	mi
 8002170:	6833      	ldrmi	r3, [r6, #0]
 8002172:	3302      	addmi	r3, #2
 8002174:	6033      	strmi	r3, [r6, #0]
 8002176:	6825      	ldr	r5, [r4, #0]
 8002178:	f015 0506 	ands.w	r5, r5, #6
 800217c:	d106      	bne.n	800218c <_printf_common+0x48>
 800217e:	f104 0a19 	add.w	sl, r4, #25
 8002182:	68e3      	ldr	r3, [r4, #12]
 8002184:	6832      	ldr	r2, [r6, #0]
 8002186:	1a9b      	subs	r3, r3, r2
 8002188:	42ab      	cmp	r3, r5
 800218a:	dc28      	bgt.n	80021de <_printf_common+0x9a>
 800218c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002190:	1e13      	subs	r3, r2, #0
 8002192:	6822      	ldr	r2, [r4, #0]
 8002194:	bf18      	it	ne
 8002196:	2301      	movne	r3, #1
 8002198:	0692      	lsls	r2, r2, #26
 800219a:	d42d      	bmi.n	80021f8 <_printf_common+0xb4>
 800219c:	4649      	mov	r1, r9
 800219e:	4638      	mov	r0, r7
 80021a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80021a4:	47c0      	blx	r8
 80021a6:	3001      	adds	r0, #1
 80021a8:	d020      	beq.n	80021ec <_printf_common+0xa8>
 80021aa:	6823      	ldr	r3, [r4, #0]
 80021ac:	68e5      	ldr	r5, [r4, #12]
 80021ae:	f003 0306 	and.w	r3, r3, #6
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	bf18      	it	ne
 80021b6:	2500      	movne	r5, #0
 80021b8:	6832      	ldr	r2, [r6, #0]
 80021ba:	f04f 0600 	mov.w	r6, #0
 80021be:	68a3      	ldr	r3, [r4, #8]
 80021c0:	bf08      	it	eq
 80021c2:	1aad      	subeq	r5, r5, r2
 80021c4:	6922      	ldr	r2, [r4, #16]
 80021c6:	bf08      	it	eq
 80021c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80021cc:	4293      	cmp	r3, r2
 80021ce:	bfc4      	itt	gt
 80021d0:	1a9b      	subgt	r3, r3, r2
 80021d2:	18ed      	addgt	r5, r5, r3
 80021d4:	341a      	adds	r4, #26
 80021d6:	42b5      	cmp	r5, r6
 80021d8:	d11a      	bne.n	8002210 <_printf_common+0xcc>
 80021da:	2000      	movs	r0, #0
 80021dc:	e008      	b.n	80021f0 <_printf_common+0xac>
 80021de:	2301      	movs	r3, #1
 80021e0:	4652      	mov	r2, sl
 80021e2:	4649      	mov	r1, r9
 80021e4:	4638      	mov	r0, r7
 80021e6:	47c0      	blx	r8
 80021e8:	3001      	adds	r0, #1
 80021ea:	d103      	bne.n	80021f4 <_printf_common+0xb0>
 80021ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021f4:	3501      	adds	r5, #1
 80021f6:	e7c4      	b.n	8002182 <_printf_common+0x3e>
 80021f8:	2030      	movs	r0, #48	; 0x30
 80021fa:	18e1      	adds	r1, r4, r3
 80021fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002200:	1c5a      	adds	r2, r3, #1
 8002202:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002206:	4422      	add	r2, r4
 8002208:	3302      	adds	r3, #2
 800220a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800220e:	e7c5      	b.n	800219c <_printf_common+0x58>
 8002210:	2301      	movs	r3, #1
 8002212:	4622      	mov	r2, r4
 8002214:	4649      	mov	r1, r9
 8002216:	4638      	mov	r0, r7
 8002218:	47c0      	blx	r8
 800221a:	3001      	adds	r0, #1
 800221c:	d0e6      	beq.n	80021ec <_printf_common+0xa8>
 800221e:	3601      	adds	r6, #1
 8002220:	e7d9      	b.n	80021d6 <_printf_common+0x92>
	...

08002224 <_printf_i>:
 8002224:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002228:	460c      	mov	r4, r1
 800222a:	7e27      	ldrb	r7, [r4, #24]
 800222c:	4691      	mov	r9, r2
 800222e:	2f78      	cmp	r7, #120	; 0x78
 8002230:	4680      	mov	r8, r0
 8002232:	469a      	mov	sl, r3
 8002234:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002236:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800223a:	d807      	bhi.n	800224c <_printf_i+0x28>
 800223c:	2f62      	cmp	r7, #98	; 0x62
 800223e:	d80a      	bhi.n	8002256 <_printf_i+0x32>
 8002240:	2f00      	cmp	r7, #0
 8002242:	f000 80d9 	beq.w	80023f8 <_printf_i+0x1d4>
 8002246:	2f58      	cmp	r7, #88	; 0x58
 8002248:	f000 80a4 	beq.w	8002394 <_printf_i+0x170>
 800224c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002250:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002254:	e03a      	b.n	80022cc <_printf_i+0xa8>
 8002256:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800225a:	2b15      	cmp	r3, #21
 800225c:	d8f6      	bhi.n	800224c <_printf_i+0x28>
 800225e:	a001      	add	r0, pc, #4	; (adr r0, 8002264 <_printf_i+0x40>)
 8002260:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002264:	080022bd 	.word	0x080022bd
 8002268:	080022d1 	.word	0x080022d1
 800226c:	0800224d 	.word	0x0800224d
 8002270:	0800224d 	.word	0x0800224d
 8002274:	0800224d 	.word	0x0800224d
 8002278:	0800224d 	.word	0x0800224d
 800227c:	080022d1 	.word	0x080022d1
 8002280:	0800224d 	.word	0x0800224d
 8002284:	0800224d 	.word	0x0800224d
 8002288:	0800224d 	.word	0x0800224d
 800228c:	0800224d 	.word	0x0800224d
 8002290:	080023df 	.word	0x080023df
 8002294:	08002301 	.word	0x08002301
 8002298:	080023c1 	.word	0x080023c1
 800229c:	0800224d 	.word	0x0800224d
 80022a0:	0800224d 	.word	0x0800224d
 80022a4:	08002401 	.word	0x08002401
 80022a8:	0800224d 	.word	0x0800224d
 80022ac:	08002301 	.word	0x08002301
 80022b0:	0800224d 	.word	0x0800224d
 80022b4:	0800224d 	.word	0x0800224d
 80022b8:	080023c9 	.word	0x080023c9
 80022bc:	680b      	ldr	r3, [r1, #0]
 80022be:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80022c2:	1d1a      	adds	r2, r3, #4
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	600a      	str	r2, [r1, #0]
 80022c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80022cc:	2301      	movs	r3, #1
 80022ce:	e0a4      	b.n	800241a <_printf_i+0x1f6>
 80022d0:	6825      	ldr	r5, [r4, #0]
 80022d2:	6808      	ldr	r0, [r1, #0]
 80022d4:	062e      	lsls	r6, r5, #24
 80022d6:	f100 0304 	add.w	r3, r0, #4
 80022da:	d50a      	bpl.n	80022f2 <_printf_i+0xce>
 80022dc:	6805      	ldr	r5, [r0, #0]
 80022de:	600b      	str	r3, [r1, #0]
 80022e0:	2d00      	cmp	r5, #0
 80022e2:	da03      	bge.n	80022ec <_printf_i+0xc8>
 80022e4:	232d      	movs	r3, #45	; 0x2d
 80022e6:	426d      	negs	r5, r5
 80022e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80022ec:	230a      	movs	r3, #10
 80022ee:	485e      	ldr	r0, [pc, #376]	; (8002468 <_printf_i+0x244>)
 80022f0:	e019      	b.n	8002326 <_printf_i+0x102>
 80022f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80022f6:	6805      	ldr	r5, [r0, #0]
 80022f8:	600b      	str	r3, [r1, #0]
 80022fa:	bf18      	it	ne
 80022fc:	b22d      	sxthne	r5, r5
 80022fe:	e7ef      	b.n	80022e0 <_printf_i+0xbc>
 8002300:	680b      	ldr	r3, [r1, #0]
 8002302:	6825      	ldr	r5, [r4, #0]
 8002304:	1d18      	adds	r0, r3, #4
 8002306:	6008      	str	r0, [r1, #0]
 8002308:	0628      	lsls	r0, r5, #24
 800230a:	d501      	bpl.n	8002310 <_printf_i+0xec>
 800230c:	681d      	ldr	r5, [r3, #0]
 800230e:	e002      	b.n	8002316 <_printf_i+0xf2>
 8002310:	0669      	lsls	r1, r5, #25
 8002312:	d5fb      	bpl.n	800230c <_printf_i+0xe8>
 8002314:	881d      	ldrh	r5, [r3, #0]
 8002316:	2f6f      	cmp	r7, #111	; 0x6f
 8002318:	bf0c      	ite	eq
 800231a:	2308      	moveq	r3, #8
 800231c:	230a      	movne	r3, #10
 800231e:	4852      	ldr	r0, [pc, #328]	; (8002468 <_printf_i+0x244>)
 8002320:	2100      	movs	r1, #0
 8002322:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002326:	6866      	ldr	r6, [r4, #4]
 8002328:	2e00      	cmp	r6, #0
 800232a:	bfa8      	it	ge
 800232c:	6821      	ldrge	r1, [r4, #0]
 800232e:	60a6      	str	r6, [r4, #8]
 8002330:	bfa4      	itt	ge
 8002332:	f021 0104 	bicge.w	r1, r1, #4
 8002336:	6021      	strge	r1, [r4, #0]
 8002338:	b90d      	cbnz	r5, 800233e <_printf_i+0x11a>
 800233a:	2e00      	cmp	r6, #0
 800233c:	d04d      	beq.n	80023da <_printf_i+0x1b6>
 800233e:	4616      	mov	r6, r2
 8002340:	fbb5 f1f3 	udiv	r1, r5, r3
 8002344:	fb03 5711 	mls	r7, r3, r1, r5
 8002348:	5dc7      	ldrb	r7, [r0, r7]
 800234a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800234e:	462f      	mov	r7, r5
 8002350:	42bb      	cmp	r3, r7
 8002352:	460d      	mov	r5, r1
 8002354:	d9f4      	bls.n	8002340 <_printf_i+0x11c>
 8002356:	2b08      	cmp	r3, #8
 8002358:	d10b      	bne.n	8002372 <_printf_i+0x14e>
 800235a:	6823      	ldr	r3, [r4, #0]
 800235c:	07df      	lsls	r7, r3, #31
 800235e:	d508      	bpl.n	8002372 <_printf_i+0x14e>
 8002360:	6923      	ldr	r3, [r4, #16]
 8002362:	6861      	ldr	r1, [r4, #4]
 8002364:	4299      	cmp	r1, r3
 8002366:	bfde      	ittt	le
 8002368:	2330      	movle	r3, #48	; 0x30
 800236a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800236e:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8002372:	1b92      	subs	r2, r2, r6
 8002374:	6122      	str	r2, [r4, #16]
 8002376:	464b      	mov	r3, r9
 8002378:	4621      	mov	r1, r4
 800237a:	4640      	mov	r0, r8
 800237c:	f8cd a000 	str.w	sl, [sp]
 8002380:	aa03      	add	r2, sp, #12
 8002382:	f7ff fedf 	bl	8002144 <_printf_common>
 8002386:	3001      	adds	r0, #1
 8002388:	d14c      	bne.n	8002424 <_printf_i+0x200>
 800238a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800238e:	b004      	add	sp, #16
 8002390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002394:	4834      	ldr	r0, [pc, #208]	; (8002468 <_printf_i+0x244>)
 8002396:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800239a:	680e      	ldr	r6, [r1, #0]
 800239c:	6823      	ldr	r3, [r4, #0]
 800239e:	f856 5b04 	ldr.w	r5, [r6], #4
 80023a2:	061f      	lsls	r7, r3, #24
 80023a4:	600e      	str	r6, [r1, #0]
 80023a6:	d514      	bpl.n	80023d2 <_printf_i+0x1ae>
 80023a8:	07d9      	lsls	r1, r3, #31
 80023aa:	bf44      	itt	mi
 80023ac:	f043 0320 	orrmi.w	r3, r3, #32
 80023b0:	6023      	strmi	r3, [r4, #0]
 80023b2:	b91d      	cbnz	r5, 80023bc <_printf_i+0x198>
 80023b4:	6823      	ldr	r3, [r4, #0]
 80023b6:	f023 0320 	bic.w	r3, r3, #32
 80023ba:	6023      	str	r3, [r4, #0]
 80023bc:	2310      	movs	r3, #16
 80023be:	e7af      	b.n	8002320 <_printf_i+0xfc>
 80023c0:	6823      	ldr	r3, [r4, #0]
 80023c2:	f043 0320 	orr.w	r3, r3, #32
 80023c6:	6023      	str	r3, [r4, #0]
 80023c8:	2378      	movs	r3, #120	; 0x78
 80023ca:	4828      	ldr	r0, [pc, #160]	; (800246c <_printf_i+0x248>)
 80023cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80023d0:	e7e3      	b.n	800239a <_printf_i+0x176>
 80023d2:	065e      	lsls	r6, r3, #25
 80023d4:	bf48      	it	mi
 80023d6:	b2ad      	uxthmi	r5, r5
 80023d8:	e7e6      	b.n	80023a8 <_printf_i+0x184>
 80023da:	4616      	mov	r6, r2
 80023dc:	e7bb      	b.n	8002356 <_printf_i+0x132>
 80023de:	680b      	ldr	r3, [r1, #0]
 80023e0:	6826      	ldr	r6, [r4, #0]
 80023e2:	1d1d      	adds	r5, r3, #4
 80023e4:	6960      	ldr	r0, [r4, #20]
 80023e6:	600d      	str	r5, [r1, #0]
 80023e8:	0635      	lsls	r5, r6, #24
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	d501      	bpl.n	80023f2 <_printf_i+0x1ce>
 80023ee:	6018      	str	r0, [r3, #0]
 80023f0:	e002      	b.n	80023f8 <_printf_i+0x1d4>
 80023f2:	0671      	lsls	r1, r6, #25
 80023f4:	d5fb      	bpl.n	80023ee <_printf_i+0x1ca>
 80023f6:	8018      	strh	r0, [r3, #0]
 80023f8:	2300      	movs	r3, #0
 80023fa:	4616      	mov	r6, r2
 80023fc:	6123      	str	r3, [r4, #16]
 80023fe:	e7ba      	b.n	8002376 <_printf_i+0x152>
 8002400:	680b      	ldr	r3, [r1, #0]
 8002402:	1d1a      	adds	r2, r3, #4
 8002404:	600a      	str	r2, [r1, #0]
 8002406:	681e      	ldr	r6, [r3, #0]
 8002408:	2100      	movs	r1, #0
 800240a:	4630      	mov	r0, r6
 800240c:	6862      	ldr	r2, [r4, #4]
 800240e:	f000 f82f 	bl	8002470 <memchr>
 8002412:	b108      	cbz	r0, 8002418 <_printf_i+0x1f4>
 8002414:	1b80      	subs	r0, r0, r6
 8002416:	6060      	str	r0, [r4, #4]
 8002418:	6863      	ldr	r3, [r4, #4]
 800241a:	6123      	str	r3, [r4, #16]
 800241c:	2300      	movs	r3, #0
 800241e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002422:	e7a8      	b.n	8002376 <_printf_i+0x152>
 8002424:	4632      	mov	r2, r6
 8002426:	4649      	mov	r1, r9
 8002428:	4640      	mov	r0, r8
 800242a:	6923      	ldr	r3, [r4, #16]
 800242c:	47d0      	blx	sl
 800242e:	3001      	adds	r0, #1
 8002430:	d0ab      	beq.n	800238a <_printf_i+0x166>
 8002432:	6823      	ldr	r3, [r4, #0]
 8002434:	079b      	lsls	r3, r3, #30
 8002436:	d413      	bmi.n	8002460 <_printf_i+0x23c>
 8002438:	68e0      	ldr	r0, [r4, #12]
 800243a:	9b03      	ldr	r3, [sp, #12]
 800243c:	4298      	cmp	r0, r3
 800243e:	bfb8      	it	lt
 8002440:	4618      	movlt	r0, r3
 8002442:	e7a4      	b.n	800238e <_printf_i+0x16a>
 8002444:	2301      	movs	r3, #1
 8002446:	4632      	mov	r2, r6
 8002448:	4649      	mov	r1, r9
 800244a:	4640      	mov	r0, r8
 800244c:	47d0      	blx	sl
 800244e:	3001      	adds	r0, #1
 8002450:	d09b      	beq.n	800238a <_printf_i+0x166>
 8002452:	3501      	adds	r5, #1
 8002454:	68e3      	ldr	r3, [r4, #12]
 8002456:	9903      	ldr	r1, [sp, #12]
 8002458:	1a5b      	subs	r3, r3, r1
 800245a:	42ab      	cmp	r3, r5
 800245c:	dcf2      	bgt.n	8002444 <_printf_i+0x220>
 800245e:	e7eb      	b.n	8002438 <_printf_i+0x214>
 8002460:	2500      	movs	r5, #0
 8002462:	f104 0619 	add.w	r6, r4, #25
 8002466:	e7f5      	b.n	8002454 <_printf_i+0x230>
 8002468:	08002860 	.word	0x08002860
 800246c:	08002871 	.word	0x08002871

08002470 <memchr>:
 8002470:	4603      	mov	r3, r0
 8002472:	b510      	push	{r4, lr}
 8002474:	b2c9      	uxtb	r1, r1
 8002476:	4402      	add	r2, r0
 8002478:	4293      	cmp	r3, r2
 800247a:	4618      	mov	r0, r3
 800247c:	d101      	bne.n	8002482 <memchr+0x12>
 800247e:	2000      	movs	r0, #0
 8002480:	e003      	b.n	800248a <memchr+0x1a>
 8002482:	7804      	ldrb	r4, [r0, #0]
 8002484:	3301      	adds	r3, #1
 8002486:	428c      	cmp	r4, r1
 8002488:	d1f6      	bne.n	8002478 <memchr+0x8>
 800248a:	bd10      	pop	{r4, pc}

0800248c <memmove>:
 800248c:	4288      	cmp	r0, r1
 800248e:	b510      	push	{r4, lr}
 8002490:	eb01 0402 	add.w	r4, r1, r2
 8002494:	d902      	bls.n	800249c <memmove+0x10>
 8002496:	4284      	cmp	r4, r0
 8002498:	4623      	mov	r3, r4
 800249a:	d807      	bhi.n	80024ac <memmove+0x20>
 800249c:	1e43      	subs	r3, r0, #1
 800249e:	42a1      	cmp	r1, r4
 80024a0:	d008      	beq.n	80024b4 <memmove+0x28>
 80024a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80024a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80024aa:	e7f8      	b.n	800249e <memmove+0x12>
 80024ac:	4601      	mov	r1, r0
 80024ae:	4402      	add	r2, r0
 80024b0:	428a      	cmp	r2, r1
 80024b2:	d100      	bne.n	80024b6 <memmove+0x2a>
 80024b4:	bd10      	pop	{r4, pc}
 80024b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80024ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80024be:	e7f7      	b.n	80024b0 <memmove+0x24>

080024c0 <_free_r>:
 80024c0:	b538      	push	{r3, r4, r5, lr}
 80024c2:	4605      	mov	r5, r0
 80024c4:	2900      	cmp	r1, #0
 80024c6:	d043      	beq.n	8002550 <_free_r+0x90>
 80024c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024cc:	1f0c      	subs	r4, r1, #4
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	bfb8      	it	lt
 80024d2:	18e4      	addlt	r4, r4, r3
 80024d4:	f000 f8d0 	bl	8002678 <__malloc_lock>
 80024d8:	4a1e      	ldr	r2, [pc, #120]	; (8002554 <_free_r+0x94>)
 80024da:	6813      	ldr	r3, [r2, #0]
 80024dc:	4610      	mov	r0, r2
 80024de:	b933      	cbnz	r3, 80024ee <_free_r+0x2e>
 80024e0:	6063      	str	r3, [r4, #4]
 80024e2:	6014      	str	r4, [r2, #0]
 80024e4:	4628      	mov	r0, r5
 80024e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80024ea:	f000 b8cb 	b.w	8002684 <__malloc_unlock>
 80024ee:	42a3      	cmp	r3, r4
 80024f0:	d90a      	bls.n	8002508 <_free_r+0x48>
 80024f2:	6821      	ldr	r1, [r4, #0]
 80024f4:	1862      	adds	r2, r4, r1
 80024f6:	4293      	cmp	r3, r2
 80024f8:	bf01      	itttt	eq
 80024fa:	681a      	ldreq	r2, [r3, #0]
 80024fc:	685b      	ldreq	r3, [r3, #4]
 80024fe:	1852      	addeq	r2, r2, r1
 8002500:	6022      	streq	r2, [r4, #0]
 8002502:	6063      	str	r3, [r4, #4]
 8002504:	6004      	str	r4, [r0, #0]
 8002506:	e7ed      	b.n	80024e4 <_free_r+0x24>
 8002508:	461a      	mov	r2, r3
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	b10b      	cbz	r3, 8002512 <_free_r+0x52>
 800250e:	42a3      	cmp	r3, r4
 8002510:	d9fa      	bls.n	8002508 <_free_r+0x48>
 8002512:	6811      	ldr	r1, [r2, #0]
 8002514:	1850      	adds	r0, r2, r1
 8002516:	42a0      	cmp	r0, r4
 8002518:	d10b      	bne.n	8002532 <_free_r+0x72>
 800251a:	6820      	ldr	r0, [r4, #0]
 800251c:	4401      	add	r1, r0
 800251e:	1850      	adds	r0, r2, r1
 8002520:	4283      	cmp	r3, r0
 8002522:	6011      	str	r1, [r2, #0]
 8002524:	d1de      	bne.n	80024e4 <_free_r+0x24>
 8002526:	6818      	ldr	r0, [r3, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	4401      	add	r1, r0
 800252c:	6011      	str	r1, [r2, #0]
 800252e:	6053      	str	r3, [r2, #4]
 8002530:	e7d8      	b.n	80024e4 <_free_r+0x24>
 8002532:	d902      	bls.n	800253a <_free_r+0x7a>
 8002534:	230c      	movs	r3, #12
 8002536:	602b      	str	r3, [r5, #0]
 8002538:	e7d4      	b.n	80024e4 <_free_r+0x24>
 800253a:	6820      	ldr	r0, [r4, #0]
 800253c:	1821      	adds	r1, r4, r0
 800253e:	428b      	cmp	r3, r1
 8002540:	bf01      	itttt	eq
 8002542:	6819      	ldreq	r1, [r3, #0]
 8002544:	685b      	ldreq	r3, [r3, #4]
 8002546:	1809      	addeq	r1, r1, r0
 8002548:	6021      	streq	r1, [r4, #0]
 800254a:	6063      	str	r3, [r4, #4]
 800254c:	6054      	str	r4, [r2, #4]
 800254e:	e7c9      	b.n	80024e4 <_free_r+0x24>
 8002550:	bd38      	pop	{r3, r4, r5, pc}
 8002552:	bf00      	nop
 8002554:	20000098 	.word	0x20000098

08002558 <_malloc_r>:
 8002558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800255a:	1ccd      	adds	r5, r1, #3
 800255c:	f025 0503 	bic.w	r5, r5, #3
 8002560:	3508      	adds	r5, #8
 8002562:	2d0c      	cmp	r5, #12
 8002564:	bf38      	it	cc
 8002566:	250c      	movcc	r5, #12
 8002568:	2d00      	cmp	r5, #0
 800256a:	4606      	mov	r6, r0
 800256c:	db01      	blt.n	8002572 <_malloc_r+0x1a>
 800256e:	42a9      	cmp	r1, r5
 8002570:	d903      	bls.n	800257a <_malloc_r+0x22>
 8002572:	230c      	movs	r3, #12
 8002574:	6033      	str	r3, [r6, #0]
 8002576:	2000      	movs	r0, #0
 8002578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800257a:	f000 f87d 	bl	8002678 <__malloc_lock>
 800257e:	4921      	ldr	r1, [pc, #132]	; (8002604 <_malloc_r+0xac>)
 8002580:	680a      	ldr	r2, [r1, #0]
 8002582:	4614      	mov	r4, r2
 8002584:	b99c      	cbnz	r4, 80025ae <_malloc_r+0x56>
 8002586:	4f20      	ldr	r7, [pc, #128]	; (8002608 <_malloc_r+0xb0>)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	b923      	cbnz	r3, 8002596 <_malloc_r+0x3e>
 800258c:	4621      	mov	r1, r4
 800258e:	4630      	mov	r0, r6
 8002590:	f000 f862 	bl	8002658 <_sbrk_r>
 8002594:	6038      	str	r0, [r7, #0]
 8002596:	4629      	mov	r1, r5
 8002598:	4630      	mov	r0, r6
 800259a:	f000 f85d 	bl	8002658 <_sbrk_r>
 800259e:	1c43      	adds	r3, r0, #1
 80025a0:	d123      	bne.n	80025ea <_malloc_r+0x92>
 80025a2:	230c      	movs	r3, #12
 80025a4:	4630      	mov	r0, r6
 80025a6:	6033      	str	r3, [r6, #0]
 80025a8:	f000 f86c 	bl	8002684 <__malloc_unlock>
 80025ac:	e7e3      	b.n	8002576 <_malloc_r+0x1e>
 80025ae:	6823      	ldr	r3, [r4, #0]
 80025b0:	1b5b      	subs	r3, r3, r5
 80025b2:	d417      	bmi.n	80025e4 <_malloc_r+0x8c>
 80025b4:	2b0b      	cmp	r3, #11
 80025b6:	d903      	bls.n	80025c0 <_malloc_r+0x68>
 80025b8:	6023      	str	r3, [r4, #0]
 80025ba:	441c      	add	r4, r3
 80025bc:	6025      	str	r5, [r4, #0]
 80025be:	e004      	b.n	80025ca <_malloc_r+0x72>
 80025c0:	6863      	ldr	r3, [r4, #4]
 80025c2:	42a2      	cmp	r2, r4
 80025c4:	bf0c      	ite	eq
 80025c6:	600b      	streq	r3, [r1, #0]
 80025c8:	6053      	strne	r3, [r2, #4]
 80025ca:	4630      	mov	r0, r6
 80025cc:	f000 f85a 	bl	8002684 <__malloc_unlock>
 80025d0:	f104 000b 	add.w	r0, r4, #11
 80025d4:	1d23      	adds	r3, r4, #4
 80025d6:	f020 0007 	bic.w	r0, r0, #7
 80025da:	1ac2      	subs	r2, r0, r3
 80025dc:	d0cc      	beq.n	8002578 <_malloc_r+0x20>
 80025de:	1a1b      	subs	r3, r3, r0
 80025e0:	50a3      	str	r3, [r4, r2]
 80025e2:	e7c9      	b.n	8002578 <_malloc_r+0x20>
 80025e4:	4622      	mov	r2, r4
 80025e6:	6864      	ldr	r4, [r4, #4]
 80025e8:	e7cc      	b.n	8002584 <_malloc_r+0x2c>
 80025ea:	1cc4      	adds	r4, r0, #3
 80025ec:	f024 0403 	bic.w	r4, r4, #3
 80025f0:	42a0      	cmp	r0, r4
 80025f2:	d0e3      	beq.n	80025bc <_malloc_r+0x64>
 80025f4:	1a21      	subs	r1, r4, r0
 80025f6:	4630      	mov	r0, r6
 80025f8:	f000 f82e 	bl	8002658 <_sbrk_r>
 80025fc:	3001      	adds	r0, #1
 80025fe:	d1dd      	bne.n	80025bc <_malloc_r+0x64>
 8002600:	e7cf      	b.n	80025a2 <_malloc_r+0x4a>
 8002602:	bf00      	nop
 8002604:	20000098 	.word	0x20000098
 8002608:	2000009c 	.word	0x2000009c

0800260c <_realloc_r>:
 800260c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800260e:	4607      	mov	r7, r0
 8002610:	4614      	mov	r4, r2
 8002612:	460e      	mov	r6, r1
 8002614:	b921      	cbnz	r1, 8002620 <_realloc_r+0x14>
 8002616:	4611      	mov	r1, r2
 8002618:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800261c:	f7ff bf9c 	b.w	8002558 <_malloc_r>
 8002620:	b922      	cbnz	r2, 800262c <_realloc_r+0x20>
 8002622:	f7ff ff4d 	bl	80024c0 <_free_r>
 8002626:	4625      	mov	r5, r4
 8002628:	4628      	mov	r0, r5
 800262a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800262c:	f000 f830 	bl	8002690 <_malloc_usable_size_r>
 8002630:	42a0      	cmp	r0, r4
 8002632:	d20f      	bcs.n	8002654 <_realloc_r+0x48>
 8002634:	4621      	mov	r1, r4
 8002636:	4638      	mov	r0, r7
 8002638:	f7ff ff8e 	bl	8002558 <_malloc_r>
 800263c:	4605      	mov	r5, r0
 800263e:	2800      	cmp	r0, #0
 8002640:	d0f2      	beq.n	8002628 <_realloc_r+0x1c>
 8002642:	4631      	mov	r1, r6
 8002644:	4622      	mov	r2, r4
 8002646:	f7ff fbd7 	bl	8001df8 <memcpy>
 800264a:	4631      	mov	r1, r6
 800264c:	4638      	mov	r0, r7
 800264e:	f7ff ff37 	bl	80024c0 <_free_r>
 8002652:	e7e9      	b.n	8002628 <_realloc_r+0x1c>
 8002654:	4635      	mov	r5, r6
 8002656:	e7e7      	b.n	8002628 <_realloc_r+0x1c>

08002658 <_sbrk_r>:
 8002658:	b538      	push	{r3, r4, r5, lr}
 800265a:	2300      	movs	r3, #0
 800265c:	4d05      	ldr	r5, [pc, #20]	; (8002674 <_sbrk_r+0x1c>)
 800265e:	4604      	mov	r4, r0
 8002660:	4608      	mov	r0, r1
 8002662:	602b      	str	r3, [r5, #0]
 8002664:	f7ff fb38 	bl	8001cd8 <_sbrk>
 8002668:	1c43      	adds	r3, r0, #1
 800266a:	d102      	bne.n	8002672 <_sbrk_r+0x1a>
 800266c:	682b      	ldr	r3, [r5, #0]
 800266e:	b103      	cbz	r3, 8002672 <_sbrk_r+0x1a>
 8002670:	6023      	str	r3, [r4, #0]
 8002672:	bd38      	pop	{r3, r4, r5, pc}
 8002674:	20000140 	.word	0x20000140

08002678 <__malloc_lock>:
 8002678:	4801      	ldr	r0, [pc, #4]	; (8002680 <__malloc_lock+0x8>)
 800267a:	f000 b811 	b.w	80026a0 <__retarget_lock_acquire_recursive>
 800267e:	bf00      	nop
 8002680:	20000148 	.word	0x20000148

08002684 <__malloc_unlock>:
 8002684:	4801      	ldr	r0, [pc, #4]	; (800268c <__malloc_unlock+0x8>)
 8002686:	f000 b80c 	b.w	80026a2 <__retarget_lock_release_recursive>
 800268a:	bf00      	nop
 800268c:	20000148 	.word	0x20000148

08002690 <_malloc_usable_size_r>:
 8002690:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002694:	1f18      	subs	r0, r3, #4
 8002696:	2b00      	cmp	r3, #0
 8002698:	bfbc      	itt	lt
 800269a:	580b      	ldrlt	r3, [r1, r0]
 800269c:	18c0      	addlt	r0, r0, r3
 800269e:	4770      	bx	lr

080026a0 <__retarget_lock_acquire_recursive>:
 80026a0:	4770      	bx	lr

080026a2 <__retarget_lock_release_recursive>:
 80026a2:	4770      	bx	lr

080026a4 <_init>:
 80026a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026a6:	bf00      	nop
 80026a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026aa:	bc08      	pop	{r3}
 80026ac:	469e      	mov	lr, r3
 80026ae:	4770      	bx	lr

080026b0 <_fini>:
 80026b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026b2:	bf00      	nop
 80026b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026b6:	bc08      	pop	{r3}
 80026b8:	469e      	mov	lr, r3
 80026ba:	4770      	bx	lr
