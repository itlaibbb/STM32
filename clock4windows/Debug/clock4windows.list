
clock4windows.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003438  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003544  08003544  00013544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800357c  0800357c  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  0800357c  0800357c  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800357c  0800357c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800357c  0800357c  0001357c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003580  08003580  00013580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000018  0800359c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  0800359c  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4b6  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e82  00000000  00000000  0002c4f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  0002e380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c38  00000000  00000000  0002f0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018059  00000000  00000000  0002fcd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d52a  00000000  00000000  00047d31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c68a  00000000  00000000  0005525b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e18e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003690  00000000  00000000  000e1938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	0800352c 	.word	0x0800352c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	0800352c 	.word	0x0800352c

0800014c <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//Прерывание от TMR1
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM1) //проверяем какой таймер вызвал колбек
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	4a28      	ldr	r2, [pc, #160]	; (80001fc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800015a:	4293      	cmp	r3, r2
 800015c:	d149      	bne.n	80001f2 <HAL_TIM_PeriodElapsedCallback+0xa6>
   {
//прерываемя каждую 0,5 мсек.
	 count++;
 800015e:	4b28      	ldr	r3, [pc, #160]	; (8000200 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000160:	681b      	ldr	r3, [r3, #0]
 8000162:	3301      	adds	r3, #1
 8000164:	4a26      	ldr	r2, [pc, #152]	; (8000200 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000166:	6013      	str	r3, [r2, #0]
	  if(c_num==4)
	  {
		  c_num=0;
	  }
*/
	  c_key_dr++;
 8000168:	4b26      	ldr	r3, [pc, #152]	; (8000204 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	3301      	adds	r3, #1
 800016e:	4a25      	ldr	r2, [pc, #148]	; (8000204 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000170:	6013      	str	r3, [r2, #0]
	  if(c_key_dr>=50)						//опрос кнопок с защитой от дребезга (значение 50 = 25 мсек)
 8000172:	4b24      	ldr	r3, [pc, #144]	; (8000204 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000174:	681b      	ldr	r3, [r3, #0]
 8000176:	2b31      	cmp	r3, #49	; 0x31
 8000178:	dd3b      	ble.n	80001f2 <HAL_TIM_PeriodElapsedCallback+0xa6>
	  {
		  keyscan=GPIOB->IDR;
 800017a:	4b23      	ldr	r3, [pc, #140]	; (8000208 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800017c:	689b      	ldr	r3, [r3, #8]
 800017e:	461a      	mov	r2, r3
 8000180:	4b22      	ldr	r3, [pc, #136]	; (800020c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000182:	601a      	str	r2, [r3, #0]
		  	  if((keyscan & 1) == 0)
 8000184:	4b21      	ldr	r3, [pc, #132]	; (800020c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	f003 0301 	and.w	r3, r3, #1
 800018c:	2b00      	cmp	r3, #0
 800018e:	d103      	bne.n	8000198 <HAL_TIM_PeriodElapsedCallback+0x4c>
		  	  {
		  		key[0]=1;
 8000190:	4b1f      	ldr	r3, [pc, #124]	; (8000210 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000192:	2201      	movs	r2, #1
 8000194:	601a      	str	r2, [r3, #0]
 8000196:	e002      	b.n	800019e <HAL_TIM_PeriodElapsedCallback+0x52>
		  	  }
		  	  else
		  	  {
		  		key[0]=0;
 8000198:	4b1d      	ldr	r3, [pc, #116]	; (8000210 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800019a:	2200      	movs	r2, #0
 800019c:	601a      	str	r2, [r3, #0]
		  	  }
		  	  if((keyscan & 2) == 0)
 800019e:	4b1b      	ldr	r3, [pc, #108]	; (800020c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	f003 0302 	and.w	r3, r3, #2
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d103      	bne.n	80001b2 <HAL_TIM_PeriodElapsedCallback+0x66>
		  	  {
		  		key[1]=1;
 80001aa:	4b19      	ldr	r3, [pc, #100]	; (8000210 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80001ac:	2201      	movs	r2, #1
 80001ae:	605a      	str	r2, [r3, #4]
 80001b0:	e002      	b.n	80001b8 <HAL_TIM_PeriodElapsedCallback+0x6c>
		  	  }
		  	  else
		  	  {
		  		key[1]=0;
 80001b2:	4b17      	ldr	r3, [pc, #92]	; (8000210 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80001b4:	2200      	movs	r2, #0
 80001b6:	605a      	str	r2, [r3, #4]
		  	  }
		  	  if((keyscan & 1024) == 0)
 80001b8:	4b14      	ldr	r3, [pc, #80]	; (800020c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d103      	bne.n	80001cc <HAL_TIM_PeriodElapsedCallback+0x80>
		  	  {
		  		key[2]=1;
 80001c4:	4b12      	ldr	r3, [pc, #72]	; (8000210 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80001c6:	2201      	movs	r2, #1
 80001c8:	609a      	str	r2, [r3, #8]
 80001ca:	e002      	b.n	80001d2 <HAL_TIM_PeriodElapsedCallback+0x86>
		  	  }
		  	  else
		  	  {
		  		key[2]=0;
 80001cc:	4b10      	ldr	r3, [pc, #64]	; (8000210 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80001ce:	2200      	movs	r2, #0
 80001d0:	609a      	str	r2, [r3, #8]
		  	  }
		  	  if((keyscan & 2048) == 0)
 80001d2:	4b0e      	ldr	r3, [pc, #56]	; (800020c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d103      	bne.n	80001e6 <HAL_TIM_PeriodElapsedCallback+0x9a>
		  	  {
		  		key[3]=1;
 80001de:	4b0c      	ldr	r3, [pc, #48]	; (8000210 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80001e0:	2201      	movs	r2, #1
 80001e2:	60da      	str	r2, [r3, #12]
 80001e4:	e002      	b.n	80001ec <HAL_TIM_PeriodElapsedCallback+0xa0>
		  	  }
		  	  else
		  	  {
		  		key[3]=0;
 80001e6:	4b0a      	ldr	r3, [pc, #40]	; (8000210 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80001e8:	2200      	movs	r2, #0
 80001ea:	60da      	str	r2, [r3, #12]
		  	  }
		c_key_dr=0;
 80001ec:	4b05      	ldr	r3, [pc, #20]	; (8000204 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	601a      	str	r2, [r3, #0]
	  }

   }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr
 80001fc:	40012c00 	.word	0x40012c00
 8000200:	2000003c 	.word	0x2000003c
 8000204:	20000040 	.word	0x20000040
 8000208:	40010c00 	.word	0x40010c00
 800020c:	20000044 	.word	0x20000044
 8000210:	20000048 	.word	0x20000048

08000214 <rtc_get>:
//
//Вход: null
//Выход:
// переменные int Minutes_H, Minutes_L, Hours_H Hours_L с единицами/десятками часов и минут
void rtc_get(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	///////////////////////////////////////////////////////////
	//Получаем значение времени из RTC
		  	  	  	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // RTC_FORMAT_BIN , RTC_FORMAT_BCD
 8000218:	2200      	movs	r2, #0
 800021a:	4926      	ldr	r1, [pc, #152]	; (80002b4 <rtc_get+0xa0>)
 800021c:	4826      	ldr	r0, [pc, #152]	; (80002b8 <rtc_get+0xa4>)
 800021e:	f001 ffff 	bl	8002220 <HAL_RTC_GetTime>
	///////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////
	//Преобразуем значение времени в BCD формат
		  	  	  	Seconds_H=sTime.Seconds/10;
 8000222:	4b24      	ldr	r3, [pc, #144]	; (80002b4 <rtc_get+0xa0>)
 8000224:	789b      	ldrb	r3, [r3, #2]
 8000226:	4a25      	ldr	r2, [pc, #148]	; (80002bc <rtc_get+0xa8>)
 8000228:	fba2 2303 	umull	r2, r3, r2, r3
 800022c:	08db      	lsrs	r3, r3, #3
 800022e:	b2db      	uxtb	r3, r3
 8000230:	461a      	mov	r2, r3
 8000232:	4b23      	ldr	r3, [pc, #140]	; (80002c0 <rtc_get+0xac>)
 8000234:	601a      	str	r2, [r3, #0]
		  	  	  	Seconds_L=sTime.Seconds-(Seconds_H*10);
 8000236:	4b1f      	ldr	r3, [pc, #124]	; (80002b4 <rtc_get+0xa0>)
 8000238:	789b      	ldrb	r3, [r3, #2]
 800023a:	4619      	mov	r1, r3
 800023c:	4b20      	ldr	r3, [pc, #128]	; (80002c0 <rtc_get+0xac>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	f06f 0209 	mvn.w	r2, #9
 8000244:	fb02 f303 	mul.w	r3, r2, r3
 8000248:	440b      	add	r3, r1
 800024a:	4a1e      	ldr	r2, [pc, #120]	; (80002c4 <rtc_get+0xb0>)
 800024c:	6013      	str	r3, [r2, #0]
		            Minutes_H=sTime.Minutes/10;
 800024e:	4b19      	ldr	r3, [pc, #100]	; (80002b4 <rtc_get+0xa0>)
 8000250:	785b      	ldrb	r3, [r3, #1]
 8000252:	4a1a      	ldr	r2, [pc, #104]	; (80002bc <rtc_get+0xa8>)
 8000254:	fba2 2303 	umull	r2, r3, r2, r3
 8000258:	08db      	lsrs	r3, r3, #3
 800025a:	b2db      	uxtb	r3, r3
 800025c:	461a      	mov	r2, r3
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <rtc_get+0xb4>)
 8000260:	601a      	str	r2, [r3, #0]
		            Minutes_L=sTime.Minutes-(Minutes_H*10);
 8000262:	4b14      	ldr	r3, [pc, #80]	; (80002b4 <rtc_get+0xa0>)
 8000264:	785b      	ldrb	r3, [r3, #1]
 8000266:	4619      	mov	r1, r3
 8000268:	4b17      	ldr	r3, [pc, #92]	; (80002c8 <rtc_get+0xb4>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	f06f 0209 	mvn.w	r2, #9
 8000270:	fb02 f303 	mul.w	r3, r2, r3
 8000274:	440b      	add	r3, r1
 8000276:	4a15      	ldr	r2, [pc, #84]	; (80002cc <rtc_get+0xb8>)
 8000278:	6013      	str	r3, [r2, #0]
		            Hours_H=sTime.Hours/10;
 800027a:	4b0e      	ldr	r3, [pc, #56]	; (80002b4 <rtc_get+0xa0>)
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	4a0f      	ldr	r2, [pc, #60]	; (80002bc <rtc_get+0xa8>)
 8000280:	fba2 2303 	umull	r2, r3, r2, r3
 8000284:	08db      	lsrs	r3, r3, #3
 8000286:	b2db      	uxtb	r3, r3
 8000288:	461a      	mov	r2, r3
 800028a:	4b11      	ldr	r3, [pc, #68]	; (80002d0 <rtc_get+0xbc>)
 800028c:	601a      	str	r2, [r3, #0]
		            Hours_L=sTime.Hours-(Hours_H*10);
 800028e:	4b09      	ldr	r3, [pc, #36]	; (80002b4 <rtc_get+0xa0>)
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	4619      	mov	r1, r3
 8000294:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <rtc_get+0xbc>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	f06f 0209 	mvn.w	r2, #9
 800029c:	fb02 f303 	mul.w	r3, r2, r3
 80002a0:	440b      	add	r3, r1
 80002a2:	4a0c      	ldr	r2, [pc, #48]	; (80002d4 <rtc_get+0xc0>)
 80002a4:	6013      	str	r3, [r2, #0]
	///////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////
	//Считываем значение даты (нужно для нормальной работы HAL_RTC)
		            HAL_RTC_GetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN);
 80002a6:	2200      	movs	r2, #0
 80002a8:	490b      	ldr	r1, [pc, #44]	; (80002d8 <rtc_get+0xc4>)
 80002aa:	4803      	ldr	r0, [pc, #12]	; (80002b8 <rtc_get+0xa4>)
 80002ac:	f002 f946 	bl	800253c <HAL_RTC_GetDate>
	//4 DEBUG
	//	            snprintf(trans_str, 63, "Date %d-%d-20%d\n", DateToUpdate.Date, DateToUpdate.Month, DateToUpdate.Year);
	//	            HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
	//END 4 DEBUG
#endif
}
 80002b0:	bf00      	nop
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	20000034 	.word	0x20000034
 80002b8:	200000d8 	.word	0x200000d8
 80002bc:	cccccccd 	.word	0xcccccccd
 80002c0:	2000008c 	.word	0x2000008c
 80002c4:	20000088 	.word	0x20000088
 80002c8:	20000084 	.word	0x20000084
 80002cc:	20000080 	.word	0x20000080
 80002d0:	2000007c 	.word	0x2000007c
 80002d4:	20000078 	.word	0x20000078
 80002d8:	20000038 	.word	0x20000038

080002dc <bcd27seg>:
//
//Вход: BCD цифра
//Выход 7 сегментны йкод цифры
//
uint8_t	bcd27seg (uint8_t bcd)
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	71fb      	strb	r3, [r7, #7]
			0b00000111,			//7
			0b01111111,			//8
			0b01101111,			//9
			0b00000000			//ZERRO
	};
	return (sgm_m[bcd]);
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	4a03      	ldr	r2, [pc, #12]	; (80002f8 <bcd27seg+0x1c>)
 80002ea:	5cd3      	ldrb	r3, [r2, r3]
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bc80      	pop	{r7}
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	20000000 	.word	0x20000000

080002fc <num_out>:
//
}
*/
//Вывод цифры
void	num_out(int num)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
		Tmp=1;
 8000304:	4b2a      	ldr	r3, [pc, #168]	; (80003b0 <num_out+0xb4>)
 8000306:	2201      	movs	r2, #1
 8000308:	601a      	str	r2, [r3, #0]
	 	cs_set();
 800030a:	2200      	movs	r2, #0
 800030c:	2140      	movs	r1, #64	; 0x40
 800030e:	4829      	ldr	r0, [pc, #164]	; (80003b4 <num_out+0xb8>)
 8000310:	f001 f886 	bl	8001420 <HAL_GPIO_WritePin>
	 	 for(int i=0;i<7;i++)
 8000314:	2300      	movs	r3, #0
 8000316:	60fb      	str	r3, [r7, #12]
 8000318:	e02e      	b.n	8000378 <num_out+0x7c>
	 	 {
	 	 if(sgm_out[num] & (64/Tmp))
 800031a:	4a27      	ldr	r2, [pc, #156]	; (80003b8 <num_out+0xbc>)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	4413      	add	r3, r2
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	4619      	mov	r1, r3
 8000324:	4b22      	ldr	r3, [pc, #136]	; (80003b0 <num_out+0xb4>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	2240      	movs	r2, #64	; 0x40
 800032a:	fb92 f3f3 	sdiv	r3, r2, r3
 800032e:	400b      	ands	r3, r1
 8000330:	2b00      	cmp	r3, #0
 8000332:	d005      	beq.n	8000340 <num_out+0x44>
	 	{
	 		data_set();
 8000334:	2201      	movs	r2, #1
 8000336:	2120      	movs	r1, #32
 8000338:	481e      	ldr	r0, [pc, #120]	; (80003b4 <num_out+0xb8>)
 800033a:	f001 f871 	bl	8001420 <HAL_GPIO_WritePin>
 800033e:	e004      	b.n	800034a <num_out+0x4e>
	 	}
	 	else
	 	{
	 		data_reset();
 8000340:	2200      	movs	r2, #0
 8000342:	2120      	movs	r1, #32
 8000344:	481b      	ldr	r0, [pc, #108]	; (80003b4 <num_out+0xb8>)
 8000346:	f001 f86b 	bl	8001420 <HAL_GPIO_WritePin>
	 	}
	 	spi_strob();
 800034a:	2200      	movs	r2, #0
 800034c:	2108      	movs	r1, #8
 800034e:	4819      	ldr	r0, [pc, #100]	; (80003b4 <num_out+0xb8>)
 8000350:	f001 f866 	bl	8001420 <HAL_GPIO_WritePin>
 8000354:	2201      	movs	r2, #1
 8000356:	2108      	movs	r1, #8
 8000358:	4816      	ldr	r0, [pc, #88]	; (80003b4 <num_out+0xb8>)
 800035a:	f001 f861 	bl	8001420 <HAL_GPIO_WritePin>
 800035e:	2200      	movs	r2, #0
 8000360:	2108      	movs	r1, #8
 8000362:	4814      	ldr	r0, [pc, #80]	; (80003b4 <num_out+0xb8>)
 8000364:	f001 f85c 	bl	8001420 <HAL_GPIO_WritePin>
	 	Tmp=Tmp*2;
 8000368:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <num_out+0xb4>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	005b      	lsls	r3, r3, #1
 800036e:	4a10      	ldr	r2, [pc, #64]	; (80003b0 <num_out+0xb4>)
 8000370:	6013      	str	r3, [r2, #0]
	 	 for(int i=0;i<7;i++)
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	3301      	adds	r3, #1
 8000376:	60fb      	str	r3, [r7, #12]
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	2b06      	cmp	r3, #6
 800037c:	ddcd      	ble.n	800031a <num_out+0x1e>
	 	 }
	    data_reset();
 800037e:	2200      	movs	r2, #0
 8000380:	2120      	movs	r1, #32
 8000382:	480c      	ldr	r0, [pc, #48]	; (80003b4 <num_out+0xb8>)
 8000384:	f001 f84c 	bl	8001420 <HAL_GPIO_WritePin>
	    spi_strob();
 8000388:	2200      	movs	r2, #0
 800038a:	2108      	movs	r1, #8
 800038c:	4809      	ldr	r0, [pc, #36]	; (80003b4 <num_out+0xb8>)
 800038e:	f001 f847 	bl	8001420 <HAL_GPIO_WritePin>
 8000392:	2201      	movs	r2, #1
 8000394:	2108      	movs	r1, #8
 8000396:	4807      	ldr	r0, [pc, #28]	; (80003b4 <num_out+0xb8>)
 8000398:	f001 f842 	bl	8001420 <HAL_GPIO_WritePin>
 800039c:	2200      	movs	r2, #0
 800039e:	2108      	movs	r1, #8
 80003a0:	4804      	ldr	r0, [pc, #16]	; (80003b4 <num_out+0xb8>)
 80003a2:	f001 f83d 	bl	8001420 <HAL_GPIO_WritePin>
}
 80003a6:	bf00      	nop
 80003a8:	3710      	adds	r7, #16
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	20000070 	.word	0x20000070
 80003b4:	40010c00 	.word	0x40010c00
 80003b8:	20000090 	.word	0x20000090

080003bc <out_num>:
//
//загружаем цифры для индикации
void	out_num	(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
	  for(int i=0;i<6;i++)
 80003c2:	2300      	movs	r3, #0
 80003c4:	607b      	str	r3, [r7, #4]
 80003c6:	e005      	b.n	80003d4 <out_num+0x18>
	  {
	  num_out(i);
 80003c8:	6878      	ldr	r0, [r7, #4]
 80003ca:	f7ff ff97 	bl	80002fc <num_out>
	  for(int i=0;i<6;i++)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	3301      	adds	r3, #1
 80003d2:	607b      	str	r3, [r7, #4]
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	2b05      	cmp	r3, #5
 80003d8:	ddf6      	ble.n	80003c8 <out_num+0xc>
	  }
	    cs_strob();		//включаем индикацию
 80003da:	2201      	movs	r2, #1
 80003dc:	2140      	movs	r1, #64	; 0x40
 80003de:	4806      	ldr	r0, [pc, #24]	; (80003f8 <out_num+0x3c>)
 80003e0:	f001 f81e 	bl	8001420 <HAL_GPIO_WritePin>
 80003e4:	2200      	movs	r2, #0
 80003e6:	2140      	movs	r1, #64	; 0x40
 80003e8:	4803      	ldr	r0, [pc, #12]	; (80003f8 <out_num+0x3c>)
 80003ea:	f001 f819 	bl	8001420 <HAL_GPIO_WritePin>
}
 80003ee:	bf00      	nop
 80003f0:	3708      	adds	r7, #8
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	40010c00 	.word	0x40010c00

080003fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000402:	f000 fd19 	bl	8000e38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000406:	f000 fa37 	bl	8000878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800040a:	f000 fb49 	bl	8000aa0 <MX_GPIO_Init>
  MX_RTC_Init();
 800040e:	f000 fa8f 	bl	8000930 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000412:	f000 fb1b 	bl	8000a4c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000416:	f000 fac9 	bl	80009ac <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1); // передаём в функцию указатель на структуру TIM1
 800041a:	485e      	ldr	r0, [pc, #376]	; (8000594 <main+0x198>)
 800041c:	f002 fbd4 	bl	8002bc8 <HAL_TIM_Base_Start_IT>
//	  clr_all();				//очистка дисплея

  for(int i=0;i<8;i++)
 8000420:	2300      	movs	r3, #0
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	e016      	b.n	8000454 <main+0x58>
  	  {
  	  	data_reset();
 8000426:	2200      	movs	r2, #0
 8000428:	2120      	movs	r1, #32
 800042a:	485b      	ldr	r0, [pc, #364]	; (8000598 <main+0x19c>)
 800042c:	f000 fff8 	bl	8001420 <HAL_GPIO_WritePin>
  	 	spi_strob();
 8000430:	2200      	movs	r2, #0
 8000432:	2108      	movs	r1, #8
 8000434:	4858      	ldr	r0, [pc, #352]	; (8000598 <main+0x19c>)
 8000436:	f000 fff3 	bl	8001420 <HAL_GPIO_WritePin>
 800043a:	2201      	movs	r2, #1
 800043c:	2108      	movs	r1, #8
 800043e:	4856      	ldr	r0, [pc, #344]	; (8000598 <main+0x19c>)
 8000440:	f000 ffee 	bl	8001420 <HAL_GPIO_WritePin>
 8000444:	2200      	movs	r2, #0
 8000446:	2108      	movs	r1, #8
 8000448:	4853      	ldr	r0, [pc, #332]	; (8000598 <main+0x19c>)
 800044a:	f000 ffe9 	bl	8001420 <HAL_GPIO_WritePin>
  for(int i=0;i<8;i++)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	3301      	adds	r3, #1
 8000452:	607b      	str	r3, [r7, #4]
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	2b07      	cmp	r3, #7
 8000458:	dde5      	ble.n	8000426 <main+0x2a>
  	  }

  	    cs_strob();
 800045a:	2201      	movs	r2, #1
 800045c:	2140      	movs	r1, #64	; 0x40
 800045e:	484e      	ldr	r0, [pc, #312]	; (8000598 <main+0x19c>)
 8000460:	f000 ffde 	bl	8001420 <HAL_GPIO_WritePin>
 8000464:	2200      	movs	r2, #0
 8000466:	2140      	movs	r1, #64	; 0x40
 8000468:	484b      	ldr	r0, [pc, #300]	; (8000598 <main+0x19c>)
 800046a:	f000 ffd9 	bl	8001420 <HAL_GPIO_WritePin>
  	    c_mde=0;
 800046e:	4b4b      	ldr	r3, [pc, #300]	; (800059c <main+0x1a0>)
 8000470:	2200      	movs	r2, #0
 8000472:	601a      	str	r2, [r3, #0]
	  //
	  //КНОПКИ
	  //
	  //нажатие на KEY1 (установка режимов)
	  //
	  	  if((key[0]==1) && (key_f[0]==0))
 8000474:	4b4a      	ldr	r3, [pc, #296]	; (80005a0 <main+0x1a4>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	2b01      	cmp	r3, #1
 800047a:	d10b      	bne.n	8000494 <main+0x98>
 800047c:	4b49      	ldr	r3, [pc, #292]	; (80005a4 <main+0x1a8>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d107      	bne.n	8000494 <main+0x98>
	  	  {
	  		  key_f[0]=1;
 8000484:	4b47      	ldr	r3, [pc, #284]	; (80005a4 <main+0x1a8>)
 8000486:	2201      	movs	r2, #1
 8000488:	601a      	str	r2, [r3, #0]
	  		  c_mde++;					//переход на следующий режим
 800048a:	4b44      	ldr	r3, [pc, #272]	; (800059c <main+0x1a0>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	3301      	adds	r3, #1
 8000490:	4a42      	ldr	r2, [pc, #264]	; (800059c <main+0x1a0>)
 8000492:	6013      	str	r3, [r2, #0]
	  	  }
	  	  if((key[0]==0) && (key_f[0]==1))
 8000494:	4b42      	ldr	r3, [pc, #264]	; (80005a0 <main+0x1a4>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2b00      	cmp	r3, #0
 800049a:	d106      	bne.n	80004aa <main+0xae>
 800049c:	4b41      	ldr	r3, [pc, #260]	; (80005a4 <main+0x1a8>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	2b01      	cmp	r3, #1
 80004a2:	d102      	bne.n	80004aa <main+0xae>
	  	  {
	  		  key_f[0]=0;
 80004a4:	4b3f      	ldr	r3, [pc, #252]	; (80005a4 <main+0x1a8>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
	  	  }
	  	  if(c_mde==3)					//всего режимов 3
 80004aa:	4b3c      	ldr	r3, [pc, #240]	; (800059c <main+0x1a0>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	2b03      	cmp	r3, #3
 80004b0:	d102      	bne.n	80004b8 <main+0xbc>
	  	  {
	  		  c_mde=0;					//если переход на 4-й режим, то возврат в режим 0
 80004b2:	4b3a      	ldr	r3, [pc, #232]	; (800059c <main+0x1a0>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
	  	  }
	  //
	  //
	  //нажатие на KEY2 (уменьшение)
	  //
	  	  if((key[1]==1) && (key_f[1]==0))
 80004b8:	4b39      	ldr	r3, [pc, #228]	; (80005a0 <main+0x1a4>)
 80004ba:	685b      	ldr	r3, [r3, #4]
 80004bc:	2b01      	cmp	r3, #1
 80004be:	d132      	bne.n	8000526 <main+0x12a>
 80004c0:	4b38      	ldr	r3, [pc, #224]	; (80005a4 <main+0x1a8>)
 80004c2:	685b      	ldr	r3, [r3, #4]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d12e      	bne.n	8000526 <main+0x12a>
	  	  {
	  		  key_f[1]=1;
 80004c8:	4b36      	ldr	r3, [pc, #216]	; (80005a4 <main+0x1a8>)
 80004ca:	2201      	movs	r2, #1
 80004cc:	605a      	str	r2, [r3, #4]
	  		  if(c_mde==1)				//уменьшение часов
 80004ce:	4b33      	ldr	r3, [pc, #204]	; (800059c <main+0x1a0>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	2b01      	cmp	r3, #1
 80004d4:	d10d      	bne.n	80004f2 <main+0xf6>
	  		  {
	  			  if(sTime.Hours > 1)
 80004d6:	4b34      	ldr	r3, [pc, #208]	; (80005a8 <main+0x1ac>)
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	2b01      	cmp	r3, #1
 80004dc:	d906      	bls.n	80004ec <main+0xf0>
	  			  {
	  				  sTime.Hours--;
 80004de:	4b32      	ldr	r3, [pc, #200]	; (80005a8 <main+0x1ac>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	3b01      	subs	r3, #1
 80004e4:	b2da      	uxtb	r2, r3
 80004e6:	4b30      	ldr	r3, [pc, #192]	; (80005a8 <main+0x1ac>)
 80004e8:	701a      	strb	r2, [r3, #0]
 80004ea:	e002      	b.n	80004f2 <main+0xf6>
	  			  }
	  			  else
	  			  {
	  				  sTime.Hours=24;
 80004ec:	4b2e      	ldr	r3, [pc, #184]	; (80005a8 <main+0x1ac>)
 80004ee:	2218      	movs	r2, #24
 80004f0:	701a      	strb	r2, [r3, #0]
	  			  }
	  		  }
	  		  if(c_mde==2)				//уменьшение минут
 80004f2:	4b2a      	ldr	r3, [pc, #168]	; (800059c <main+0x1a0>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2b02      	cmp	r3, #2
 80004f8:	d10d      	bne.n	8000516 <main+0x11a>
	  		  {
	  			  if(sTime.Minutes > 1)
 80004fa:	4b2b      	ldr	r3, [pc, #172]	; (80005a8 <main+0x1ac>)
 80004fc:	785b      	ldrb	r3, [r3, #1]
 80004fe:	2b01      	cmp	r3, #1
 8000500:	d906      	bls.n	8000510 <main+0x114>
	  			  {
	  				  sTime.Minutes--;
 8000502:	4b29      	ldr	r3, [pc, #164]	; (80005a8 <main+0x1ac>)
 8000504:	785b      	ldrb	r3, [r3, #1]
 8000506:	3b01      	subs	r3, #1
 8000508:	b2da      	uxtb	r2, r3
 800050a:	4b27      	ldr	r3, [pc, #156]	; (80005a8 <main+0x1ac>)
 800050c:	705a      	strb	r2, [r3, #1]
 800050e:	e002      	b.n	8000516 <main+0x11a>
	  			  }
	  			  else
	  			  {
	  				  sTime.Minutes=59;
 8000510:	4b25      	ldr	r3, [pc, #148]	; (80005a8 <main+0x1ac>)
 8000512:	223b      	movs	r2, #59	; 0x3b
 8000514:	705a      	strb	r2, [r3, #1]
	  			  }
	  		  }
	  		sTime.Seconds=0;
 8000516:	4b24      	ldr	r3, [pc, #144]	; (80005a8 <main+0x1ac>)
 8000518:	2200      	movs	r2, #0
 800051a:	709a      	strb	r2, [r3, #2]
	  		HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // RTC_FORMAT_BIN , RTC_FORMAT_BCD
 800051c:	2200      	movs	r2, #0
 800051e:	4922      	ldr	r1, [pc, #136]	; (80005a8 <main+0x1ac>)
 8000520:	4822      	ldr	r0, [pc, #136]	; (80005ac <main+0x1b0>)
 8000522:	f001 fde5 	bl	80020f0 <HAL_RTC_SetTime>
	  	  }
	  	  if((key[1]==0) && (key_f[1]==1))
 8000526:	4b1e      	ldr	r3, [pc, #120]	; (80005a0 <main+0x1a4>)
 8000528:	685b      	ldr	r3, [r3, #4]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d106      	bne.n	800053c <main+0x140>
 800052e:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <main+0x1a8>)
 8000530:	685b      	ldr	r3, [r3, #4]
 8000532:	2b01      	cmp	r3, #1
 8000534:	d102      	bne.n	800053c <main+0x140>
	  	  {
	  		  key_f[1]=0;
 8000536:	4b1b      	ldr	r3, [pc, #108]	; (80005a4 <main+0x1a8>)
 8000538:	2200      	movs	r2, #0
 800053a:	605a      	str	r2, [r3, #4]
	  	  }
	  //
	  //
	  //нажатие на KEY3 (увеличение)
	  //
	  	  	  if((key[2]==1) && (key_f[2]==0))
 800053c:	4b18      	ldr	r3, [pc, #96]	; (80005a0 <main+0x1a4>)
 800053e:	689b      	ldr	r3, [r3, #8]
 8000540:	2b01      	cmp	r3, #1
 8000542:	d140      	bne.n	80005c6 <main+0x1ca>
 8000544:	4b17      	ldr	r3, [pc, #92]	; (80005a4 <main+0x1a8>)
 8000546:	689b      	ldr	r3, [r3, #8]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d13c      	bne.n	80005c6 <main+0x1ca>
	  	  	  {
	  	  		  key_f[2]=1;
 800054c:	4b15      	ldr	r3, [pc, #84]	; (80005a4 <main+0x1a8>)
 800054e:	2201      	movs	r2, #1
 8000550:	609a      	str	r2, [r3, #8]
	  	  		  if(c_mde==1)				//увеличение часов
 8000552:	4b12      	ldr	r3, [pc, #72]	; (800059c <main+0x1a0>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	2b01      	cmp	r3, #1
 8000558:	d10d      	bne.n	8000576 <main+0x17a>
	  	  		  {
	  	  			  if(sTime.Hours < 23)
 800055a:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <main+0x1ac>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	2b16      	cmp	r3, #22
 8000560:	d806      	bhi.n	8000570 <main+0x174>
	  	  			  {
	  	  				  sTime.Hours++;
 8000562:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <main+0x1ac>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	3301      	adds	r3, #1
 8000568:	b2da      	uxtb	r2, r3
 800056a:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <main+0x1ac>)
 800056c:	701a      	strb	r2, [r3, #0]
 800056e:	e002      	b.n	8000576 <main+0x17a>
	  	  			  }
	  	  			  else
	  	  			  {
	  	  				  sTime.Hours=0;
 8000570:	4b0d      	ldr	r3, [pc, #52]	; (80005a8 <main+0x1ac>)
 8000572:	2200      	movs	r2, #0
 8000574:	701a      	strb	r2, [r3, #0]
	  	  			  }
	  	  		  }
	  	  		  if(c_mde==2)				//увеличение минут
 8000576:	4b09      	ldr	r3, [pc, #36]	; (800059c <main+0x1a0>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	2b02      	cmp	r3, #2
 800057c:	d11b      	bne.n	80005b6 <main+0x1ba>
	  	  		  {
	  	  			  if(sTime.Minutes < 59)
 800057e:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <main+0x1ac>)
 8000580:	785b      	ldrb	r3, [r3, #1]
 8000582:	2b3a      	cmp	r3, #58	; 0x3a
 8000584:	d814      	bhi.n	80005b0 <main+0x1b4>
	  	  			  {
	  	  				  sTime.Minutes++;
 8000586:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <main+0x1ac>)
 8000588:	785b      	ldrb	r3, [r3, #1]
 800058a:	3301      	adds	r3, #1
 800058c:	b2da      	uxtb	r2, r3
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <main+0x1ac>)
 8000590:	705a      	strb	r2, [r3, #1]
 8000592:	e010      	b.n	80005b6 <main+0x1ba>
 8000594:	200000ec 	.word	0x200000ec
 8000598:	40010c00 	.word	0x40010c00
 800059c:	20000068 	.word	0x20000068
 80005a0:	20000048 	.word	0x20000048
 80005a4:	20000058 	.word	0x20000058
 80005a8:	20000034 	.word	0x20000034
 80005ac:	200000d8 	.word	0x200000d8
	  	  			  }
	  	  			  else
	  	  			  {
	  	  				  sTime.Minutes=0;
 80005b0:	4ba0      	ldr	r3, [pc, #640]	; (8000834 <main+0x438>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	705a      	strb	r2, [r3, #1]
	  	  			  }
	  	  		  }
	  	  		sTime.Seconds=0;
 80005b6:	4b9f      	ldr	r3, [pc, #636]	; (8000834 <main+0x438>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	709a      	strb	r2, [r3, #2]
	  	  		HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // RTC_FORMAT_BIN , RTC_FORMAT_BCD
 80005bc:	2200      	movs	r2, #0
 80005be:	499d      	ldr	r1, [pc, #628]	; (8000834 <main+0x438>)
 80005c0:	489d      	ldr	r0, [pc, #628]	; (8000838 <main+0x43c>)
 80005c2:	f001 fd95 	bl	80020f0 <HAL_RTC_SetTime>
	  	  	  }
	  	  	  if((key[2]==0) && (key_f[2]==1))
 80005c6:	4b9d      	ldr	r3, [pc, #628]	; (800083c <main+0x440>)
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d106      	bne.n	80005dc <main+0x1e0>
 80005ce:	4b9c      	ldr	r3, [pc, #624]	; (8000840 <main+0x444>)
 80005d0:	689b      	ldr	r3, [r3, #8]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d102      	bne.n	80005dc <main+0x1e0>
	  	  	  {
	  	  		  key_f[2]=0;
 80005d6:	4b9a      	ldr	r3, [pc, #616]	; (8000840 <main+0x444>)
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
	  	  	  }
	  //
	  //
	  //нажатие на KEY4 (переключение рекуператора)
	  //
	  	  	  if((key[3]==1) && (key_f[3]==0))
 80005dc:	4b97      	ldr	r3, [pc, #604]	; (800083c <main+0x440>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d112      	bne.n	800060a <main+0x20e>
 80005e4:	4b96      	ldr	r3, [pc, #600]	; (8000840 <main+0x444>)
 80005e6:	68db      	ldr	r3, [r3, #12]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d10e      	bne.n	800060a <main+0x20e>
	  	  	  {
	  	  		  key_f[3]=1;
 80005ec:	4b94      	ldr	r3, [pc, #592]	; (8000840 <main+0x444>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	60da      	str	r2, [r3, #12]
	  	  		  key4_count++;
 80005f2:	4b94      	ldr	r3, [pc, #592]	; (8000844 <main+0x448>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	3301      	adds	r3, #1
 80005f8:	4a92      	ldr	r2, [pc, #584]	; (8000844 <main+0x448>)
 80005fa:	6013      	str	r3, [r2, #0]
	  	  		  if(key4_count == 4)
 80005fc:	4b91      	ldr	r3, [pc, #580]	; (8000844 <main+0x448>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b04      	cmp	r3, #4
 8000602:	d102      	bne.n	800060a <main+0x20e>
	  	  		  {
	  	  			key4_count=0;
 8000604:	4b8f      	ldr	r3, [pc, #572]	; (8000844 <main+0x448>)
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
	  	  		  }
//////	  	  		  dindonf=!dindonf;
	  	  	  }
	  	  	  if((key[3]==0) && (key_f[3]==1))
 800060a:	4b8c      	ldr	r3, [pc, #560]	; (800083c <main+0x440>)
 800060c:	68db      	ldr	r3, [r3, #12]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d106      	bne.n	8000620 <main+0x224>
 8000612:	4b8b      	ldr	r3, [pc, #556]	; (8000840 <main+0x444>)
 8000614:	68db      	ldr	r3, [r3, #12]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d102      	bne.n	8000620 <main+0x224>
	  	  	  {
	  	  		  key_f[3]=0;
 800061a:	4b89      	ldr	r3, [pc, #548]	; (8000840 <main+0x444>)
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
	  //
	  //РЕЖИМЫ
	  //
	  //мигающие режимы (1,2)
	  //
	    if((count>=500) && (count<1000))
 8000620:	4b89      	ldr	r3, [pc, #548]	; (8000848 <main+0x44c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000628:	db2c      	blt.n	8000684 <main+0x288>
 800062a:	4b87      	ldr	r3, [pc, #540]	; (8000848 <main+0x44c>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000632:	da27      	bge.n	8000684 <main+0x288>
	  	{
	  	  if(c_mde==1)							//установка часов
 8000634:	4b85      	ldr	r3, [pc, #532]	; (800084c <main+0x450>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d10f      	bne.n	800065c <main+0x260>
	  	  {
	  		  sgm_out[5]=bcd27seg(11);			//преобразуем время в 7seg код
 800063c:	200b      	movs	r0, #11
 800063e:	f7ff fe4d 	bl	80002dc <bcd27seg>
 8000642:	4603      	mov	r3, r0
 8000644:	461a      	mov	r2, r3
 8000646:	4b82      	ldr	r3, [pc, #520]	; (8000850 <main+0x454>)
 8000648:	715a      	strb	r2, [r3, #5]
	  		  sgm_out[4]=bcd27seg(11);			//--""--
 800064a:	200b      	movs	r0, #11
 800064c:	f7ff fe46 	bl	80002dc <bcd27seg>
 8000650:	4603      	mov	r3, r0
 8000652:	461a      	mov	r2, r3
 8000654:	4b7e      	ldr	r3, [pc, #504]	; (8000850 <main+0x454>)
 8000656:	711a      	strb	r2, [r3, #4]
	  		  out_num();
 8000658:	f7ff feb0 	bl	80003bc <out_num>

	  	  }
	  	  if(c_mde==2)							//установка минут
 800065c:	4b7b      	ldr	r3, [pc, #492]	; (800084c <main+0x450>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b02      	cmp	r3, #2
 8000662:	d10f      	bne.n	8000684 <main+0x288>
	  	  {
	  		  sgm_out[3]=bcd27seg(11);			//преобразуем время в 7seg код
 8000664:	200b      	movs	r0, #11
 8000666:	f7ff fe39 	bl	80002dc <bcd27seg>
 800066a:	4603      	mov	r3, r0
 800066c:	461a      	mov	r2, r3
 800066e:	4b78      	ldr	r3, [pc, #480]	; (8000850 <main+0x454>)
 8000670:	70da      	strb	r2, [r3, #3]
	  		  sgm_out[2]=bcd27seg(11);			//--""--
 8000672:	200b      	movs	r0, #11
 8000674:	f7ff fe32 	bl	80002dc <bcd27seg>
 8000678:	4603      	mov	r3, r0
 800067a:	461a      	mov	r2, r3
 800067c:	4b74      	ldr	r3, [pc, #464]	; (8000850 <main+0x454>)
 800067e:	709a      	strb	r2, [r3, #2]
	  		  out_num();
 8000680:	f7ff fe9c 	bl	80003bc <out_num>





	  if(count>=1000)
 8000684:	4b70      	ldr	r3, [pc, #448]	; (8000848 <main+0x44c>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800068c:	f6ff aef2 	blt.w	8000474 <main+0x78>
  {
//1 раз в 0,5 секунды
	  count=0;
 8000690:	4b6d      	ldr	r3, [pc, #436]	; (8000848 <main+0x44c>)
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
      HAL_GPIO_TogglePin(led13_GPIO_Port, led13_Pin); // переключаем пин мигалки в противоположное состояние
 8000696:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800069a:	486e      	ldr	r0, [pc, #440]	; (8000854 <main+0x458>)
 800069c:	f000 fed8 	bl	8001450 <HAL_GPIO_TogglePin>
	  rtc_get();		//получаем текущее время и преобразуем его d BCD Hours_L, Hours_Н, Minutes_L, Minutes_Н
 80006a0:	f7ff fdb8 	bl	8000214 <rtc_get>
	  sgm_out[5]=bcd27seg(Hours_H);			//преобразуем время в 7seg код
 80006a4:	4b6c      	ldr	r3, [pc, #432]	; (8000858 <main+0x45c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff fe16 	bl	80002dc <bcd27seg>
 80006b0:	4603      	mov	r3, r0
 80006b2:	461a      	mov	r2, r3
 80006b4:	4b66      	ldr	r3, [pc, #408]	; (8000850 <main+0x454>)
 80006b6:	715a      	strb	r2, [r3, #5]
	  sgm_out[4]=bcd27seg(Hours_L);			//--""--
 80006b8:	4b68      	ldr	r3, [pc, #416]	; (800085c <main+0x460>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff fe0c 	bl	80002dc <bcd27seg>
 80006c4:	4603      	mov	r3, r0
 80006c6:	461a      	mov	r2, r3
 80006c8:	4b61      	ldr	r3, [pc, #388]	; (8000850 <main+0x454>)
 80006ca:	711a      	strb	r2, [r3, #4]
	  sgm_out[3]=bcd27seg(Minutes_H);		//--""--
 80006cc:	4b64      	ldr	r3, [pc, #400]	; (8000860 <main+0x464>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff fe02 	bl	80002dc <bcd27seg>
 80006d8:	4603      	mov	r3, r0
 80006da:	461a      	mov	r2, r3
 80006dc:	4b5c      	ldr	r3, [pc, #368]	; (8000850 <main+0x454>)
 80006de:	70da      	strb	r2, [r3, #3]
	  sgm_out[2]=bcd27seg(Minutes_L);		//--""--
 80006e0:	4b60      	ldr	r3, [pc, #384]	; (8000864 <main+0x468>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff fdf8 	bl	80002dc <bcd27seg>
 80006ec:	4603      	mov	r3, r0
 80006ee:	461a      	mov	r2, r3
 80006f0:	4b57      	ldr	r3, [pc, #348]	; (8000850 <main+0x454>)
 80006f2:	709a      	strb	r2, [r3, #2]
	  sgm_out[1]=bcd27seg(Seconds_H);		//--""--
 80006f4:	4b5c      	ldr	r3, [pc, #368]	; (8000868 <main+0x46c>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff fdee 	bl	80002dc <bcd27seg>
 8000700:	4603      	mov	r3, r0
 8000702:	461a      	mov	r2, r3
 8000704:	4b52      	ldr	r3, [pc, #328]	; (8000850 <main+0x454>)
 8000706:	705a      	strb	r2, [r3, #1]
	  sgm_out[0]=bcd27seg(Seconds_L);		//--""--
 8000708:	4b58      	ldr	r3, [pc, #352]	; (800086c <main+0x470>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	b2db      	uxtb	r3, r3
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff fde4 	bl	80002dc <bcd27seg>
 8000714:	4603      	mov	r3, r0
 8000716:	461a      	mov	r2, r3
 8000718:	4b4d      	ldr	r3, [pc, #308]	; (8000850 <main+0x454>)
 800071a:	701a      	strb	r2, [r3, #0]



//
	  out_num();							//вывод цифр для индикации
 800071c:	f7ff fe4e 	bl	80003bc <out_num>
//
	  if(key4_count==0)
 8000720:	4b48      	ldr	r3, [pc, #288]	; (8000844 <main+0x448>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d113      	bne.n	8000750 <main+0x354>
//Выключение рекуперации, вдува и выдува
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	2120      	movs	r1, #32
 800072c:	4850      	ldr	r0, [pc, #320]	; (8000870 <main+0x474>)
 800072e:	f000 fe77 	bl	8001420 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	2140      	movs	r1, #64	; 0x40
 8000736:	484e      	ldr	r0, [pc, #312]	; (8000870 <main+0x474>)
 8000738:	f000 fe72 	bl	8001420 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	2101      	movs	r1, #1
 8000740:	484b      	ldr	r0, [pc, #300]	; (8000870 <main+0x474>)
 8000742:	f000 fe6d 	bl	8001420 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	2102      	movs	r1, #2
 800074a:	4849      	ldr	r0, [pc, #292]	; (8000870 <main+0x474>)
 800074c:	f000 fe68 	bl	8001420 <HAL_GPIO_WritePin>
	  }
	  if(key4_count==1)
 8000750:	4b3c      	ldr	r3, [pc, #240]	; (8000844 <main+0x448>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b01      	cmp	r3, #1
 8000756:	d112      	bne.n	800077e <main+0x382>
//Выдув
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);		//выдув
 8000758:	2201      	movs	r2, #1
 800075a:	2120      	movs	r1, #32
 800075c:	4844      	ldr	r0, [pc, #272]	; (8000870 <main+0x474>)
 800075e:	f000 fe5f 	bl	8001420 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	2140      	movs	r1, #64	; 0x40
 8000766:	4842      	ldr	r0, [pc, #264]	; (8000870 <main+0x474>)
 8000768:	f000 fe5a 	bl	8001420 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	2102      	movs	r1, #2
 8000770:	483f      	ldr	r0, [pc, #252]	; (8000870 <main+0x474>)
 8000772:	f000 fe55 	bl	8001420 <HAL_GPIO_WritePin>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8000776:	2101      	movs	r1, #1
 8000778:	483d      	ldr	r0, [pc, #244]	; (8000870 <main+0x474>)
 800077a:	f000 fe69 	bl	8001450 <HAL_GPIO_TogglePin>
	  }
//Вдув
	  if(key4_count==2)
 800077e:	4b31      	ldr	r3, [pc, #196]	; (8000844 <main+0x448>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	2b02      	cmp	r3, #2
 8000784:	d112      	bne.n	80007ac <main+0x3b0>
	  	  {
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);		//вдув
 8000786:	2201      	movs	r2, #1
 8000788:	2140      	movs	r1, #64	; 0x40
 800078a:	4839      	ldr	r0, [pc, #228]	; (8000870 <main+0x474>)
 800078c:	f000 fe48 	bl	8001420 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	2120      	movs	r1, #32
 8000794:	4836      	ldr	r0, [pc, #216]	; (8000870 <main+0x474>)
 8000796:	f000 fe43 	bl	8001420 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2101      	movs	r1, #1
 800079e:	4834      	ldr	r0, [pc, #208]	; (8000870 <main+0x474>)
 80007a0:	f000 fe3e 	bl	8001420 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 80007a4:	2102      	movs	r1, #2
 80007a6:	4832      	ldr	r0, [pc, #200]	; (8000870 <main+0x474>)
 80007a8:	f000 fe52 	bl	8001450 <HAL_GPIO_TogglePin>
	  	  }
//Работа рекуператора
	  if(key4_count==3)
 80007ac:	4b25      	ldr	r3, [pc, #148]	; (8000844 <main+0x448>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2b03      	cmp	r3, #3
 80007b2:	f47f ae5f 	bne.w	8000474 <main+0x78>
	  {
	    co++;
 80007b6:	4b2f      	ldr	r3, [pc, #188]	; (8000874 <main+0x478>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	3301      	adds	r3, #1
 80007bc:	4a2d      	ldr	r2, [pc, #180]	; (8000874 <main+0x478>)
 80007be:	6013      	str	r3, [r2, #0]
	    	if(co == 1)
 80007c0:	4b2c      	ldr	r3, [pc, #176]	; (8000874 <main+0x478>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d113      	bne.n	80007f0 <main+0x3f4>
	    	{
	    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);		//выдув
 80007c8:	2201      	movs	r2, #1
 80007ca:	2120      	movs	r1, #32
 80007cc:	4828      	ldr	r0, [pc, #160]	; (8000870 <main+0x474>)
 80007ce:	f000 fe27 	bl	8001420 <HAL_GPIO_WritePin>
	    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2140      	movs	r1, #64	; 0x40
 80007d6:	4826      	ldr	r0, [pc, #152]	; (8000870 <main+0x474>)
 80007d8:	f000 fe22 	bl	8001420 <HAL_GPIO_WritePin>
	    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80007dc:	2201      	movs	r2, #1
 80007de:	2101      	movs	r1, #1
 80007e0:	4823      	ldr	r0, [pc, #140]	; (8000870 <main+0x474>)
 80007e2:	f000 fe1d 	bl	8001420 <HAL_GPIO_WritePin>
	    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2102      	movs	r1, #2
 80007ea:	4821      	ldr	r0, [pc, #132]	; (8000870 <main+0x474>)
 80007ec:	f000 fe18 	bl	8001420 <HAL_GPIO_WritePin>
	    	}
	    	if(co == 80)
 80007f0:	4b20      	ldr	r3, [pc, #128]	; (8000874 <main+0x478>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b50      	cmp	r3, #80	; 0x50
 80007f6:	d113      	bne.n	8000820 <main+0x424>
	    	{
	    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); //вдув
 80007f8:	2200      	movs	r2, #0
 80007fa:	2120      	movs	r1, #32
 80007fc:	481c      	ldr	r0, [pc, #112]	; (8000870 <main+0x474>)
 80007fe:	f000 fe0f 	bl	8001420 <HAL_GPIO_WritePin>
	    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000802:	2201      	movs	r2, #1
 8000804:	2140      	movs	r1, #64	; 0x40
 8000806:	481a      	ldr	r0, [pc, #104]	; (8000870 <main+0x474>)
 8000808:	f000 fe0a 	bl	8001420 <HAL_GPIO_WritePin>
	    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	2101      	movs	r1, #1
 8000810:	4817      	ldr	r0, [pc, #92]	; (8000870 <main+0x474>)
 8000812:	f000 fe05 	bl	8001420 <HAL_GPIO_WritePin>
	    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000816:	2201      	movs	r2, #1
 8000818:	2102      	movs	r1, #2
 800081a:	4815      	ldr	r0, [pc, #84]	; (8000870 <main+0x474>)
 800081c:	f000 fe00 	bl	8001420 <HAL_GPIO_WritePin>

	    	}
	    	if(co == 160)
 8000820:	4b14      	ldr	r3, [pc, #80]	; (8000874 <main+0x478>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2ba0      	cmp	r3, #160	; 0xa0
 8000826:	f47f ae25 	bne.w	8000474 <main+0x78>
	    	{
	    		co = 0;
 800082a:	4b12      	ldr	r3, [pc, #72]	; (8000874 <main+0x478>)
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
	  	  if((key[0]==1) && (key_f[0]==0))
 8000830:	e620      	b.n	8000474 <main+0x78>
 8000832:	bf00      	nop
 8000834:	20000034 	.word	0x20000034
 8000838:	200000d8 	.word	0x200000d8
 800083c:	20000048 	.word	0x20000048
 8000840:	20000058 	.word	0x20000058
 8000844:	2000006c 	.word	0x2000006c
 8000848:	2000003c 	.word	0x2000003c
 800084c:	20000068 	.word	0x20000068
 8000850:	20000090 	.word	0x20000090
 8000854:	40011000 	.word	0x40011000
 8000858:	2000007c 	.word	0x2000007c
 800085c:	20000078 	.word	0x20000078
 8000860:	20000084 	.word	0x20000084
 8000864:	20000080 	.word	0x20000080
 8000868:	2000008c 	.word	0x2000008c
 800086c:	20000088 	.word	0x20000088
 8000870:	40010800 	.word	0x40010800
 8000874:	20000074 	.word	0x20000074

08000878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b094      	sub	sp, #80	; 0x50
 800087c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000882:	2228      	movs	r2, #40	; 0x28
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f002 fe48 	bl	800351c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a8:	2301      	movs	r3, #1
 80008aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80008b2:	2300      	movs	r3, #0
 80008b4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b6:	2301      	movs	r3, #1
 80008b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ba:	2302      	movs	r3, #2
 80008bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008c4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80008c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 fde4 	bl	800149c <HAL_RCC_OscConfig>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0x66>
  {
    Error_Handler();
 80008da:	f000 f97f 	bl	8000bdc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008de:	230f      	movs	r3, #15
 80008e0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e2:	2302      	movs	r3, #2
 80008e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	2102      	movs	r1, #2
 80008fa:	4618      	mov	r0, r3
 80008fc:	f001 f84e 	bl	800199c <HAL_RCC_ClockConfig>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000906:	f000 f969 	bl	8000bdc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800090a:	2301      	movs	r3, #1
 800090c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 800090e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000912:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	4618      	mov	r0, r3
 8000918:	f001 f9da 	bl	8001cd0 <HAL_RCCEx_PeriphCLKConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000922:	f000 f95b 	bl	8000bdc <Error_Handler>
  }
}
 8000926:	bf00      	nop
 8000928:	3750      	adds	r7, #80	; 0x50
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 1 */
  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000934:	4b19      	ldr	r3, [pc, #100]	; (800099c <MX_RTC_Init+0x6c>)
 8000936:	4a1a      	ldr	r2, [pc, #104]	; (80009a0 <MX_RTC_Init+0x70>)
 8000938:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800093a:	4b18      	ldr	r3, [pc, #96]	; (800099c <MX_RTC_Init+0x6c>)
 800093c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000940:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8000942:	4b16      	ldr	r3, [pc, #88]	; (800099c <MX_RTC_Init+0x6c>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000948:	4814      	ldr	r0, [pc, #80]	; (800099c <MX_RTC_Init+0x6c>)
 800094a:	f001 fb3b 	bl	8001fc4 <HAL_RTC_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_RTC_Init+0x28>
  {
    Error_Handler();
 8000954:	f000 f942 	bl	8000bdc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 17;
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <MX_RTC_Init+0x74>)
 800095a:	2211      	movs	r2, #17
 800095c:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 38;
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <MX_RTC_Init+0x74>)
 8000960:	2226      	movs	r2, #38	; 0x26
 8000962:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8000964:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <MX_RTC_Init+0x74>)
 8000966:	2200      	movs	r2, #0
 8000968:	709a      	strb	r2, [r3, #2]

//  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
//  {
//    Error_Handler();
//  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_RTC_Init+0x78>)
 800096c:	2201      	movs	r2, #1
 800096e:	701a      	strb	r2, [r3, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000970:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <MX_RTC_Init+0x78>)
 8000972:	2201      	movs	r2, #1
 8000974:	705a      	strb	r2, [r3, #1]
  DateToUpdate.Date = 1;
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_RTC_Init+0x78>)
 8000978:	2201      	movs	r2, #1
 800097a:	709a      	strb	r2, [r3, #2]
  DateToUpdate.Year = 20;
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <MX_RTC_Init+0x78>)
 800097e:	2214      	movs	r2, #20
 8000980:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8000982:	2200      	movs	r2, #0
 8000984:	4908      	ldr	r1, [pc, #32]	; (80009a8 <MX_RTC_Init+0x78>)
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_RTC_Init+0x6c>)
 8000988:	f001 fd22 	bl	80023d0 <HAL_RTC_SetDate>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000992:	f000 f923 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200000d8 	.word	0x200000d8
 80009a0:	40002800 	.word	0x40002800
 80009a4:	20000034 	.word	0x20000034
 80009a8:	20000038 	.word	0x20000038

080009ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009b2:	f107 0308 	add.w	r3, r7, #8
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c0:	463b      	mov	r3, r7
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009c8:	4b1e      	ldr	r3, [pc, #120]	; (8000a44 <MX_TIM1_Init+0x98>)
 80009ca:	4a1f      	ldr	r2, [pc, #124]	; (8000a48 <MX_TIM1_Init+0x9c>)
 80009cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 719;
 80009ce:	4b1d      	ldr	r3, [pc, #116]	; (8000a44 <MX_TIM1_Init+0x98>)
 80009d0:	f240 22cf 	movw	r2, #719	; 0x2cf
 80009d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d6:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <MX_TIM1_Init+0x98>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50;
 80009dc:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <MX_TIM1_Init+0x98>)
 80009de:	2232      	movs	r2, #50	; 0x32
 80009e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e2:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <MX_TIM1_Init+0x98>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009e8:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <MX_TIM1_Init+0x98>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ee:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <MX_TIM1_Init+0x98>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009f4:	4813      	ldr	r0, [pc, #76]	; (8000a44 <MX_TIM1_Init+0x98>)
 80009f6:	f002 f897 	bl	8002b28 <HAL_TIM_Base_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000a00:	f000 f8ec 	bl	8000bdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a0a:	f107 0308 	add.w	r3, r7, #8
 8000a0e:	4619      	mov	r1, r3
 8000a10:	480c      	ldr	r0, [pc, #48]	; (8000a44 <MX_TIM1_Init+0x98>)
 8000a12:	f002 fa33 	bl	8002e7c <HAL_TIM_ConfigClockSource>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000a1c:	f000 f8de 	bl	8000bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a20:	2300      	movs	r3, #0
 8000a22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a24:	2300      	movs	r3, #0
 8000a26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a28:	463b      	mov	r3, r7
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_TIM1_Init+0x98>)
 8000a2e:	f002 fc05 	bl	800323c <HAL_TIMEx_MasterConfigSynchronization>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a38:	f000 f8d0 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a3c:	bf00      	nop
 8000a3e:	3718      	adds	r7, #24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	200000ec 	.word	0x200000ec
 8000a48:	40012c00 	.word	0x40012c00

08000a4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a50:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_USART1_UART_Init+0x4c>)
 8000a52:	4a12      	ldr	r2, [pc, #72]	; (8000a9c <MX_USART1_UART_Init+0x50>)
 8000a54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <MX_USART1_UART_Init+0x4c>)
 8000a58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_USART1_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_USART1_UART_Init+0x4c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MX_USART1_UART_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_USART1_UART_Init+0x4c>)
 8000a72:	220c      	movs	r2, #12
 8000a74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <MX_USART1_UART_Init+0x4c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_USART1_UART_Init+0x4c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_USART1_UART_Init+0x4c>)
 8000a84:	f002 fc4a 	bl	800331c <HAL_UART_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a8e:	f000 f8a5 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000098 	.word	0x20000098
 8000a9c:	40013800 	.word	0x40013800

08000aa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b088      	sub	sp, #32
 8000aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa6:	f107 0310 	add.w	r3, r7, #16
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab4:	4b45      	ldr	r3, [pc, #276]	; (8000bcc <MX_GPIO_Init+0x12c>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a44      	ldr	r2, [pc, #272]	; (8000bcc <MX_GPIO_Init+0x12c>)
 8000aba:	f043 0310 	orr.w	r3, r3, #16
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b42      	ldr	r3, [pc, #264]	; (8000bcc <MX_GPIO_Init+0x12c>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f003 0310 	and.w	r3, r3, #16
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000acc:	4b3f      	ldr	r3, [pc, #252]	; (8000bcc <MX_GPIO_Init+0x12c>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	4a3e      	ldr	r2, [pc, #248]	; (8000bcc <MX_GPIO_Init+0x12c>)
 8000ad2:	f043 0320 	orr.w	r3, r3, #32
 8000ad6:	6193      	str	r3, [r2, #24]
 8000ad8:	4b3c      	ldr	r3, [pc, #240]	; (8000bcc <MX_GPIO_Init+0x12c>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f003 0320 	and.w	r3, r3, #32
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae4:	4b39      	ldr	r3, [pc, #228]	; (8000bcc <MX_GPIO_Init+0x12c>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a38      	ldr	r2, [pc, #224]	; (8000bcc <MX_GPIO_Init+0x12c>)
 8000aea:	f043 0304 	orr.w	r3, r3, #4
 8000aee:	6193      	str	r3, [r2, #24]
 8000af0:	4b36      	ldr	r3, [pc, #216]	; (8000bcc <MX_GPIO_Init+0x12c>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f003 0304 	and.w	r3, r3, #4
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afc:	4b33      	ldr	r3, [pc, #204]	; (8000bcc <MX_GPIO_Init+0x12c>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	4a32      	ldr	r2, [pc, #200]	; (8000bcc <MX_GPIO_Init+0x12c>)
 8000b02:	f043 0308 	orr.w	r3, r3, #8
 8000b06:	6193      	str	r3, [r2, #24]
 8000b08:	4b30      	ldr	r3, [pc, #192]	; (8000bcc <MX_GPIO_Init+0x12c>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	f003 0308 	and.w	r3, r3, #8
 8000b10:	603b      	str	r3, [r7, #0]
 8000b12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led13_GPIO_Port, led13_Pin, GPIO_PIN_SET);
 8000b14:	2201      	movs	r2, #1
 8000b16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b1a:	482d      	ldr	r0, [pc, #180]	; (8000bd0 <MX_GPIO_Init+0x130>)
 8000b1c:	f000 fc80 	bl	8001420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|B_1A_Pin|B_1B_Pin
 8000b20:	2200      	movs	r2, #0
 8000b22:	f240 117b 	movw	r1, #379	; 0x17b
 8000b26:	482b      	ldr	r0, [pc, #172]	; (8000bd4 <MX_GPIO_Init+0x134>)
 8000b28:	f000 fc7a 	bl	8001420 <HAL_GPIO_WritePin>
                          |A_1A_Pin|A_1B_Pin|LED_SOUND_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_5|ST_CP_Pin, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2168      	movs	r1, #104	; 0x68
 8000b30:	4829      	ldr	r0, [pc, #164]	; (8000bd8 <MX_GPIO_Init+0x138>)
 8000b32:	f000 fc75 	bl	8001420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led13_Pin */
  GPIO_InitStruct.Pin = led13_Pin;
 8000b36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2302      	movs	r3, #2
 8000b46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led13_GPIO_Port, &GPIO_InitStruct);
 8000b48:	f107 0310 	add.w	r3, r7, #16
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4820      	ldr	r0, [pc, #128]	; (8000bd0 <MX_GPIO_Init+0x130>)
 8000b50:	f000 fae2 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin B_1A_Pin B_1B_Pin
                           A_1A_Pin A_1B_Pin LED_SOUND_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|B_1A_Pin|B_1B_Pin
 8000b54:	f240 137b 	movw	r3, #379	; 0x17b
 8000b58:	613b      	str	r3, [r7, #16]
                          |A_1A_Pin|A_1B_Pin|LED_SOUND_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2302      	movs	r3, #2
 8000b64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b66:	f107 0310 	add.w	r3, r7, #16
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4819      	ldr	r0, [pc, #100]	; (8000bd4 <MX_GPIO_Init+0x134>)
 8000b6e:	f000 fad3 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_1_Pin KEY_2_Pin KEY_3_Pin KEY_4_Pin */
  GPIO_InitStruct.Pin = KEY_1_Pin|KEY_2_Pin|KEY_3_Pin|KEY_4_Pin;
 8000b72:	f640 4303 	movw	r3, #3075	; 0xc03
 8000b76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b80:	f107 0310 	add.w	r3, r7, #16
 8000b84:	4619      	mov	r1, r3
 8000b86:	4814      	ldr	r0, [pc, #80]	; (8000bd8 <MX_GPIO_Init+0x138>)
 8000b88:	f000 fac6 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000b8c:	2328      	movs	r3, #40	; 0x28
 8000b8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b90:	2301      	movs	r3, #1
 8000b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9c:	f107 0310 	add.w	r3, r7, #16
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	480d      	ldr	r0, [pc, #52]	; (8000bd8 <MX_GPIO_Init+0x138>)
 8000ba4:	f000 fab8 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST_CP_Pin */
  GPIO_InitStruct.Pin = ST_CP_Pin;
 8000ba8:	2340      	movs	r3, #64	; 0x40
 8000baa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bac:	2301      	movs	r3, #1
 8000bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ST_CP_GPIO_Port, &GPIO_InitStruct);
 8000bb8:	f107 0310 	add.w	r3, r7, #16
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4806      	ldr	r0, [pc, #24]	; (8000bd8 <MX_GPIO_Init+0x138>)
 8000bc0:	f000 faaa 	bl	8001118 <HAL_GPIO_Init>

}
 8000bc4:	bf00      	nop
 8000bc6:	3720      	adds	r7, #32
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	40011000 	.word	0x40011000
 8000bd4:	40010800 	.word	0x40010800
 8000bd8:	40010c00 	.word	0x40010c00

08000bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be0:	b672      	cpsid	i
}
 8000be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <Error_Handler+0x8>
	...

08000be8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <HAL_MspInit+0x5c>)
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	4a14      	ldr	r2, [pc, #80]	; (8000c44 <HAL_MspInit+0x5c>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6193      	str	r3, [r2, #24]
 8000bfa:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <HAL_MspInit+0x5c>)
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c06:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <HAL_MspInit+0x5c>)
 8000c08:	69db      	ldr	r3, [r3, #28]
 8000c0a:	4a0e      	ldr	r2, [pc, #56]	; (8000c44 <HAL_MspInit+0x5c>)
 8000c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c10:	61d3      	str	r3, [r2, #28]
 8000c12:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <HAL_MspInit+0x5c>)
 8000c14:	69db      	ldr	r3, [r3, #28]
 8000c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <HAL_MspInit+0x60>)
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <HAL_MspInit+0x60>)
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	3714      	adds	r7, #20
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr
 8000c44:	40021000 	.word	0x40021000
 8000c48:	40010000 	.word	0x40010000

08000c4c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a0b      	ldr	r2, [pc, #44]	; (8000c88 <HAL_RTC_MspInit+0x3c>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d110      	bne.n	8000c80 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000c5e:	f000 fc11 	bl	8001484 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000c62:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <HAL_RTC_MspInit+0x40>)
 8000c64:	69db      	ldr	r3, [r3, #28]
 8000c66:	4a09      	ldr	r2, [pc, #36]	; (8000c8c <HAL_RTC_MspInit+0x40>)
 8000c68:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000c6c:	61d3      	str	r3, [r2, #28]
 8000c6e:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <HAL_RTC_MspInit+0x40>)
 8000c70:	69db      	ldr	r3, [r3, #28]
 8000c72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c7a:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <HAL_RTC_MspInit+0x44>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c80:	bf00      	nop
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40002800 	.word	0x40002800
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	4242043c 	.word	0x4242043c

08000c94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0d      	ldr	r2, [pc, #52]	; (8000cd8 <HAL_TIM_Base_MspInit+0x44>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d113      	bne.n	8000cce <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ca6:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <HAL_TIM_Base_MspInit+0x48>)
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	4a0c      	ldr	r2, [pc, #48]	; (8000cdc <HAL_TIM_Base_MspInit+0x48>)
 8000cac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cb0:	6193      	str	r3, [r2, #24]
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <HAL_TIM_Base_MspInit+0x48>)
 8000cb4:	699b      	ldr	r3, [r3, #24]
 8000cb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	2019      	movs	r0, #25
 8000cc4:	f000 f9f1 	bl	80010aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000cc8:	2019      	movs	r0, #25
 8000cca:	f000 fa0a 	bl	80010e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000cce:	bf00      	nop
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40012c00 	.word	0x40012c00
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b088      	sub	sp, #32
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0310 	add.w	r3, r7, #16
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a1c      	ldr	r2, [pc, #112]	; (8000d6c <HAL_UART_MspInit+0x8c>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d131      	bne.n	8000d64 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d00:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <HAL_UART_MspInit+0x90>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a1a      	ldr	r2, [pc, #104]	; (8000d70 <HAL_UART_MspInit+0x90>)
 8000d06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <HAL_UART_MspInit+0x90>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d18:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <HAL_UART_MspInit+0x90>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a14      	ldr	r2, [pc, #80]	; (8000d70 <HAL_UART_MspInit+0x90>)
 8000d1e:	f043 0304 	orr.w	r3, r3, #4
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <HAL_UART_MspInit+0x90>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f003 0304 	and.w	r3, r3, #4
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3e:	f107 0310 	add.w	r3, r7, #16
 8000d42:	4619      	mov	r1, r3
 8000d44:	480b      	ldr	r0, [pc, #44]	; (8000d74 <HAL_UART_MspInit+0x94>)
 8000d46:	f000 f9e7 	bl	8001118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d58:	f107 0310 	add.w	r3, r7, #16
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4805      	ldr	r0, [pc, #20]	; (8000d74 <HAL_UART_MspInit+0x94>)
 8000d60:	f000 f9da 	bl	8001118 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d64:	bf00      	nop
 8000d66:	3720      	adds	r7, #32
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40013800 	.word	0x40013800
 8000d70:	40021000 	.word	0x40021000
 8000d74:	40010800 	.word	0x40010800

08000d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr

08000d84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <HardFault_Handler+0x4>

08000d8a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <MemManage_Handler+0x4>

08000d90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <BusFault_Handler+0x4>

08000d96 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <UsageFault_Handler+0x4>

08000d9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr

08000da8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr

08000db4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc4:	f000 f87e 	bl	8000ec4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <TIM1_UP_IRQHandler+0x10>)
 8000dd2:	f001 ff4b 	bl	8002c6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200000ec 	.word	0x200000ec

08000de0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr

08000dec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000dec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000dee:	e003      	b.n	8000df8 <LoopCopyDataInit>

08000df0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000df0:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000df2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000df4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000df6:	3104      	adds	r1, #4

08000df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000df8:	480a      	ldr	r0, [pc, #40]	; (8000e24 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000dfc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000dfe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000e00:	d3f6      	bcc.n	8000df0 <CopyDataInit>
  ldr r2, =_sbss
 8000e02:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000e04:	e002      	b.n	8000e0c <LoopFillZerobss>

08000e06 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000e08:	f842 3b04 	str.w	r3, [r2], #4

08000e0c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000e0c:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000e0e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000e10:	d3f9      	bcc.n	8000e06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e12:	f7ff ffe5 	bl	8000de0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e16:	f002 fb5d 	bl	80034d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e1a:	f7ff faef 	bl	80003fc <main>
  bx lr
 8000e1e:	4770      	bx	lr
  ldr r3, =_sidata
 8000e20:	08003584 	.word	0x08003584
  ldr r0, =_sdata
 8000e24:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000e28:	20000018 	.word	0x20000018
  ldr r2, =_sbss
 8000e2c:	20000018 	.word	0x20000018
  ldr r3, = _ebss
 8000e30:	20000138 	.word	0x20000138

08000e34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e34:	e7fe      	b.n	8000e34 <ADC1_2_IRQHandler>
	...

08000e38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <HAL_Init+0x28>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a07      	ldr	r2, [pc, #28]	; (8000e60 <HAL_Init+0x28>)
 8000e42:	f043 0310 	orr.w	r3, r3, #16
 8000e46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e48:	2003      	movs	r0, #3
 8000e4a:	f000 f923 	bl	8001094 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f000 f808 	bl	8000e64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e54:	f7ff fec8 	bl	8000be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40022000 	.word	0x40022000

08000e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <HAL_InitTick+0x54>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <HAL_InitTick+0x58>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	4619      	mov	r1, r3
 8000e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 f93b 	bl	80010fe <HAL_SYSTICK_Config>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e00e      	b.n	8000eb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b0f      	cmp	r3, #15
 8000e96:	d80a      	bhi.n	8000eae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	6879      	ldr	r1, [r7, #4]
 8000e9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ea0:	f000 f903 	bl	80010aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea4:	4a06      	ldr	r2, [pc, #24]	; (8000ec0 <HAL_InitTick+0x5c>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	e000      	b.n	8000eb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	2000000c 	.word	0x2000000c
 8000ebc:	20000014 	.word	0x20000014
 8000ec0:	20000010 	.word	0x20000010

08000ec4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <HAL_IncTick+0x1c>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <HAL_IncTick+0x20>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	4a03      	ldr	r2, [pc, #12]	; (8000ee4 <HAL_IncTick+0x20>)
 8000ed6:	6013      	str	r3, [r2, #0]
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr
 8000ee0:	20000014 	.word	0x20000014
 8000ee4:	20000134 	.word	0x20000134

08000ee8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return uwTick;
 8000eec:	4b02      	ldr	r3, [pc, #8]	; (8000ef8 <HAL_GetTick+0x10>)
 8000eee:	681b      	ldr	r3, [r3, #0]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr
 8000ef8:	20000134 	.word	0x20000134

08000efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2e:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	60d3      	str	r3, [r2, #12]
}
 8000f34:	bf00      	nop
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <__NVIC_GetPriorityGrouping+0x18>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	0a1b      	lsrs	r3, r3, #8
 8000f4e:	f003 0307 	and.w	r3, r3, #7
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	db0b      	blt.n	8000f8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	f003 021f 	and.w	r2, r3, #31
 8000f78:	4906      	ldr	r1, [pc, #24]	; (8000f94 <__NVIC_EnableIRQ+0x34>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	095b      	lsrs	r3, r3, #5
 8000f80:	2001      	movs	r0, #1
 8000f82:	fa00 f202 	lsl.w	r2, r0, r2
 8000f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	e000e100 	.word	0xe000e100

08000f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	6039      	str	r1, [r7, #0]
 8000fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	db0a      	blt.n	8000fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	490c      	ldr	r1, [pc, #48]	; (8000fe4 <__NVIC_SetPriority+0x4c>)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	0112      	lsls	r2, r2, #4
 8000fb8:	b2d2      	uxtb	r2, r2
 8000fba:	440b      	add	r3, r1
 8000fbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc0:	e00a      	b.n	8000fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4908      	ldr	r1, [pc, #32]	; (8000fe8 <__NVIC_SetPriority+0x50>)
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	f003 030f 	and.w	r3, r3, #15
 8000fce:	3b04      	subs	r3, #4
 8000fd0:	0112      	lsls	r2, r2, #4
 8000fd2:	b2d2      	uxtb	r2, r2
 8000fd4:	440b      	add	r3, r1
 8000fd6:	761a      	strb	r2, [r3, #24]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000e100 	.word	0xe000e100
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	f1c3 0307 	rsb	r3, r3, #7
 8001006:	2b04      	cmp	r3, #4
 8001008:	bf28      	it	cs
 800100a:	2304      	movcs	r3, #4
 800100c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3304      	adds	r3, #4
 8001012:	2b06      	cmp	r3, #6
 8001014:	d902      	bls.n	800101c <NVIC_EncodePriority+0x30>
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3b03      	subs	r3, #3
 800101a:	e000      	b.n	800101e <NVIC_EncodePriority+0x32>
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43da      	mvns	r2, r3
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	401a      	ands	r2, r3
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001034:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	fa01 f303 	lsl.w	r3, r1, r3
 800103e:	43d9      	mvns	r1, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	4313      	orrs	r3, r2
         );
}
 8001046:	4618      	mov	r0, r3
 8001048:	3724      	adds	r7, #36	; 0x24
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr

08001050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001060:	d301      	bcc.n	8001066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001062:	2301      	movs	r3, #1
 8001064:	e00f      	b.n	8001086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001066:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <SysTick_Config+0x40>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106e:	210f      	movs	r1, #15
 8001070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001074:	f7ff ff90 	bl	8000f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <SysTick_Config+0x40>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107e:	4b04      	ldr	r3, [pc, #16]	; (8001090 <SysTick_Config+0x40>)
 8001080:	2207      	movs	r2, #7
 8001082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	e000e010 	.word	0xe000e010

08001094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff ff2d 	bl	8000efc <__NVIC_SetPriorityGrouping>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b086      	sub	sp, #24
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	4603      	mov	r3, r0
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
 80010b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010bc:	f7ff ff42 	bl	8000f44 <__NVIC_GetPriorityGrouping>
 80010c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	68b9      	ldr	r1, [r7, #8]
 80010c6:	6978      	ldr	r0, [r7, #20]
 80010c8:	f7ff ff90 	bl	8000fec <NVIC_EncodePriority>
 80010cc:	4602      	mov	r2, r0
 80010ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d2:	4611      	mov	r1, r2
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff5f 	bl	8000f98 <__NVIC_SetPriority>
}
 80010da:	bf00      	nop
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	4603      	mov	r3, r0
 80010ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff ff35 	bl	8000f60 <__NVIC_EnableIRQ>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff ffa2 	bl	8001050 <SysTick_Config>
 800110c:	4603      	mov	r3, r0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001118:	b480      	push	{r7}
 800111a:	b08b      	sub	sp, #44	; 0x2c
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001122:	2300      	movs	r3, #0
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001126:	2300      	movs	r3, #0
 8001128:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800112a:	e169      	b.n	8001400 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800112c:	2201      	movs	r2, #1
 800112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	69fa      	ldr	r2, [r7, #28]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	429a      	cmp	r2, r3
 8001146:	f040 8158 	bne.w	80013fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	4a9a      	ldr	r2, [pc, #616]	; (80013b8 <HAL_GPIO_Init+0x2a0>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d05e      	beq.n	8001212 <HAL_GPIO_Init+0xfa>
 8001154:	4a98      	ldr	r2, [pc, #608]	; (80013b8 <HAL_GPIO_Init+0x2a0>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d875      	bhi.n	8001246 <HAL_GPIO_Init+0x12e>
 800115a:	4a98      	ldr	r2, [pc, #608]	; (80013bc <HAL_GPIO_Init+0x2a4>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d058      	beq.n	8001212 <HAL_GPIO_Init+0xfa>
 8001160:	4a96      	ldr	r2, [pc, #600]	; (80013bc <HAL_GPIO_Init+0x2a4>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d86f      	bhi.n	8001246 <HAL_GPIO_Init+0x12e>
 8001166:	4a96      	ldr	r2, [pc, #600]	; (80013c0 <HAL_GPIO_Init+0x2a8>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d052      	beq.n	8001212 <HAL_GPIO_Init+0xfa>
 800116c:	4a94      	ldr	r2, [pc, #592]	; (80013c0 <HAL_GPIO_Init+0x2a8>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d869      	bhi.n	8001246 <HAL_GPIO_Init+0x12e>
 8001172:	4a94      	ldr	r2, [pc, #592]	; (80013c4 <HAL_GPIO_Init+0x2ac>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d04c      	beq.n	8001212 <HAL_GPIO_Init+0xfa>
 8001178:	4a92      	ldr	r2, [pc, #584]	; (80013c4 <HAL_GPIO_Init+0x2ac>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d863      	bhi.n	8001246 <HAL_GPIO_Init+0x12e>
 800117e:	4a92      	ldr	r2, [pc, #584]	; (80013c8 <HAL_GPIO_Init+0x2b0>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d046      	beq.n	8001212 <HAL_GPIO_Init+0xfa>
 8001184:	4a90      	ldr	r2, [pc, #576]	; (80013c8 <HAL_GPIO_Init+0x2b0>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d85d      	bhi.n	8001246 <HAL_GPIO_Init+0x12e>
 800118a:	2b12      	cmp	r3, #18
 800118c:	d82a      	bhi.n	80011e4 <HAL_GPIO_Init+0xcc>
 800118e:	2b12      	cmp	r3, #18
 8001190:	d859      	bhi.n	8001246 <HAL_GPIO_Init+0x12e>
 8001192:	a201      	add	r2, pc, #4	; (adr r2, 8001198 <HAL_GPIO_Init+0x80>)
 8001194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001198:	08001213 	.word	0x08001213
 800119c:	080011ed 	.word	0x080011ed
 80011a0:	080011ff 	.word	0x080011ff
 80011a4:	08001241 	.word	0x08001241
 80011a8:	08001247 	.word	0x08001247
 80011ac:	08001247 	.word	0x08001247
 80011b0:	08001247 	.word	0x08001247
 80011b4:	08001247 	.word	0x08001247
 80011b8:	08001247 	.word	0x08001247
 80011bc:	08001247 	.word	0x08001247
 80011c0:	08001247 	.word	0x08001247
 80011c4:	08001247 	.word	0x08001247
 80011c8:	08001247 	.word	0x08001247
 80011cc:	08001247 	.word	0x08001247
 80011d0:	08001247 	.word	0x08001247
 80011d4:	08001247 	.word	0x08001247
 80011d8:	08001247 	.word	0x08001247
 80011dc:	080011f5 	.word	0x080011f5
 80011e0:	08001209 	.word	0x08001209
 80011e4:	4a79      	ldr	r2, [pc, #484]	; (80013cc <HAL_GPIO_Init+0x2b4>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d013      	beq.n	8001212 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011ea:	e02c      	b.n	8001246 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	623b      	str	r3, [r7, #32]
          break;
 80011f2:	e029      	b.n	8001248 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	3304      	adds	r3, #4
 80011fa:	623b      	str	r3, [r7, #32]
          break;
 80011fc:	e024      	b.n	8001248 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	3308      	adds	r3, #8
 8001204:	623b      	str	r3, [r7, #32]
          break;
 8001206:	e01f      	b.n	8001248 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	330c      	adds	r3, #12
 800120e:	623b      	str	r3, [r7, #32]
          break;
 8001210:	e01a      	b.n	8001248 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d102      	bne.n	8001220 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800121a:	2304      	movs	r3, #4
 800121c:	623b      	str	r3, [r7, #32]
          break;
 800121e:	e013      	b.n	8001248 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d105      	bne.n	8001234 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001228:	2308      	movs	r3, #8
 800122a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	69fa      	ldr	r2, [r7, #28]
 8001230:	611a      	str	r2, [r3, #16]
          break;
 8001232:	e009      	b.n	8001248 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001234:	2308      	movs	r3, #8
 8001236:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69fa      	ldr	r2, [r7, #28]
 800123c:	615a      	str	r2, [r3, #20]
          break;
 800123e:	e003      	b.n	8001248 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001240:	2300      	movs	r3, #0
 8001242:	623b      	str	r3, [r7, #32]
          break;
 8001244:	e000      	b.n	8001248 <HAL_GPIO_Init+0x130>
          break;
 8001246:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	2bff      	cmp	r3, #255	; 0xff
 800124c:	d801      	bhi.n	8001252 <HAL_GPIO_Init+0x13a>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	e001      	b.n	8001256 <HAL_GPIO_Init+0x13e>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3304      	adds	r3, #4
 8001256:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	2bff      	cmp	r3, #255	; 0xff
 800125c:	d802      	bhi.n	8001264 <HAL_GPIO_Init+0x14c>
 800125e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	e002      	b.n	800126a <HAL_GPIO_Init+0x152>
 8001264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001266:	3b08      	subs	r3, #8
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	210f      	movs	r1, #15
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	fa01 f303 	lsl.w	r3, r1, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	401a      	ands	r2, r3
 800127c:	6a39      	ldr	r1, [r7, #32]
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	fa01 f303 	lsl.w	r3, r1, r3
 8001284:	431a      	orrs	r2, r3
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001292:	2b00      	cmp	r3, #0
 8001294:	f000 80b1 	beq.w	80013fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001298:	4b4d      	ldr	r3, [pc, #308]	; (80013d0 <HAL_GPIO_Init+0x2b8>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	4a4c      	ldr	r2, [pc, #304]	; (80013d0 <HAL_GPIO_Init+0x2b8>)
 800129e:	f043 0301 	orr.w	r3, r3, #1
 80012a2:	6193      	str	r3, [r2, #24]
 80012a4:	4b4a      	ldr	r3, [pc, #296]	; (80013d0 <HAL_GPIO_Init+0x2b8>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012b0:	4a48      	ldr	r2, [pc, #288]	; (80013d4 <HAL_GPIO_Init+0x2bc>)
 80012b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b4:	089b      	lsrs	r3, r3, #2
 80012b6:	3302      	adds	r3, #2
 80012b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c0:	f003 0303 	and.w	r3, r3, #3
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	220f      	movs	r2, #15
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	4013      	ands	r3, r2
 80012d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a40      	ldr	r2, [pc, #256]	; (80013d8 <HAL_GPIO_Init+0x2c0>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d013      	beq.n	8001304 <HAL_GPIO_Init+0x1ec>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a3f      	ldr	r2, [pc, #252]	; (80013dc <HAL_GPIO_Init+0x2c4>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d00d      	beq.n	8001300 <HAL_GPIO_Init+0x1e8>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a3e      	ldr	r2, [pc, #248]	; (80013e0 <HAL_GPIO_Init+0x2c8>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d007      	beq.n	80012fc <HAL_GPIO_Init+0x1e4>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a3d      	ldr	r2, [pc, #244]	; (80013e4 <HAL_GPIO_Init+0x2cc>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d101      	bne.n	80012f8 <HAL_GPIO_Init+0x1e0>
 80012f4:	2303      	movs	r3, #3
 80012f6:	e006      	b.n	8001306 <HAL_GPIO_Init+0x1ee>
 80012f8:	2304      	movs	r3, #4
 80012fa:	e004      	b.n	8001306 <HAL_GPIO_Init+0x1ee>
 80012fc:	2302      	movs	r3, #2
 80012fe:	e002      	b.n	8001306 <HAL_GPIO_Init+0x1ee>
 8001300:	2301      	movs	r3, #1
 8001302:	e000      	b.n	8001306 <HAL_GPIO_Init+0x1ee>
 8001304:	2300      	movs	r3, #0
 8001306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001308:	f002 0203 	and.w	r2, r2, #3
 800130c:	0092      	lsls	r2, r2, #2
 800130e:	4093      	lsls	r3, r2
 8001310:	68fa      	ldr	r2, [r7, #12]
 8001312:	4313      	orrs	r3, r2
 8001314:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001316:	492f      	ldr	r1, [pc, #188]	; (80013d4 <HAL_GPIO_Init+0x2bc>)
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	089b      	lsrs	r3, r3, #2
 800131c:	3302      	adds	r3, #2
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d006      	beq.n	800133e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001330:	4b2d      	ldr	r3, [pc, #180]	; (80013e8 <HAL_GPIO_Init+0x2d0>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	492c      	ldr	r1, [pc, #176]	; (80013e8 <HAL_GPIO_Init+0x2d0>)
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	4313      	orrs	r3, r2
 800133a:	600b      	str	r3, [r1, #0]
 800133c:	e006      	b.n	800134c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800133e:	4b2a      	ldr	r3, [pc, #168]	; (80013e8 <HAL_GPIO_Init+0x2d0>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	43db      	mvns	r3, r3
 8001346:	4928      	ldr	r1, [pc, #160]	; (80013e8 <HAL_GPIO_Init+0x2d0>)
 8001348:	4013      	ands	r3, r2
 800134a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d006      	beq.n	8001366 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001358:	4b23      	ldr	r3, [pc, #140]	; (80013e8 <HAL_GPIO_Init+0x2d0>)
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	4922      	ldr	r1, [pc, #136]	; (80013e8 <HAL_GPIO_Init+0x2d0>)
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	4313      	orrs	r3, r2
 8001362:	604b      	str	r3, [r1, #4]
 8001364:	e006      	b.n	8001374 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001366:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <HAL_GPIO_Init+0x2d0>)
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	43db      	mvns	r3, r3
 800136e:	491e      	ldr	r1, [pc, #120]	; (80013e8 <HAL_GPIO_Init+0x2d0>)
 8001370:	4013      	ands	r3, r2
 8001372:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d006      	beq.n	800138e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001380:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <HAL_GPIO_Init+0x2d0>)
 8001382:	689a      	ldr	r2, [r3, #8]
 8001384:	4918      	ldr	r1, [pc, #96]	; (80013e8 <HAL_GPIO_Init+0x2d0>)
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	4313      	orrs	r3, r2
 800138a:	608b      	str	r3, [r1, #8]
 800138c:	e006      	b.n	800139c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800138e:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <HAL_GPIO_Init+0x2d0>)
 8001390:	689a      	ldr	r2, [r3, #8]
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	43db      	mvns	r3, r3
 8001396:	4914      	ldr	r1, [pc, #80]	; (80013e8 <HAL_GPIO_Init+0x2d0>)
 8001398:	4013      	ands	r3, r2
 800139a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d021      	beq.n	80013ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013a8:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <HAL_GPIO_Init+0x2d0>)
 80013aa:	68da      	ldr	r2, [r3, #12]
 80013ac:	490e      	ldr	r1, [pc, #56]	; (80013e8 <HAL_GPIO_Init+0x2d0>)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	60cb      	str	r3, [r1, #12]
 80013b4:	e021      	b.n	80013fa <HAL_GPIO_Init+0x2e2>
 80013b6:	bf00      	nop
 80013b8:	10320000 	.word	0x10320000
 80013bc:	10310000 	.word	0x10310000
 80013c0:	10220000 	.word	0x10220000
 80013c4:	10210000 	.word	0x10210000
 80013c8:	10120000 	.word	0x10120000
 80013cc:	10110000 	.word	0x10110000
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40010000 	.word	0x40010000
 80013d8:	40010800 	.word	0x40010800
 80013dc:	40010c00 	.word	0x40010c00
 80013e0:	40011000 	.word	0x40011000
 80013e4:	40011400 	.word	0x40011400
 80013e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013ec:	4b0b      	ldr	r3, [pc, #44]	; (800141c <HAL_GPIO_Init+0x304>)
 80013ee:	68da      	ldr	r2, [r3, #12]
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	43db      	mvns	r3, r3
 80013f4:	4909      	ldr	r1, [pc, #36]	; (800141c <HAL_GPIO_Init+0x304>)
 80013f6:	4013      	ands	r3, r2
 80013f8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80013fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fc:	3301      	adds	r3, #1
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001406:	fa22 f303 	lsr.w	r3, r2, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	f47f ae8e 	bne.w	800112c <HAL_GPIO_Init+0x14>
  }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	372c      	adds	r7, #44	; 0x2c
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr
 800141c:	40010400 	.word	0x40010400

08001420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	807b      	strh	r3, [r7, #2]
 800142c:	4613      	mov	r3, r2
 800142e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001430:	787b      	ldrb	r3, [r7, #1]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001436:	887a      	ldrh	r2, [r7, #2]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800143c:	e003      	b.n	8001446 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800143e:	887b      	ldrh	r3, [r7, #2]
 8001440:	041a      	lsls	r2, r3, #16
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	611a      	str	r2, [r3, #16]
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr

08001450 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001462:	887a      	ldrh	r2, [r7, #2]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4013      	ands	r3, r2
 8001468:	041a      	lsls	r2, r3, #16
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	43d9      	mvns	r1, r3
 800146e:	887b      	ldrh	r3, [r7, #2]
 8001470:	400b      	ands	r3, r1
 8001472:	431a      	orrs	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	611a      	str	r2, [r3, #16]
}
 8001478:	bf00      	nop
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr
	...

08001484 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001488:	4b03      	ldr	r3, [pc, #12]	; (8001498 <HAL_PWR_EnableBkUpAccess+0x14>)
 800148a:	2201      	movs	r2, #1
 800148c:	601a      	str	r2, [r3, #0]
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	420e0020 	.word	0x420e0020

0800149c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e26c      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f000 8087 	beq.w	80015ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014bc:	4b92      	ldr	r3, [pc, #584]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 030c 	and.w	r3, r3, #12
 80014c4:	2b04      	cmp	r3, #4
 80014c6:	d00c      	beq.n	80014e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014c8:	4b8f      	ldr	r3, [pc, #572]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f003 030c 	and.w	r3, r3, #12
 80014d0:	2b08      	cmp	r3, #8
 80014d2:	d112      	bne.n	80014fa <HAL_RCC_OscConfig+0x5e>
 80014d4:	4b8c      	ldr	r3, [pc, #560]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014e0:	d10b      	bne.n	80014fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e2:	4b89      	ldr	r3, [pc, #548]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d06c      	beq.n	80015c8 <HAL_RCC_OscConfig+0x12c>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d168      	bne.n	80015c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e246      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001502:	d106      	bne.n	8001512 <HAL_RCC_OscConfig+0x76>
 8001504:	4b80      	ldr	r3, [pc, #512]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a7f      	ldr	r2, [pc, #508]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 800150a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800150e:	6013      	str	r3, [r2, #0]
 8001510:	e02e      	b.n	8001570 <HAL_RCC_OscConfig+0xd4>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10c      	bne.n	8001534 <HAL_RCC_OscConfig+0x98>
 800151a:	4b7b      	ldr	r3, [pc, #492]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a7a      	ldr	r2, [pc, #488]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	4b78      	ldr	r3, [pc, #480]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a77      	ldr	r2, [pc, #476]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 800152c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001530:	6013      	str	r3, [r2, #0]
 8001532:	e01d      	b.n	8001570 <HAL_RCC_OscConfig+0xd4>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800153c:	d10c      	bne.n	8001558 <HAL_RCC_OscConfig+0xbc>
 800153e:	4b72      	ldr	r3, [pc, #456]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a71      	ldr	r2, [pc, #452]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	4b6f      	ldr	r3, [pc, #444]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a6e      	ldr	r2, [pc, #440]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	e00b      	b.n	8001570 <HAL_RCC_OscConfig+0xd4>
 8001558:	4b6b      	ldr	r3, [pc, #428]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a6a      	ldr	r2, [pc, #424]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 800155e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	4b68      	ldr	r3, [pc, #416]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a67      	ldr	r2, [pc, #412]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 800156a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800156e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d013      	beq.n	80015a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001578:	f7ff fcb6 	bl	8000ee8 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001580:	f7ff fcb2 	bl	8000ee8 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b64      	cmp	r3, #100	; 0x64
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e1fa      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001592:	4b5d      	ldr	r3, [pc, #372]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0f0      	beq.n	8001580 <HAL_RCC_OscConfig+0xe4>
 800159e:	e014      	b.n	80015ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a0:	f7ff fca2 	bl	8000ee8 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015a8:	f7ff fc9e 	bl	8000ee8 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b64      	cmp	r3, #100	; 0x64
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e1e6      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ba:	4b53      	ldr	r3, [pc, #332]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f0      	bne.n	80015a8 <HAL_RCC_OscConfig+0x10c>
 80015c6:	e000      	b.n	80015ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d063      	beq.n	800169e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015d6:	4b4c      	ldr	r3, [pc, #304]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 030c 	and.w	r3, r3, #12
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00b      	beq.n	80015fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015e2:	4b49      	ldr	r3, [pc, #292]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f003 030c 	and.w	r3, r3, #12
 80015ea:	2b08      	cmp	r3, #8
 80015ec:	d11c      	bne.n	8001628 <HAL_RCC_OscConfig+0x18c>
 80015ee:	4b46      	ldr	r3, [pc, #280]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d116      	bne.n	8001628 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015fa:	4b43      	ldr	r3, [pc, #268]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d005      	beq.n	8001612 <HAL_RCC_OscConfig+0x176>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d001      	beq.n	8001612 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e1ba      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001612:	4b3d      	ldr	r3, [pc, #244]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	4939      	ldr	r1, [pc, #228]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001622:	4313      	orrs	r3, r2
 8001624:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001626:	e03a      	b.n	800169e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d020      	beq.n	8001672 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001630:	4b36      	ldr	r3, [pc, #216]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001632:	2201      	movs	r2, #1
 8001634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001636:	f7ff fc57 	bl	8000ee8 <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800163e:	f7ff fc53 	bl	8000ee8 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e19b      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001650:	4b2d      	ldr	r3, [pc, #180]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0f0      	beq.n	800163e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165c:	4b2a      	ldr	r3, [pc, #168]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	4927      	ldr	r1, [pc, #156]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 800166c:	4313      	orrs	r3, r2
 800166e:	600b      	str	r3, [r1, #0]
 8001670:	e015      	b.n	800169e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001672:	4b26      	ldr	r3, [pc, #152]	; (800170c <HAL_RCC_OscConfig+0x270>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001678:	f7ff fc36 	bl	8000ee8 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001680:	f7ff fc32 	bl	8000ee8 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e17a      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001692:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0308 	and.w	r3, r3, #8
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d03a      	beq.n	8001720 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d019      	beq.n	80016e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016b2:	4b17      	ldr	r3, [pc, #92]	; (8001710 <HAL_RCC_OscConfig+0x274>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b8:	f7ff fc16 	bl	8000ee8 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c0:	f7ff fc12 	bl	8000ee8 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e15a      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d2:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0f0      	beq.n	80016c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016de:	2001      	movs	r0, #1
 80016e0:	f000 fad8 	bl	8001c94 <RCC_Delay>
 80016e4:	e01c      	b.n	8001720 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016e6:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <HAL_RCC_OscConfig+0x274>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ec:	f7ff fbfc 	bl	8000ee8 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f2:	e00f      	b.n	8001714 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016f4:	f7ff fbf8 	bl	8000ee8 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d908      	bls.n	8001714 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e140      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
 8001706:	bf00      	nop
 8001708:	40021000 	.word	0x40021000
 800170c:	42420000 	.word	0x42420000
 8001710:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001714:	4b9e      	ldr	r3, [pc, #632]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 8001716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1e9      	bne.n	80016f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 80a6 	beq.w	800187a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800172e:	2300      	movs	r3, #0
 8001730:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001732:	4b97      	ldr	r3, [pc, #604]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d10d      	bne.n	800175a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800173e:	4b94      	ldr	r3, [pc, #592]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	4a93      	ldr	r2, [pc, #588]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 8001744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001748:	61d3      	str	r3, [r2, #28]
 800174a:	4b91      	ldr	r3, [pc, #580]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001756:	2301      	movs	r3, #1
 8001758:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800175a:	4b8e      	ldr	r3, [pc, #568]	; (8001994 <HAL_RCC_OscConfig+0x4f8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001762:	2b00      	cmp	r3, #0
 8001764:	d118      	bne.n	8001798 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001766:	4b8b      	ldr	r3, [pc, #556]	; (8001994 <HAL_RCC_OscConfig+0x4f8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a8a      	ldr	r2, [pc, #552]	; (8001994 <HAL_RCC_OscConfig+0x4f8>)
 800176c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001770:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001772:	f7ff fbb9 	bl	8000ee8 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800177a:	f7ff fbb5 	bl	8000ee8 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b64      	cmp	r3, #100	; 0x64
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e0fd      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800178c:	4b81      	ldr	r3, [pc, #516]	; (8001994 <HAL_RCC_OscConfig+0x4f8>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0f0      	beq.n	800177a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d106      	bne.n	80017ae <HAL_RCC_OscConfig+0x312>
 80017a0:	4b7b      	ldr	r3, [pc, #492]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	4a7a      	ldr	r2, [pc, #488]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	6213      	str	r3, [r2, #32]
 80017ac:	e02d      	b.n	800180a <HAL_RCC_OscConfig+0x36e>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d10c      	bne.n	80017d0 <HAL_RCC_OscConfig+0x334>
 80017b6:	4b76      	ldr	r3, [pc, #472]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	4a75      	ldr	r2, [pc, #468]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80017bc:	f023 0301 	bic.w	r3, r3, #1
 80017c0:	6213      	str	r3, [r2, #32]
 80017c2:	4b73      	ldr	r3, [pc, #460]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	4a72      	ldr	r2, [pc, #456]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80017c8:	f023 0304 	bic.w	r3, r3, #4
 80017cc:	6213      	str	r3, [r2, #32]
 80017ce:	e01c      	b.n	800180a <HAL_RCC_OscConfig+0x36e>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	2b05      	cmp	r3, #5
 80017d6:	d10c      	bne.n	80017f2 <HAL_RCC_OscConfig+0x356>
 80017d8:	4b6d      	ldr	r3, [pc, #436]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	4a6c      	ldr	r2, [pc, #432]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80017de:	f043 0304 	orr.w	r3, r3, #4
 80017e2:	6213      	str	r3, [r2, #32]
 80017e4:	4b6a      	ldr	r3, [pc, #424]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	4a69      	ldr	r2, [pc, #420]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	6213      	str	r3, [r2, #32]
 80017f0:	e00b      	b.n	800180a <HAL_RCC_OscConfig+0x36e>
 80017f2:	4b67      	ldr	r3, [pc, #412]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	4a66      	ldr	r2, [pc, #408]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80017f8:	f023 0301 	bic.w	r3, r3, #1
 80017fc:	6213      	str	r3, [r2, #32]
 80017fe:	4b64      	ldr	r3, [pc, #400]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	4a63      	ldr	r2, [pc, #396]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 8001804:	f023 0304 	bic.w	r3, r3, #4
 8001808:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d015      	beq.n	800183e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001812:	f7ff fb69 	bl	8000ee8 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001818:	e00a      	b.n	8001830 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800181a:	f7ff fb65 	bl	8000ee8 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	f241 3288 	movw	r2, #5000	; 0x1388
 8001828:	4293      	cmp	r3, r2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e0ab      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001830:	4b57      	ldr	r3, [pc, #348]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 8001832:	6a1b      	ldr	r3, [r3, #32]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0ee      	beq.n	800181a <HAL_RCC_OscConfig+0x37e>
 800183c:	e014      	b.n	8001868 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800183e:	f7ff fb53 	bl	8000ee8 <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001844:	e00a      	b.n	800185c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001846:	f7ff fb4f 	bl	8000ee8 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	f241 3288 	movw	r2, #5000	; 0x1388
 8001854:	4293      	cmp	r3, r2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e095      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800185c:	4b4c      	ldr	r3, [pc, #304]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	f003 0302 	and.w	r3, r3, #2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1ee      	bne.n	8001846 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001868:	7dfb      	ldrb	r3, [r7, #23]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d105      	bne.n	800187a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800186e:	4b48      	ldr	r3, [pc, #288]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	4a47      	ldr	r2, [pc, #284]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 8001874:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001878:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	2b00      	cmp	r3, #0
 8001880:	f000 8081 	beq.w	8001986 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001884:	4b42      	ldr	r3, [pc, #264]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 030c 	and.w	r3, r3, #12
 800188c:	2b08      	cmp	r3, #8
 800188e:	d061      	beq.n	8001954 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	69db      	ldr	r3, [r3, #28]
 8001894:	2b02      	cmp	r3, #2
 8001896:	d146      	bne.n	8001926 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001898:	4b3f      	ldr	r3, [pc, #252]	; (8001998 <HAL_RCC_OscConfig+0x4fc>)
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189e:	f7ff fb23 	bl	8000ee8 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a6:	f7ff fb1f 	bl	8000ee8 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e067      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018b8:	4b35      	ldr	r3, [pc, #212]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1f0      	bne.n	80018a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018cc:	d108      	bne.n	80018e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018ce:	4b30      	ldr	r3, [pc, #192]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	492d      	ldr	r1, [pc, #180]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018e0:	4b2b      	ldr	r3, [pc, #172]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a19      	ldr	r1, [r3, #32]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	430b      	orrs	r3, r1
 80018f2:	4927      	ldr	r1, [pc, #156]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018f8:	4b27      	ldr	r3, [pc, #156]	; (8001998 <HAL_RCC_OscConfig+0x4fc>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fe:	f7ff faf3 	bl	8000ee8 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001906:	f7ff faef 	bl	8000ee8 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e037      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001918:	4b1d      	ldr	r3, [pc, #116]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0f0      	beq.n	8001906 <HAL_RCC_OscConfig+0x46a>
 8001924:	e02f      	b.n	8001986 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001926:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <HAL_RCC_OscConfig+0x4fc>)
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192c:	f7ff fadc 	bl	8000ee8 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001934:	f7ff fad8 	bl	8000ee8 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e020      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001946:	4b12      	ldr	r3, [pc, #72]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f0      	bne.n	8001934 <HAL_RCC_OscConfig+0x498>
 8001952:	e018      	b.n	8001986 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d101      	bne.n	8001960 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e013      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <HAL_RCC_OscConfig+0x4f4>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	429a      	cmp	r2, r3
 8001972:	d106      	bne.n	8001982 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800197e:	429a      	cmp	r2, r3
 8001980:	d001      	beq.n	8001986 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40021000 	.word	0x40021000
 8001994:	40007000 	.word	0x40007000
 8001998:	42420060 	.word	0x42420060

0800199c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d101      	bne.n	80019b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e0d0      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019b0:	4b6a      	ldr	r3, [pc, #424]	; (8001b5c <HAL_RCC_ClockConfig+0x1c0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d910      	bls.n	80019e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019be:	4b67      	ldr	r3, [pc, #412]	; (8001b5c <HAL_RCC_ClockConfig+0x1c0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f023 0207 	bic.w	r2, r3, #7
 80019c6:	4965      	ldr	r1, [pc, #404]	; (8001b5c <HAL_RCC_ClockConfig+0x1c0>)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ce:	4b63      	ldr	r3, [pc, #396]	; (8001b5c <HAL_RCC_ClockConfig+0x1c0>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d001      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e0b8      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d020      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d005      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019f8:	4b59      	ldr	r3, [pc, #356]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	4a58      	ldr	r2, [pc, #352]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 80019fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0308 	and.w	r3, r3, #8
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a10:	4b53      	ldr	r3, [pc, #332]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	4a52      	ldr	r2, [pc, #328]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a16:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a1c:	4b50      	ldr	r3, [pc, #320]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	494d      	ldr	r1, [pc, #308]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d040      	beq.n	8001abc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d107      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a42:	4b47      	ldr	r3, [pc, #284]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d115      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e07f      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d107      	bne.n	8001a6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a5a:	4b41      	ldr	r3, [pc, #260]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d109      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e073      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a6a:	4b3d      	ldr	r3, [pc, #244]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e06b      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a7a:	4b39      	ldr	r3, [pc, #228]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f023 0203 	bic.w	r2, r3, #3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	4936      	ldr	r1, [pc, #216]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a8c:	f7ff fa2c 	bl	8000ee8 <HAL_GetTick>
 8001a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a92:	e00a      	b.n	8001aaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a94:	f7ff fa28 	bl	8000ee8 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e053      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aaa:	4b2d      	ldr	r3, [pc, #180]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 020c 	and.w	r2, r3, #12
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d1eb      	bne.n	8001a94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001abc:	4b27      	ldr	r3, [pc, #156]	; (8001b5c <HAL_RCC_ClockConfig+0x1c0>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d210      	bcs.n	8001aec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aca:	4b24      	ldr	r3, [pc, #144]	; (8001b5c <HAL_RCC_ClockConfig+0x1c0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f023 0207 	bic.w	r2, r3, #7
 8001ad2:	4922      	ldr	r1, [pc, #136]	; (8001b5c <HAL_RCC_ClockConfig+0x1c0>)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ada:	4b20      	ldr	r3, [pc, #128]	; (8001b5c <HAL_RCC_ClockConfig+0x1c0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d001      	beq.n	8001aec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e032      	b.n	8001b52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d008      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af8:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	4916      	ldr	r1, [pc, #88]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d009      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b16:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	490e      	ldr	r1, [pc, #56]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b2a:	f000 f821 	bl	8001b70 <HAL_RCC_GetSysClockFreq>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <HAL_RCC_ClockConfig+0x1c4>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	091b      	lsrs	r3, r3, #4
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	490a      	ldr	r1, [pc, #40]	; (8001b64 <HAL_RCC_ClockConfig+0x1c8>)
 8001b3c:	5ccb      	ldrb	r3, [r1, r3]
 8001b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b42:	4a09      	ldr	r2, [pc, #36]	; (8001b68 <HAL_RCC_ClockConfig+0x1cc>)
 8001b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <HAL_RCC_ClockConfig+0x1d0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff f98a 	bl	8000e64 <HAL_InitTick>

  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40022000 	.word	0x40022000
 8001b60:	40021000 	.word	0x40021000
 8001b64:	08003564 	.word	0x08003564
 8001b68:	2000000c 	.word	0x2000000c
 8001b6c:	20000010 	.word	0x20000010

08001b70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b70:	b490      	push	{r4, r7}
 8001b72:	b08a      	sub	sp, #40	; 0x28
 8001b74:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b76:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b78:	1d3c      	adds	r4, r7, #4
 8001b7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b80:	f240 2301 	movw	r3, #513	; 0x201
 8001b84:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61bb      	str	r3, [r7, #24]
 8001b8e:	2300      	movs	r3, #0
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b9a:	4b22      	ldr	r3, [pc, #136]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	d002      	beq.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x40>
 8001baa:	2b08      	cmp	r3, #8
 8001bac:	d003      	beq.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x46>
 8001bae:	e02d      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bb0:	4b1d      	ldr	r3, [pc, #116]	; (8001c28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bb2:	623b      	str	r3, [r7, #32]
      break;
 8001bb4:	e02d      	b.n	8001c12 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	0c9b      	lsrs	r3, r3, #18
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001bc2:	4413      	add	r3, r2
 8001bc4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001bc8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d013      	beq.n	8001bfc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bd4:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	0c5b      	lsrs	r3, r3, #17
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001be2:	4413      	add	r3, r2
 8001be4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001be8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	4a0e      	ldr	r2, [pc, #56]	; (8001c28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bee:	fb02 f203 	mul.w	r2, r2, r3
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bfa:	e004      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	4a0b      	ldr	r2, [pc, #44]	; (8001c2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c00:	fb02 f303 	mul.w	r3, r2, r3
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	623b      	str	r3, [r7, #32]
      break;
 8001c0a:	e002      	b.n	8001c12 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c0e:	623b      	str	r3, [r7, #32]
      break;
 8001c10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c12:	6a3b      	ldr	r3, [r7, #32]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3728      	adds	r7, #40	; 0x28
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc90      	pop	{r4, r7}
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	08003544 	.word	0x08003544
 8001c24:	40021000 	.word	0x40021000
 8001c28:	007a1200 	.word	0x007a1200
 8001c2c:	003d0900 	.word	0x003d0900

08001c30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c34:	4b02      	ldr	r3, [pc, #8]	; (8001c40 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c36:	681b      	ldr	r3, [r3, #0]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr
 8001c40:	2000000c 	.word	0x2000000c

08001c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c48:	f7ff fff2 	bl	8001c30 <HAL_RCC_GetHCLKFreq>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	0a1b      	lsrs	r3, r3, #8
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	4903      	ldr	r1, [pc, #12]	; (8001c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c5a:	5ccb      	ldrb	r3, [r1, r3]
 8001c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40021000 	.word	0x40021000
 8001c68:	08003574 	.word	0x08003574

08001c6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c70:	f7ff ffde 	bl	8001c30 <HAL_RCC_GetHCLKFreq>
 8001c74:	4602      	mov	r2, r0
 8001c76:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	0adb      	lsrs	r3, r3, #11
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	4903      	ldr	r1, [pc, #12]	; (8001c90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c82:	5ccb      	ldrb	r3, [r1, r3]
 8001c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	08003574 	.word	0x08003574

08001c94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c9c:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <RCC_Delay+0x34>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a0a      	ldr	r2, [pc, #40]	; (8001ccc <RCC_Delay+0x38>)
 8001ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca6:	0a5b      	lsrs	r3, r3, #9
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	fb02 f303 	mul.w	r3, r2, r3
 8001cae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001cb0:	bf00      	nop
  }
  while (Delay --);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	1e5a      	subs	r2, r3, #1
 8001cb6:	60fa      	str	r2, [r7, #12]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1f9      	bne.n	8001cb0 <RCC_Delay+0x1c>
}
 8001cbc:	bf00      	nop
 8001cbe:	bf00      	nop
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr
 8001cc8:	2000000c 	.word	0x2000000c
 8001ccc:	10624dd3 	.word	0x10624dd3

08001cd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d07d      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001cec:	2300      	movs	r3, #0
 8001cee:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cf0:	4b4f      	ldr	r3, [pc, #316]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d10d      	bne.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cfc:	4b4c      	ldr	r3, [pc, #304]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	4a4b      	ldr	r2, [pc, #300]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d06:	61d3      	str	r3, [r2, #28]
 8001d08:	4b49      	ldr	r3, [pc, #292]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d14:	2301      	movs	r3, #1
 8001d16:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d18:	4b46      	ldr	r3, [pc, #280]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d118      	bne.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d24:	4b43      	ldr	r3, [pc, #268]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a42      	ldr	r2, [pc, #264]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d30:	f7ff f8da 	bl	8000ee8 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d36:	e008      	b.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d38:	f7ff f8d6 	bl	8000ee8 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b64      	cmp	r3, #100	; 0x64
 8001d44:	d901      	bls.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e06d      	b.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4a:	4b3a      	ldr	r3, [pc, #232]	; (8001e34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0f0      	beq.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d56:	4b36      	ldr	r3, [pc, #216]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d5e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d02e      	beq.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d027      	beq.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d74:	4b2e      	ldr	r3, [pc, #184]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d7c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d7e:	4b2e      	ldr	r3, [pc, #184]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d80:	2201      	movs	r2, #1
 8001d82:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d84:	4b2c      	ldr	r3, [pc, #176]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d8a:	4a29      	ldr	r2, [pc, #164]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d014      	beq.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9a:	f7ff f8a5 	bl	8000ee8 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da0:	e00a      	b.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da2:	f7ff f8a1 	bl	8000ee8 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e036      	b.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db8:	4b1d      	ldr	r3, [pc, #116]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0ee      	beq.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dc4:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	4917      	ldr	r1, [pc, #92]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dd6:	7dfb      	ldrb	r3, [r7, #23]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d105      	bne.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ddc:	4b14      	ldr	r3, [pc, #80]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	4a13      	ldr	r2, [pc, #76]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001de2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001de6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d008      	beq.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001df4:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	490b      	ldr	r1, [pc, #44]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0310 	and.w	r3, r3, #16
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d008      	beq.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e12:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	4904      	ldr	r1, [pc, #16]	; (8001e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40021000 	.word	0x40021000
 8001e34:	40007000 	.word	0x40007000
 8001e38:	42420440 	.word	0x42420440

08001e3c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001e3c:	b590      	push	{r4, r7, lr}
 8001e3e:	b08d      	sub	sp, #52	; 0x34
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e44:	4b5a      	ldr	r3, [pc, #360]	; (8001fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001e46:	f107 040c 	add.w	r4, r7, #12
 8001e4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e50:	f240 2301 	movw	r3, #513	; 0x201
 8001e54:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e5e:	2300      	movs	r3, #0
 8001e60:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
 8001e66:	2300      	movs	r3, #0
 8001e68:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b10      	cmp	r3, #16
 8001e6e:	d00a      	beq.n	8001e86 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b10      	cmp	r3, #16
 8001e74:	f200 8091 	bhi.w	8001f9a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d04c      	beq.n	8001f18 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d07c      	beq.n	8001f7e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001e84:	e089      	b.n	8001f9a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8001e86:	4b4b      	ldr	r3, [pc, #300]	; (8001fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001e8c:	4b49      	ldr	r3, [pc, #292]	; (8001fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 8082 	beq.w	8001f9e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	0c9b      	lsrs	r3, r3, #18
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001eac:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d018      	beq.n	8001eea <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001eb8:	4b3e      	ldr	r3, [pc, #248]	; (8001fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	0c5b      	lsrs	r3, r3, #17
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00d      	beq.n	8001ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001ed8:	4a37      	ldr	r2, [pc, #220]	; (8001fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ee0:	6a3b      	ldr	r3, [r7, #32]
 8001ee2:	fb02 f303 	mul.w	r3, r2, r3
 8001ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ee8:	e004      	b.n	8001ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001eea:	6a3b      	ldr	r3, [r7, #32]
 8001eec:	4a33      	ldr	r2, [pc, #204]	; (8001fbc <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8001eee:	fb02 f303 	mul.w	r3, r2, r3
 8001ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001ef4:	4b2f      	ldr	r3, [pc, #188]	; (8001fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001efc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f00:	d102      	bne.n	8001f08 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8001f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f04:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001f06:	e04a      	b.n	8001f9e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8001f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	4a2c      	ldr	r2, [pc, #176]	; (8001fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8001f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f12:	085b      	lsrs	r3, r3, #1
 8001f14:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001f16:	e042      	b.n	8001f9e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8001f18:	4b26      	ldr	r3, [pc, #152]	; (8001fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f28:	d108      	bne.n	8001f3c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8001f34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f38:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f3a:	e01f      	b.n	8001f7c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f46:	d109      	bne.n	8001f5c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8001f48:	4b1a      	ldr	r3, [pc, #104]	; (8001fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8001f54:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001f58:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f5a:	e00f      	b.n	8001f7c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f66:	d11c      	bne.n	8001fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8001f68:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d016      	beq.n	8001fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8001f74:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001f78:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001f7a:	e012      	b.n	8001fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8001f7c:	e011      	b.n	8001fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001f7e:	f7ff fe75 	bl	8001c6c <HAL_RCC_GetPCLK2Freq>
 8001f82:	4602      	mov	r2, r0
 8001f84:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	0b9b      	lsrs	r3, r3, #14
 8001f8a:	f003 0303 	and.w	r3, r3, #3
 8001f8e:	3301      	adds	r3, #1
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f96:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001f98:	e004      	b.n	8001fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8001f9a:	bf00      	nop
 8001f9c:	e002      	b.n	8001fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8001f9e:	bf00      	nop
 8001fa0:	e000      	b.n	8001fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8001fa2:	bf00      	nop
    }
  }
  return (frequency);
 8001fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3734      	adds	r7, #52	; 0x34
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd90      	pop	{r4, r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	08003554 	.word	0x08003554
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	007a1200 	.word	0x007a1200
 8001fbc:	003d0900 	.word	0x003d0900
 8001fc0:	aaaaaaab 	.word	0xaaaaaaab

08001fc4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e084      	b.n	80020e4 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	7c5b      	ldrb	r3, [r3, #17]
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d105      	bne.n	8001ff0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7fe fe2e 	bl	8000c4c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 faf4 	bl	80025e4 <HAL_RTC_WaitForSynchro>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d004      	beq.n	800200c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2204      	movs	r2, #4
 8002006:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e06b      	b.n	80020e4 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 fbad 	bl	800276c <RTC_EnterInitMode>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d004      	beq.n	8002022 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2204      	movs	r2, #4
 800201c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e060      	b.n	80020e4 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 0207 	bic.w	r2, r2, #7
 8002030:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d005      	beq.n	8002046 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800203a:	4b2c      	ldr	r3, [pc, #176]	; (80020ec <HAL_RTC_Init+0x128>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	4a2b      	ldr	r2, [pc, #172]	; (80020ec <HAL_RTC_Init+0x128>)
 8002040:	f023 0301 	bic.w	r3, r3, #1
 8002044:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002046:	4b29      	ldr	r3, [pc, #164]	; (80020ec <HAL_RTC_Init+0x128>)
 8002048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	4926      	ldr	r1, [pc, #152]	; (80020ec <HAL_RTC_Init+0x128>)
 8002054:	4313      	orrs	r3, r2
 8002056:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002060:	d003      	beq.n	800206a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	e00e      	b.n	8002088 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800206a:	2001      	movs	r0, #1
 800206c:	f7ff fee6 	bl	8001e3c <HAL_RCCEx_GetPeriphCLKFreq>
 8002070:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d104      	bne.n	8002082 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2204      	movs	r2, #4
 800207c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e030      	b.n	80020e4 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	3b01      	subs	r3, #1
 8002086:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f023 010f 	bic.w	r1, r3, #15
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	0c1a      	lsrs	r2, r3, #16
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	430a      	orrs	r2, r1
 800209c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	0c1b      	lsrs	r3, r3, #16
 80020a6:	041b      	lsls	r3, r3, #16
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	b291      	uxth	r1, r2
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	6812      	ldr	r2, [r2, #0]
 80020b0:	430b      	orrs	r3, r1
 80020b2:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 fb81 	bl	80027bc <RTC_ExitInitMode>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d004      	beq.n	80020ca <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2204      	movs	r2, #4
 80020c4:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e00c      	b.n	80020e4 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80020e2:	2300      	movs	r3, #0
  }
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40006c00 	.word	0x40006c00

080020f0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80020f0:	b590      	push	{r4, r7, lr}
 80020f2:	b087      	sub	sp, #28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	2300      	movs	r3, #0
 8002102:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d002      	beq.n	8002110 <HAL_RTC_SetTime+0x20>
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e080      	b.n	8002216 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	7c1b      	ldrb	r3, [r3, #16]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d101      	bne.n	8002120 <HAL_RTC_SetTime+0x30>
 800211c:	2302      	movs	r3, #2
 800211e:	e07a      	b.n	8002216 <HAL_RTC_SetTime+0x126>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2201      	movs	r2, #1
 8002124:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2202      	movs	r2, #2
 800212a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d113      	bne.n	800215a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	461a      	mov	r2, r3
 8002138:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800213c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	785b      	ldrb	r3, [r3, #1]
 8002144:	4619      	mov	r1, r3
 8002146:	460b      	mov	r3, r1
 8002148:	011b      	lsls	r3, r3, #4
 800214a:	1a5b      	subs	r3, r3, r1
 800214c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800214e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002154:	4413      	add	r3, r2
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	e01e      	b.n	8002198 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f000 fb71 	bl	8002846 <RTC_Bcd2ToByte>
 8002164:	4603      	mov	r3, r0
 8002166:	461a      	mov	r2, r3
 8002168:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800216c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	785b      	ldrb	r3, [r3, #1]
 8002174:	4618      	mov	r0, r3
 8002176:	f000 fb66 	bl	8002846 <RTC_Bcd2ToByte>
 800217a:	4603      	mov	r3, r0
 800217c:	461a      	mov	r2, r3
 800217e:	4613      	mov	r3, r2
 8002180:	011b      	lsls	r3, r3, #4
 8002182:	1a9b      	subs	r3, r3, r2
 8002184:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002186:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	789b      	ldrb	r3, [r3, #2]
 800218c:	4618      	mov	r0, r3
 800218e:	f000 fb5a 	bl	8002846 <RTC_Bcd2ToByte>
 8002192:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002194:	4423      	add	r3, r4
 8002196:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002198:	6979      	ldr	r1, [r7, #20]
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f000 fa7f 	bl	800269e <RTC_WriteTimeCounter>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d007      	beq.n	80021b6 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2204      	movs	r2, #4
 80021aa:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e02f      	b.n	8002216 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0205 	bic.w	r2, r2, #5
 80021c4:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f000 fa90 	bl	80026ec <RTC_ReadAlarmCounter>
 80021cc:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021d4:	d018      	beq.n	8002208 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d214      	bcs.n	8002208 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80021e4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80021e8:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80021ea:	6939      	ldr	r1, [r7, #16]
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 fa96 	bl	800271e <RTC_WriteAlarmCounter>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d007      	beq.n	8002208 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2204      	movs	r2, #4
 80021fc:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e006      	b.n	8002216 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2201      	movs	r2, #1
 800220c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002214:	2300      	movs	r3, #0
  }
}
 8002216:	4618      	mov	r0, r3
 8002218:	371c      	adds	r7, #28
 800221a:	46bd      	mov	sp, r7
 800221c:	bd90      	pop	{r4, r7, pc}
	...

08002220 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b088      	sub	sp, #32
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	61bb      	str	r3, [r7, #24]
 8002230:	2300      	movs	r3, #0
 8002232:	61fb      	str	r3, [r7, #28]
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]
 8002238:	2300      	movs	r3, #0
 800223a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d002      	beq.n	8002248 <HAL_RTC_GetTime+0x28>
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d101      	bne.n	800224c <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e0b5      	b.n	80023b8 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 0304 	and.w	r3, r3, #4
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e0ac      	b.n	80023b8 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 f9ed 	bl	800263e <RTC_ReadTimeCounter>
 8002264:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	4a55      	ldr	r2, [pc, #340]	; (80023c0 <HAL_RTC_GetTime+0x1a0>)
 800226a:	fba2 2303 	umull	r2, r3, r2, r3
 800226e:	0adb      	lsrs	r3, r3, #11
 8002270:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4b52      	ldr	r3, [pc, #328]	; (80023c0 <HAL_RTC_GetTime+0x1a0>)
 8002276:	fba3 1302 	umull	r1, r3, r3, r2
 800227a:	0adb      	lsrs	r3, r3, #11
 800227c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002280:	fb01 f303 	mul.w	r3, r1, r3
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	4a4f      	ldr	r2, [pc, #316]	; (80023c4 <HAL_RTC_GetTime+0x1a4>)
 8002288:	fba2 2303 	umull	r2, r3, r2, r3
 800228c:	095b      	lsrs	r3, r3, #5
 800228e:	b2da      	uxtb	r2, r3
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	4a4a      	ldr	r2, [pc, #296]	; (80023c0 <HAL_RTC_GetTime+0x1a0>)
 8002298:	fba2 1203 	umull	r1, r2, r2, r3
 800229c:	0ad2      	lsrs	r2, r2, #11
 800229e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80022a2:	fb01 f202 	mul.w	r2, r1, r2
 80022a6:	1a9a      	subs	r2, r3, r2
 80022a8:	4b46      	ldr	r3, [pc, #280]	; (80023c4 <HAL_RTC_GetTime+0x1a4>)
 80022aa:	fba3 1302 	umull	r1, r3, r3, r2
 80022ae:	0959      	lsrs	r1, r3, #5
 80022b0:	460b      	mov	r3, r1
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	1a5b      	subs	r3, r3, r1
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	1ad1      	subs	r1, r2, r3
 80022ba:	b2ca      	uxtb	r2, r1
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	2b17      	cmp	r3, #23
 80022c4:	d955      	bls.n	8002372 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	4a3f      	ldr	r2, [pc, #252]	; (80023c8 <HAL_RTC_GetTime+0x1a8>)
 80022ca:	fba2 2303 	umull	r2, r3, r2, r3
 80022ce:	091b      	lsrs	r3, r3, #4
 80022d0:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80022d2:	6939      	ldr	r1, [r7, #16]
 80022d4:	4b3c      	ldr	r3, [pc, #240]	; (80023c8 <HAL_RTC_GetTime+0x1a8>)
 80022d6:	fba3 2301 	umull	r2, r3, r3, r1
 80022da:	091a      	lsrs	r2, r3, #4
 80022dc:	4613      	mov	r3, r2
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	4413      	add	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	1aca      	subs	r2, r1, r3
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f000 f9fd 	bl	80026ec <RTC_ReadAlarmCounter>
 80022f2:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022fa:	d008      	beq.n	800230e <HAL_RTC_GetTime+0xee>
 80022fc:	69fa      	ldr	r2, [r7, #28]
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	429a      	cmp	r2, r3
 8002302:	d904      	bls.n	800230e <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8002304:	69fa      	ldr	r2, [r7, #28]
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	61fb      	str	r3, [r7, #28]
 800230c:	e002      	b.n	8002314 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800230e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002312:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	4a2d      	ldr	r2, [pc, #180]	; (80023cc <HAL_RTC_GetTime+0x1ac>)
 8002318:	fb02 f303 	mul.w	r3, r2, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002322:	69b9      	ldr	r1, [r7, #24]
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f000 f9ba 	bl	800269e <RTC_WriteTimeCounter>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e041      	b.n	80023b8 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800233a:	d00c      	beq.n	8002356 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 800233c:	69fa      	ldr	r2, [r7, #28]
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	4413      	add	r3, r2
 8002342:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002344:	69f9      	ldr	r1, [r7, #28]
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f000 f9e9 	bl	800271e <RTC_WriteAlarmCounter>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00a      	beq.n	8002368 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e030      	b.n	80023b8 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002356:	69f9      	ldr	r1, [r7, #28]
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 f9e0 	bl	800271e <RTC_WriteAlarmCounter>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e027      	b.n	80023b8 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8002368:	6979      	ldr	r1, [r7, #20]
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f000 fa88 	bl	8002880 <RTC_DateUpdate>
 8002370:	e003      	b.n	800237a <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	b2da      	uxtb	r2, r3
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d01a      	beq.n	80023b6 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f000 fa41 	bl	800280c <RTC_ByteToBcd2>
 800238a:	4603      	mov	r3, r0
 800238c:	461a      	mov	r2, r3
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	785b      	ldrb	r3, [r3, #1]
 8002396:	4618      	mov	r0, r3
 8002398:	f000 fa38 	bl	800280c <RTC_ByteToBcd2>
 800239c:	4603      	mov	r3, r0
 800239e:	461a      	mov	r2, r3
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	789b      	ldrb	r3, [r3, #2]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 fa2f 	bl	800280c <RTC_ByteToBcd2>
 80023ae:	4603      	mov	r3, r0
 80023b0:	461a      	mov	r2, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3720      	adds	r7, #32
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	91a2b3c5 	.word	0x91a2b3c5
 80023c4:	88888889 	.word	0x88888889
 80023c8:	aaaaaaab 	.word	0xaaaaaaab
 80023cc:	00015180 	.word	0x00015180

080023d0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80023dc:	2300      	movs	r3, #0
 80023de:	61fb      	str	r3, [r7, #28]
 80023e0:	2300      	movs	r3, #0
 80023e2:	61bb      	str	r3, [r7, #24]
 80023e4:	2300      	movs	r3, #0
 80023e6:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d002      	beq.n	80023f4 <HAL_RTC_SetDate+0x24>
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e097      	b.n	8002528 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	7c1b      	ldrb	r3, [r3, #16]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <HAL_RTC_SetDate+0x34>
 8002400:	2302      	movs	r3, #2
 8002402:	e091      	b.n	8002528 <HAL_RTC_SetDate+0x158>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2201      	movs	r2, #1
 8002408:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2202      	movs	r2, #2
 800240e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10c      	bne.n	8002430 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	78da      	ldrb	r2, [r3, #3]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	785a      	ldrb	r2, [r3, #1]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	789a      	ldrb	r2, [r3, #2]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	739a      	strb	r2, [r3, #14]
 800242e:	e01a      	b.n	8002466 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	78db      	ldrb	r3, [r3, #3]
 8002434:	4618      	mov	r0, r3
 8002436:	f000 fa06 	bl	8002846 <RTC_Bcd2ToByte>
 800243a:	4603      	mov	r3, r0
 800243c:	461a      	mov	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	785b      	ldrb	r3, [r3, #1]
 8002446:	4618      	mov	r0, r3
 8002448:	f000 f9fd 	bl	8002846 <RTC_Bcd2ToByte>
 800244c:	4603      	mov	r3, r0
 800244e:	461a      	mov	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	789b      	ldrb	r3, [r3, #2]
 8002458:	4618      	mov	r0, r3
 800245a:	f000 f9f4 	bl	8002846 <RTC_Bcd2ToByte>
 800245e:	4603      	mov	r3, r0
 8002460:	461a      	mov	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	7bdb      	ldrb	r3, [r3, #15]
 800246a:	4618      	mov	r0, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	7b59      	ldrb	r1, [r3, #13]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	7b9b      	ldrb	r3, [r3, #14]
 8002474:	461a      	mov	r2, r3
 8002476:	f000 fadf 	bl	8002a38 <RTC_WeekDayNum>
 800247a:	4603      	mov	r3, r0
 800247c:	461a      	mov	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	7b1a      	ldrb	r2, [r3, #12]
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 f8d7 	bl	800263e <RTC_ReadTimeCounter>
 8002490:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	4a26      	ldr	r2, [pc, #152]	; (8002530 <HAL_RTC_SetDate+0x160>)
 8002496:	fba2 2303 	umull	r2, r3, r2, r3
 800249a:	0adb      	lsrs	r3, r3, #11
 800249c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	2b18      	cmp	r3, #24
 80024a2:	d93a      	bls.n	800251a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	4a23      	ldr	r2, [pc, #140]	; (8002534 <HAL_RTC_SetDate+0x164>)
 80024a8:	fba2 2303 	umull	r2, r3, r2, r3
 80024ac:	091b      	lsrs	r3, r3, #4
 80024ae:	4a22      	ldr	r2, [pc, #136]	; (8002538 <HAL_RTC_SetDate+0x168>)
 80024b0:	fb02 f303 	mul.w	r3, r2, r3
 80024b4:	69fa      	ldr	r2, [r7, #28]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80024ba:	69f9      	ldr	r1, [r7, #28]
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 f8ee 	bl	800269e <RTC_WriteTimeCounter>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d007      	beq.n	80024d8 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2204      	movs	r2, #4
 80024cc:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e027      	b.n	8002528 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 f907 	bl	80026ec <RTC_ReadAlarmCounter>
 80024de:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024e6:	d018      	beq.n	800251a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d214      	bcs.n	800251a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80024f6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80024fa:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80024fc:	69b9      	ldr	r1, [r7, #24]
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 f90d 	bl	800271e <RTC_WriteAlarmCounter>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d007      	beq.n	800251a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2204      	movs	r2, #4
 800250e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e006      	b.n	8002528 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2201      	movs	r2, #1
 800251e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3720      	adds	r7, #32
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	91a2b3c5 	.word	0x91a2b3c5
 8002534:	aaaaaaab 	.word	0xaaaaaaab
 8002538:	00015180 	.word	0x00015180

0800253c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8002548:	f107 0314 	add.w	r3, r7, #20
 800254c:	2100      	movs	r1, #0
 800254e:	460a      	mov	r2, r1
 8002550:	801a      	strh	r2, [r3, #0]
 8002552:	460a      	mov	r2, r1
 8002554:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d002      	beq.n	8002562 <HAL_RTC_GetDate+0x26>
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e03a      	b.n	80025dc <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8002566:	f107 0314 	add.w	r3, r7, #20
 800256a:	2200      	movs	r2, #0
 800256c:	4619      	mov	r1, r3
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f7ff fe56 	bl	8002220 <HAL_RTC_GetTime>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e02e      	b.n	80025dc <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	7b1a      	ldrb	r2, [r3, #12]
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	7bda      	ldrb	r2, [r3, #15]
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	7b5a      	ldrb	r2, [r3, #13]
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	7b9a      	ldrb	r2, [r3, #14]
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d01a      	beq.n	80025da <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	78db      	ldrb	r3, [r3, #3]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f000 f92f 	bl	800280c <RTC_ByteToBcd2>
 80025ae:	4603      	mov	r3, r0
 80025b0:	461a      	mov	r2, r3
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	785b      	ldrb	r3, [r3, #1]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 f926 	bl	800280c <RTC_ByteToBcd2>
 80025c0:	4603      	mov	r3, r0
 80025c2:	461a      	mov	r2, r3
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	789b      	ldrb	r3, [r3, #2]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 f91d 	bl	800280c <RTC_ByteToBcd2>
 80025d2:	4603      	mov	r3, r0
 80025d4:	461a      	mov	r2, r3
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3718      	adds	r7, #24
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e01d      	b.n	8002636 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0208 	bic.w	r2, r2, #8
 8002608:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800260a:	f7fe fc6d 	bl	8000ee8 <HAL_GetTick>
 800260e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002610:	e009      	b.n	8002626 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002612:	f7fe fc69 	bl	8000ee8 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002620:	d901      	bls.n	8002626 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e007      	b.n	8002636 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 0308 	and.w	r3, r3, #8
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0ee      	beq.n	8002612 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800263e:	b480      	push	{r7}
 8002640:	b087      	sub	sp, #28
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8002646:	2300      	movs	r3, #0
 8002648:	827b      	strh	r3, [r7, #18]
 800264a:	2300      	movs	r3, #0
 800264c:	823b      	strh	r3, [r7, #16]
 800264e:	2300      	movs	r3, #0
 8002650:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8002652:	2300      	movs	r3, #0
 8002654:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	69db      	ldr	r3, [r3, #28]
 8002664:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800266e:	8a7a      	ldrh	r2, [r7, #18]
 8002670:	8a3b      	ldrh	r3, [r7, #16]
 8002672:	429a      	cmp	r2, r3
 8002674:	d008      	beq.n	8002688 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8002676:	8a3b      	ldrh	r3, [r7, #16]
 8002678:	041a      	lsls	r2, r3, #16
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	b29b      	uxth	r3, r3
 8002682:	4313      	orrs	r3, r2
 8002684:	617b      	str	r3, [r7, #20]
 8002686:	e004      	b.n	8002692 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002688:	8a7b      	ldrh	r3, [r7, #18]
 800268a:	041a      	lsls	r2, r3, #16
 800268c:	89fb      	ldrh	r3, [r7, #14]
 800268e:	4313      	orrs	r3, r2
 8002690:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8002692:	697b      	ldr	r3, [r7, #20]
}
 8002694:	4618      	mov	r0, r3
 8002696:	371c      	adds	r7, #28
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr

0800269e <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b084      	sub	sp, #16
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
 80026a6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026a8:	2300      	movs	r3, #0
 80026aa:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f85d 	bl	800276c <RTC_EnterInitMode>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	73fb      	strb	r3, [r7, #15]
 80026bc:	e011      	b.n	80026e2 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	0c12      	lsrs	r2, r2, #16
 80026c6:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	b292      	uxth	r2, r2
 80026d0:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f872 	bl	80027bc <RTC_ExitInitMode>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80026e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	81fb      	strh	r3, [r7, #14]
 80026f8:	2300      	movs	r3, #0
 80026fa:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800270c:	89fb      	ldrh	r3, [r7, #14]
 800270e:	041a      	lsls	r2, r3, #16
 8002710:	89bb      	ldrh	r3, [r7, #12]
 8002712:	4313      	orrs	r3, r2
}
 8002714:	4618      	mov	r0, r3
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	bc80      	pop	{r7}
 800271c:	4770      	bx	lr

0800271e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b084      	sub	sp, #16
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
 8002726:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002728:	2300      	movs	r3, #0
 800272a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f81d 	bl	800276c <RTC_EnterInitMode>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d002      	beq.n	800273e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	73fb      	strb	r3, [r7, #15]
 800273c:	e011      	b.n	8002762 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	0c12      	lsrs	r2, r2, #16
 8002746:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	b292      	uxth	r2, r2
 8002750:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f832 	bl	80027bc <RTC_ExitInitMode>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002762:	7bfb      	ldrb	r3, [r7, #15]
}
 8002764:	4618      	mov	r0, r3
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002774:	2300      	movs	r3, #0
 8002776:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002778:	f7fe fbb6 	bl	8000ee8 <HAL_GetTick>
 800277c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800277e:	e009      	b.n	8002794 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002780:	f7fe fbb2 	bl	8000ee8 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800278e:	d901      	bls.n	8002794 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e00f      	b.n	80027b4 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f003 0320 	and.w	r3, r3, #32
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0ee      	beq.n	8002780 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f042 0210 	orr.w	r2, r2, #16
 80027b0:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 0210 	bic.w	r2, r2, #16
 80027d6:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80027d8:	f7fe fb86 	bl	8000ee8 <HAL_GetTick>
 80027dc:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80027de:	e009      	b.n	80027f4 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80027e0:	f7fe fb82 	bl	8000ee8 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027ee:	d901      	bls.n	80027f4 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e007      	b.n	8002804 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f003 0320 	and.w	r3, r3, #32
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0ee      	beq.n	80027e0 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800281a:	e005      	b.n	8002828 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	3301      	adds	r3, #1
 8002820:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002822:	79fb      	ldrb	r3, [r7, #7]
 8002824:	3b0a      	subs	r3, #10
 8002826:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	2b09      	cmp	r3, #9
 800282c:	d8f6      	bhi.n	800281c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	b2db      	uxtb	r3, r3
 8002832:	011b      	lsls	r3, r3, #4
 8002834:	b2da      	uxtb	r2, r3
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	4313      	orrs	r3, r2
 800283a:	b2db      	uxtb	r3, r3
}
 800283c:	4618      	mov	r0, r3
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	bc80      	pop	{r7}
 8002844:	4770      	bx	lr

08002846 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002846:	b480      	push	{r7}
 8002848:	b085      	sub	sp, #20
 800284a:	af00      	add	r7, sp, #0
 800284c:	4603      	mov	r3, r0
 800284e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002850:	2300      	movs	r3, #0
 8002852:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002854:	79fb      	ldrb	r3, [r7, #7]
 8002856:	091b      	lsrs	r3, r3, #4
 8002858:	b2db      	uxtb	r3, r3
 800285a:	461a      	mov	r2, r3
 800285c:	4613      	mov	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	f003 030f 	and.w	r3, r3, #15
 800286c:	b2da      	uxtb	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	b2db      	uxtb	r3, r3
 8002872:	4413      	add	r3, r2
 8002874:	b2db      	uxtb	r3, r3
}
 8002876:	4618      	mov	r0, r3
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr

08002880 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	2300      	movs	r3, #0
 8002890:	613b      	str	r3, [r7, #16]
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	7bdb      	ldrb	r3, [r3, #15]
 800289e:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	7b5b      	ldrb	r3, [r3, #13]
 80028a4:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	7b9b      	ldrb	r3, [r3, #14]
 80028aa:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80028ac:	2300      	movs	r3, #0
 80028ae:	60bb      	str	r3, [r7, #8]
 80028b0:	e06f      	b.n	8002992 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d011      	beq.n	80028dc <RTC_DateUpdate+0x5c>
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	2b03      	cmp	r3, #3
 80028bc:	d00e      	beq.n	80028dc <RTC_DateUpdate+0x5c>
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	2b05      	cmp	r3, #5
 80028c2:	d00b      	beq.n	80028dc <RTC_DateUpdate+0x5c>
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	2b07      	cmp	r3, #7
 80028c8:	d008      	beq.n	80028dc <RTC_DateUpdate+0x5c>
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d005      	beq.n	80028dc <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	2b0a      	cmp	r3, #10
 80028d4:	d002      	beq.n	80028dc <RTC_DateUpdate+0x5c>
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	2b0c      	cmp	r3, #12
 80028da:	d117      	bne.n	800290c <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2b1e      	cmp	r3, #30
 80028e0:	d803      	bhi.n	80028ea <RTC_DateUpdate+0x6a>
      {
        day++;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	3301      	adds	r3, #1
 80028e6:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80028e8:	e050      	b.n	800298c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	2b0c      	cmp	r3, #12
 80028ee:	d005      	beq.n	80028fc <RTC_DateUpdate+0x7c>
        {
          month++;
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	3301      	adds	r3, #1
 80028f4:	613b      	str	r3, [r7, #16]
          day = 1U;
 80028f6:	2301      	movs	r3, #1
 80028f8:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80028fa:	e047      	b.n	800298c <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80028fc:	2301      	movs	r3, #1
 80028fe:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002900:	2301      	movs	r3, #1
 8002902:	60fb      	str	r3, [r7, #12]
          year++;
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	3301      	adds	r3, #1
 8002908:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800290a:	e03f      	b.n	800298c <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	2b04      	cmp	r3, #4
 8002910:	d008      	beq.n	8002924 <RTC_DateUpdate+0xa4>
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	2b06      	cmp	r3, #6
 8002916:	d005      	beq.n	8002924 <RTC_DateUpdate+0xa4>
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	2b09      	cmp	r3, #9
 800291c:	d002      	beq.n	8002924 <RTC_DateUpdate+0xa4>
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	2b0b      	cmp	r3, #11
 8002922:	d10c      	bne.n	800293e <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2b1d      	cmp	r3, #29
 8002928:	d803      	bhi.n	8002932 <RTC_DateUpdate+0xb2>
      {
        day++;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	3301      	adds	r3, #1
 800292e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002930:	e02c      	b.n	800298c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	3301      	adds	r3, #1
 8002936:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002938:	2301      	movs	r3, #1
 800293a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800293c:	e026      	b.n	800298c <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	2b02      	cmp	r3, #2
 8002942:	d123      	bne.n	800298c <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2b1b      	cmp	r3, #27
 8002948:	d803      	bhi.n	8002952 <RTC_DateUpdate+0xd2>
      {
        day++;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	3301      	adds	r3, #1
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	e01c      	b.n	800298c <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2b1c      	cmp	r3, #28
 8002956:	d111      	bne.n	800297c <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	b29b      	uxth	r3, r3
 800295c:	4618      	mov	r0, r3
 800295e:	f000 f839 	bl	80029d4 <RTC_IsLeapYear>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d003      	beq.n	8002970 <RTC_DateUpdate+0xf0>
        {
          day++;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	3301      	adds	r3, #1
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	e00d      	b.n	800298c <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	3301      	adds	r3, #1
 8002974:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002976:	2301      	movs	r3, #1
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	e007      	b.n	800298c <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2b1d      	cmp	r3, #29
 8002980:	d104      	bne.n	800298c <RTC_DateUpdate+0x10c>
      {
        month++;
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	3301      	adds	r3, #1
 8002986:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002988:	2301      	movs	r3, #1
 800298a:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	3301      	adds	r3, #1
 8002990:	60bb      	str	r3, [r7, #8]
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	429a      	cmp	r2, r3
 8002998:	d38b      	bcc.n	80028b2 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	b2da      	uxtb	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	b2d2      	uxtb	r2, r2
 80029ba:	4619      	mov	r1, r3
 80029bc:	6978      	ldr	r0, [r7, #20]
 80029be:	f000 f83b 	bl	8002a38 <RTC_WeekDayNum>
 80029c2:	4603      	mov	r3, r0
 80029c4:	461a      	mov	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	731a      	strb	r2, [r3, #12]
}
 80029ca:	bf00      	nop
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
	...

080029d4 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80029de:	88fb      	ldrh	r3, [r7, #6]
 80029e0:	f003 0303 	and.w	r3, r3, #3
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	e01d      	b.n	8002a2a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80029ee:	88fb      	ldrh	r3, [r7, #6]
 80029f0:	4a10      	ldr	r2, [pc, #64]	; (8002a34 <RTC_IsLeapYear+0x60>)
 80029f2:	fba2 1203 	umull	r1, r2, r2, r3
 80029f6:	0952      	lsrs	r2, r2, #5
 80029f8:	2164      	movs	r1, #100	; 0x64
 80029fa:	fb01 f202 	mul.w	r2, r1, r2
 80029fe:	1a9b      	subs	r3, r3, r2
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e00f      	b.n	8002a2a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8002a0a:	88fb      	ldrh	r3, [r7, #6]
 8002a0c:	4a09      	ldr	r2, [pc, #36]	; (8002a34 <RTC_IsLeapYear+0x60>)
 8002a0e:	fba2 1203 	umull	r1, r2, r2, r3
 8002a12:	09d2      	lsrs	r2, r2, #7
 8002a14:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002a18:	fb01 f202 	mul.w	r2, r1, r2
 8002a1c:	1a9b      	subs	r3, r3, r2
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e000      	b.n	8002a2a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8002a28:	2300      	movs	r3, #0
  }
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr
 8002a34:	51eb851f 	.word	0x51eb851f

08002a38 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	70fb      	strb	r3, [r7, #3]
 8002a44:	4613      	mov	r3, r2
 8002a46:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002a56:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8002a58:	78fb      	ldrb	r3, [r7, #3]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d82d      	bhi.n	8002aba <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8002a5e:	78fa      	ldrb	r2, [r7, #3]
 8002a60:	4613      	mov	r3, r2
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	4413      	add	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	1a9b      	subs	r3, r3, r2
 8002a6a:	4a2c      	ldr	r2, [pc, #176]	; (8002b1c <RTC_WeekDayNum+0xe4>)
 8002a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a70:	085a      	lsrs	r2, r3, #1
 8002a72:	78bb      	ldrb	r3, [r7, #2]
 8002a74:	441a      	add	r2, r3
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	441a      	add	r2, r3
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	089b      	lsrs	r3, r3, #2
 8002a80:	441a      	add	r2, r3
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	3b01      	subs	r3, #1
 8002a86:	4926      	ldr	r1, [pc, #152]	; (8002b20 <RTC_WeekDayNum+0xe8>)
 8002a88:	fba1 1303 	umull	r1, r3, r1, r3
 8002a8c:	095b      	lsrs	r3, r3, #5
 8002a8e:	1ad2      	subs	r2, r2, r3
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	4922      	ldr	r1, [pc, #136]	; (8002b20 <RTC_WeekDayNum+0xe8>)
 8002a96:	fba1 1303 	umull	r1, r3, r1, r3
 8002a9a:	09db      	lsrs	r3, r3, #7
 8002a9c:	4413      	add	r3, r2
 8002a9e:	1d1a      	adds	r2, r3, #4
 8002aa0:	4b20      	ldr	r3, [pc, #128]	; (8002b24 <RTC_WeekDayNum+0xec>)
 8002aa2:	fba3 1302 	umull	r1, r3, r3, r2
 8002aa6:	1ad1      	subs	r1, r2, r3
 8002aa8:	0849      	lsrs	r1, r1, #1
 8002aaa:	440b      	add	r3, r1
 8002aac:	0899      	lsrs	r1, r3, #2
 8002aae:	460b      	mov	r3, r1
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	1a5b      	subs	r3, r3, r1
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	e029      	b.n	8002b0e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8002aba:	78fa      	ldrb	r2, [r7, #3]
 8002abc:	4613      	mov	r3, r2
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	4413      	add	r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	1a9b      	subs	r3, r3, r2
 8002ac6:	4a15      	ldr	r2, [pc, #84]	; (8002b1c <RTC_WeekDayNum+0xe4>)
 8002ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8002acc:	085a      	lsrs	r2, r3, #1
 8002ace:	78bb      	ldrb	r3, [r7, #2]
 8002ad0:	441a      	add	r2, r3
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	441a      	add	r2, r3
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	089b      	lsrs	r3, r3, #2
 8002ada:	441a      	add	r2, r3
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	4910      	ldr	r1, [pc, #64]	; (8002b20 <RTC_WeekDayNum+0xe8>)
 8002ae0:	fba1 1303 	umull	r1, r3, r1, r3
 8002ae4:	095b      	lsrs	r3, r3, #5
 8002ae6:	1ad2      	subs	r2, r2, r3
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	490d      	ldr	r1, [pc, #52]	; (8002b20 <RTC_WeekDayNum+0xe8>)
 8002aec:	fba1 1303 	umull	r1, r3, r1, r3
 8002af0:	09db      	lsrs	r3, r3, #7
 8002af2:	4413      	add	r3, r2
 8002af4:	1c9a      	adds	r2, r3, #2
 8002af6:	4b0b      	ldr	r3, [pc, #44]	; (8002b24 <RTC_WeekDayNum+0xec>)
 8002af8:	fba3 1302 	umull	r1, r3, r3, r2
 8002afc:	1ad1      	subs	r1, r2, r3
 8002afe:	0849      	lsrs	r1, r1, #1
 8002b00:	440b      	add	r3, r1
 8002b02:	0899      	lsrs	r1, r3, #2
 8002b04:	460b      	mov	r3, r1
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	1a5b      	subs	r3, r3, r1
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	b2db      	uxtb	r3, r3
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3714      	adds	r7, #20
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr
 8002b1c:	38e38e39 	.word	0x38e38e39
 8002b20:	51eb851f 	.word	0x51eb851f
 8002b24:	24924925 	.word	0x24924925

08002b28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e041      	b.n	8002bbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d106      	bne.n	8002b54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7fe f8a0 	bl	8000c94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2202      	movs	r2, #2
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	3304      	adds	r3, #4
 8002b64:	4619      	mov	r1, r3
 8002b66:	4610      	mov	r0, r2
 8002b68:	f000 fa70 	bl	800304c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
	...

08002bc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d001      	beq.n	8002be0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e03a      	b.n	8002c56 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2202      	movs	r2, #2
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0201 	orr.w	r2, r2, #1
 8002bf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a18      	ldr	r2, [pc, #96]	; (8002c60 <HAL_TIM_Base_Start_IT+0x98>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d00e      	beq.n	8002c20 <HAL_TIM_Base_Start_IT+0x58>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c0a:	d009      	beq.n	8002c20 <HAL_TIM_Base_Start_IT+0x58>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a14      	ldr	r2, [pc, #80]	; (8002c64 <HAL_TIM_Base_Start_IT+0x9c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d004      	beq.n	8002c20 <HAL_TIM_Base_Start_IT+0x58>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a13      	ldr	r2, [pc, #76]	; (8002c68 <HAL_TIM_Base_Start_IT+0xa0>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d111      	bne.n	8002c44 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2b06      	cmp	r3, #6
 8002c30:	d010      	beq.n	8002c54 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 0201 	orr.w	r2, r2, #1
 8002c40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c42:	e007      	b.n	8002c54 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f042 0201 	orr.w	r2, r2, #1
 8002c52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr
 8002c60:	40012c00 	.word	0x40012c00
 8002c64:	40000400 	.word	0x40000400
 8002c68:	40000800 	.word	0x40000800

08002c6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d122      	bne.n	8002cc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d11b      	bne.n	8002cc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f06f 0202 	mvn.w	r2, #2
 8002c98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f9b1 	bl	8003016 <HAL_TIM_IC_CaptureCallback>
 8002cb4:	e005      	b.n	8002cc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f9a4 	bl	8003004 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 f9b3 	bl	8003028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	f003 0304 	and.w	r3, r3, #4
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d122      	bne.n	8002d1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b04      	cmp	r3, #4
 8002ce2:	d11b      	bne.n	8002d1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f06f 0204 	mvn.w	r2, #4
 8002cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f987 	bl	8003016 <HAL_TIM_IC_CaptureCallback>
 8002d08:	e005      	b.n	8002d16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f97a 	bl	8003004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 f989 	bl	8003028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b08      	cmp	r3, #8
 8002d28:	d122      	bne.n	8002d70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	f003 0308 	and.w	r3, r3, #8
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d11b      	bne.n	8002d70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f06f 0208 	mvn.w	r2, #8
 8002d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2204      	movs	r2, #4
 8002d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f95d 	bl	8003016 <HAL_TIM_IC_CaptureCallback>
 8002d5c:	e005      	b.n	8002d6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f950 	bl	8003004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f95f 	bl	8003028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	f003 0310 	and.w	r3, r3, #16
 8002d7a:	2b10      	cmp	r3, #16
 8002d7c:	d122      	bne.n	8002dc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f003 0310 	and.w	r3, r3, #16
 8002d88:	2b10      	cmp	r3, #16
 8002d8a:	d11b      	bne.n	8002dc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f06f 0210 	mvn.w	r2, #16
 8002d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2208      	movs	r2, #8
 8002d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f933 	bl	8003016 <HAL_TIM_IC_CaptureCallback>
 8002db0:	e005      	b.n	8002dbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f926 	bl	8003004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 f935 	bl	8003028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d10e      	bne.n	8002df0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d107      	bne.n	8002df0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f06f 0201 	mvn.w	r2, #1
 8002de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7fd f9ae 	bl	800014c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dfa:	2b80      	cmp	r3, #128	; 0x80
 8002dfc:	d10e      	bne.n	8002e1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e08:	2b80      	cmp	r3, #128	; 0x80
 8002e0a:	d107      	bne.n	8002e1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 fa77 	bl	800330a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e26:	2b40      	cmp	r3, #64	; 0x40
 8002e28:	d10e      	bne.n	8002e48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e34:	2b40      	cmp	r3, #64	; 0x40
 8002e36:	d107      	bne.n	8002e48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 f8f9 	bl	800303a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	f003 0320 	and.w	r3, r3, #32
 8002e52:	2b20      	cmp	r3, #32
 8002e54:	d10e      	bne.n	8002e74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f003 0320 	and.w	r3, r3, #32
 8002e60:	2b20      	cmp	r3, #32
 8002e62:	d107      	bne.n	8002e74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f06f 0220 	mvn.w	r2, #32
 8002e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 fa42 	bl	80032f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e74:	bf00      	nop
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d101      	bne.n	8002e94 <HAL_TIM_ConfigClockSource+0x18>
 8002e90:	2302      	movs	r3, #2
 8002e92:	e0b3      	b.n	8002ffc <HAL_TIM_ConfigClockSource+0x180>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002eb2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ecc:	d03e      	beq.n	8002f4c <HAL_TIM_ConfigClockSource+0xd0>
 8002ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ed2:	f200 8087 	bhi.w	8002fe4 <HAL_TIM_ConfigClockSource+0x168>
 8002ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eda:	f000 8085 	beq.w	8002fe8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee2:	d87f      	bhi.n	8002fe4 <HAL_TIM_ConfigClockSource+0x168>
 8002ee4:	2b70      	cmp	r3, #112	; 0x70
 8002ee6:	d01a      	beq.n	8002f1e <HAL_TIM_ConfigClockSource+0xa2>
 8002ee8:	2b70      	cmp	r3, #112	; 0x70
 8002eea:	d87b      	bhi.n	8002fe4 <HAL_TIM_ConfigClockSource+0x168>
 8002eec:	2b60      	cmp	r3, #96	; 0x60
 8002eee:	d050      	beq.n	8002f92 <HAL_TIM_ConfigClockSource+0x116>
 8002ef0:	2b60      	cmp	r3, #96	; 0x60
 8002ef2:	d877      	bhi.n	8002fe4 <HAL_TIM_ConfigClockSource+0x168>
 8002ef4:	2b50      	cmp	r3, #80	; 0x50
 8002ef6:	d03c      	beq.n	8002f72 <HAL_TIM_ConfigClockSource+0xf6>
 8002ef8:	2b50      	cmp	r3, #80	; 0x50
 8002efa:	d873      	bhi.n	8002fe4 <HAL_TIM_ConfigClockSource+0x168>
 8002efc:	2b40      	cmp	r3, #64	; 0x40
 8002efe:	d058      	beq.n	8002fb2 <HAL_TIM_ConfigClockSource+0x136>
 8002f00:	2b40      	cmp	r3, #64	; 0x40
 8002f02:	d86f      	bhi.n	8002fe4 <HAL_TIM_ConfigClockSource+0x168>
 8002f04:	2b30      	cmp	r3, #48	; 0x30
 8002f06:	d064      	beq.n	8002fd2 <HAL_TIM_ConfigClockSource+0x156>
 8002f08:	2b30      	cmp	r3, #48	; 0x30
 8002f0a:	d86b      	bhi.n	8002fe4 <HAL_TIM_ConfigClockSource+0x168>
 8002f0c:	2b20      	cmp	r3, #32
 8002f0e:	d060      	beq.n	8002fd2 <HAL_TIM_ConfigClockSource+0x156>
 8002f10:	2b20      	cmp	r3, #32
 8002f12:	d867      	bhi.n	8002fe4 <HAL_TIM_ConfigClockSource+0x168>
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d05c      	beq.n	8002fd2 <HAL_TIM_ConfigClockSource+0x156>
 8002f18:	2b10      	cmp	r3, #16
 8002f1a:	d05a      	beq.n	8002fd2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002f1c:	e062      	b.n	8002fe4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6818      	ldr	r0, [r3, #0]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	6899      	ldr	r1, [r3, #8]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f000 f966 	bl	80031fe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f40:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	609a      	str	r2, [r3, #8]
      break;
 8002f4a:	e04e      	b.n	8002fea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6818      	ldr	r0, [r3, #0]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	6899      	ldr	r1, [r3, #8]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f000 f94f 	bl	80031fe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f6e:	609a      	str	r2, [r3, #8]
      break;
 8002f70:	e03b      	b.n	8002fea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6818      	ldr	r0, [r3, #0]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	6859      	ldr	r1, [r3, #4]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	f000 f8c6 	bl	8003110 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2150      	movs	r1, #80	; 0x50
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 f91d 	bl	80031ca <TIM_ITRx_SetConfig>
      break;
 8002f90:	e02b      	b.n	8002fea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6818      	ldr	r0, [r3, #0]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	6859      	ldr	r1, [r3, #4]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	f000 f8e4 	bl	800316c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2160      	movs	r1, #96	; 0x60
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 f90d 	bl	80031ca <TIM_ITRx_SetConfig>
      break;
 8002fb0:	e01b      	b.n	8002fea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6818      	ldr	r0, [r3, #0]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	6859      	ldr	r1, [r3, #4]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	f000 f8a6 	bl	8003110 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2140      	movs	r1, #64	; 0x40
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 f8fd 	bl	80031ca <TIM_ITRx_SetConfig>
      break;
 8002fd0:	e00b      	b.n	8002fea <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4610      	mov	r0, r2
 8002fde:	f000 f8f4 	bl	80031ca <TIM_ITRx_SetConfig>
        break;
 8002fe2:	e002      	b.n	8002fea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002fe4:	bf00      	nop
 8002fe6:	e000      	b.n	8002fea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002fe8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	bc80      	pop	{r7}
 8003014:	4770      	bx	lr

08003016 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003016:	b480      	push	{r7}
 8003018:	b083      	sub	sp, #12
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800301e:	bf00      	nop
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	bc80      	pop	{r7}
 8003026:	4770      	bx	lr

08003028 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	bc80      	pop	{r7}
 8003038:	4770      	bx	lr

0800303a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800303a:	b480      	push	{r7}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr

0800304c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a29      	ldr	r2, [pc, #164]	; (8003104 <TIM_Base_SetConfig+0xb8>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d00b      	beq.n	800307c <TIM_Base_SetConfig+0x30>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800306a:	d007      	beq.n	800307c <TIM_Base_SetConfig+0x30>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a26      	ldr	r2, [pc, #152]	; (8003108 <TIM_Base_SetConfig+0xbc>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d003      	beq.n	800307c <TIM_Base_SetConfig+0x30>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a25      	ldr	r2, [pc, #148]	; (800310c <TIM_Base_SetConfig+0xc0>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d108      	bne.n	800308e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003082:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	4313      	orrs	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a1c      	ldr	r2, [pc, #112]	; (8003104 <TIM_Base_SetConfig+0xb8>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d00b      	beq.n	80030ae <TIM_Base_SetConfig+0x62>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800309c:	d007      	beq.n	80030ae <TIM_Base_SetConfig+0x62>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a19      	ldr	r2, [pc, #100]	; (8003108 <TIM_Base_SetConfig+0xbc>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d003      	beq.n	80030ae <TIM_Base_SetConfig+0x62>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a18      	ldr	r2, [pc, #96]	; (800310c <TIM_Base_SetConfig+0xc0>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d108      	bne.n	80030c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	4313      	orrs	r3, r2
 80030be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a07      	ldr	r2, [pc, #28]	; (8003104 <TIM_Base_SetConfig+0xb8>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d103      	bne.n	80030f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	691a      	ldr	r2, [r3, #16]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	615a      	str	r2, [r3, #20]
}
 80030fa:	bf00      	nop
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr
 8003104:	40012c00 	.word	0x40012c00
 8003108:	40000400 	.word	0x40000400
 800310c:	40000800 	.word	0x40000800

08003110 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003110:	b480      	push	{r7}
 8003112:	b087      	sub	sp, #28
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	f023 0201 	bic.w	r2, r3, #1
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800313a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	4313      	orrs	r3, r2
 8003144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f023 030a 	bic.w	r3, r3, #10
 800314c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	4313      	orrs	r3, r2
 8003154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	621a      	str	r2, [r3, #32]
}
 8003162:	bf00      	nop
 8003164:	371c      	adds	r7, #28
 8003166:	46bd      	mov	sp, r7
 8003168:	bc80      	pop	{r7}
 800316a:	4770      	bx	lr

0800316c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800316c:	b480      	push	{r7}
 800316e:	b087      	sub	sp, #28
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	f023 0210 	bic.w	r2, r3, #16
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003196:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	031b      	lsls	r3, r3, #12
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	4313      	orrs	r3, r2
 80031a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	621a      	str	r2, [r3, #32]
}
 80031c0:	bf00      	nop
 80031c2:	371c      	adds	r7, #28
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bc80      	pop	{r7}
 80031c8:	4770      	bx	lr

080031ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b085      	sub	sp, #20
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
 80031d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	f043 0307 	orr.w	r3, r3, #7
 80031ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	609a      	str	r2, [r3, #8]
}
 80031f4:	bf00      	nop
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr

080031fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031fe:	b480      	push	{r7}
 8003200:	b087      	sub	sp, #28
 8003202:	af00      	add	r7, sp, #0
 8003204:	60f8      	str	r0, [r7, #12]
 8003206:	60b9      	str	r1, [r7, #8]
 8003208:	607a      	str	r2, [r7, #4]
 800320a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003218:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	021a      	lsls	r2, r3, #8
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	431a      	orrs	r2, r3
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	4313      	orrs	r3, r2
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	4313      	orrs	r3, r2
 800322a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	609a      	str	r2, [r3, #8]
}
 8003232:	bf00      	nop
 8003234:	371c      	adds	r7, #28
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr

0800323c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003250:	2302      	movs	r3, #2
 8003252:	e046      	b.n	80032e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800327a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	4313      	orrs	r3, r2
 8003284:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a16      	ldr	r2, [pc, #88]	; (80032ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d00e      	beq.n	80032b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a0:	d009      	beq.n	80032b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a12      	ldr	r2, [pc, #72]	; (80032f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d004      	beq.n	80032b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a10      	ldr	r2, [pc, #64]	; (80032f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d10c      	bne.n	80032d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68ba      	ldr	r2, [r7, #8]
 80032ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr
 80032ec:	40012c00 	.word	0x40012c00
 80032f0:	40000400 	.word	0x40000400
 80032f4:	40000800 	.word	0x40000800

080032f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	bc80      	pop	{r7}
 8003308:	4770      	bx	lr

0800330a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr

0800331c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e03f      	b.n	80033ae <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d106      	bne.n	8003348 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7fd fccc 	bl	8000ce0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2224      	movs	r2, #36	; 0x24
 800334c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68da      	ldr	r2, [r3, #12]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800335e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 f829 	bl	80033b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	691a      	ldr	r2, [r3, #16]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003374:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695a      	ldr	r2, [r3, #20]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003384:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68da      	ldr	r2, [r3, #12]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003394:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2220      	movs	r2, #32
 80033a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2220      	movs	r2, #32
 80033a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
	...

080033b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	431a      	orrs	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80033f2:	f023 030c 	bic.w	r3, r3, #12
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6812      	ldr	r2, [r2, #0]
 80033fa:	68b9      	ldr	r1, [r7, #8]
 80033fc:	430b      	orrs	r3, r1
 80033fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	699a      	ldr	r2, [r3, #24]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a2c      	ldr	r2, [pc, #176]	; (80034cc <UART_SetConfig+0x114>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d103      	bne.n	8003428 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003420:	f7fe fc24 	bl	8001c6c <HAL_RCC_GetPCLK2Freq>
 8003424:	60f8      	str	r0, [r7, #12]
 8003426:	e002      	b.n	800342e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003428:	f7fe fc0c 	bl	8001c44 <HAL_RCC_GetPCLK1Freq>
 800342c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	4613      	mov	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	009a      	lsls	r2, r3, #2
 8003438:	441a      	add	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	fbb2 f3f3 	udiv	r3, r2, r3
 8003444:	4a22      	ldr	r2, [pc, #136]	; (80034d0 <UART_SetConfig+0x118>)
 8003446:	fba2 2303 	umull	r2, r3, r2, r3
 800344a:	095b      	lsrs	r3, r3, #5
 800344c:	0119      	lsls	r1, r3, #4
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	4613      	mov	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	009a      	lsls	r2, r3, #2
 8003458:	441a      	add	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	fbb2 f2f3 	udiv	r2, r2, r3
 8003464:	4b1a      	ldr	r3, [pc, #104]	; (80034d0 <UART_SetConfig+0x118>)
 8003466:	fba3 0302 	umull	r0, r3, r3, r2
 800346a:	095b      	lsrs	r3, r3, #5
 800346c:	2064      	movs	r0, #100	; 0x64
 800346e:	fb00 f303 	mul.w	r3, r0, r3
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	011b      	lsls	r3, r3, #4
 8003476:	3332      	adds	r3, #50	; 0x32
 8003478:	4a15      	ldr	r2, [pc, #84]	; (80034d0 <UART_SetConfig+0x118>)
 800347a:	fba2 2303 	umull	r2, r3, r2, r3
 800347e:	095b      	lsrs	r3, r3, #5
 8003480:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003484:	4419      	add	r1, r3
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	4613      	mov	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	009a      	lsls	r2, r3, #2
 8003490:	441a      	add	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	fbb2 f2f3 	udiv	r2, r2, r3
 800349c:	4b0c      	ldr	r3, [pc, #48]	; (80034d0 <UART_SetConfig+0x118>)
 800349e:	fba3 0302 	umull	r0, r3, r3, r2
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	2064      	movs	r0, #100	; 0x64
 80034a6:	fb00 f303 	mul.w	r3, r0, r3
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	3332      	adds	r3, #50	; 0x32
 80034b0:	4a07      	ldr	r2, [pc, #28]	; (80034d0 <UART_SetConfig+0x118>)
 80034b2:	fba2 2303 	umull	r2, r3, r2, r3
 80034b6:	095b      	lsrs	r3, r3, #5
 80034b8:	f003 020f 	and.w	r2, r3, #15
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	440a      	add	r2, r1
 80034c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80034c4:	bf00      	nop
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40013800 	.word	0x40013800
 80034d0:	51eb851f 	.word	0x51eb851f

080034d4 <__libc_init_array>:
 80034d4:	b570      	push	{r4, r5, r6, lr}
 80034d6:	2600      	movs	r6, #0
 80034d8:	4d0c      	ldr	r5, [pc, #48]	; (800350c <__libc_init_array+0x38>)
 80034da:	4c0d      	ldr	r4, [pc, #52]	; (8003510 <__libc_init_array+0x3c>)
 80034dc:	1b64      	subs	r4, r4, r5
 80034de:	10a4      	asrs	r4, r4, #2
 80034e0:	42a6      	cmp	r6, r4
 80034e2:	d109      	bne.n	80034f8 <__libc_init_array+0x24>
 80034e4:	f000 f822 	bl	800352c <_init>
 80034e8:	2600      	movs	r6, #0
 80034ea:	4d0a      	ldr	r5, [pc, #40]	; (8003514 <__libc_init_array+0x40>)
 80034ec:	4c0a      	ldr	r4, [pc, #40]	; (8003518 <__libc_init_array+0x44>)
 80034ee:	1b64      	subs	r4, r4, r5
 80034f0:	10a4      	asrs	r4, r4, #2
 80034f2:	42a6      	cmp	r6, r4
 80034f4:	d105      	bne.n	8003502 <__libc_init_array+0x2e>
 80034f6:	bd70      	pop	{r4, r5, r6, pc}
 80034f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80034fc:	4798      	blx	r3
 80034fe:	3601      	adds	r6, #1
 8003500:	e7ee      	b.n	80034e0 <__libc_init_array+0xc>
 8003502:	f855 3b04 	ldr.w	r3, [r5], #4
 8003506:	4798      	blx	r3
 8003508:	3601      	adds	r6, #1
 800350a:	e7f2      	b.n	80034f2 <__libc_init_array+0x1e>
 800350c:	0800357c 	.word	0x0800357c
 8003510:	0800357c 	.word	0x0800357c
 8003514:	0800357c 	.word	0x0800357c
 8003518:	08003580 	.word	0x08003580

0800351c <memset>:
 800351c:	4603      	mov	r3, r0
 800351e:	4402      	add	r2, r0
 8003520:	4293      	cmp	r3, r2
 8003522:	d100      	bne.n	8003526 <memset+0xa>
 8003524:	4770      	bx	lr
 8003526:	f803 1b01 	strb.w	r1, [r3], #1
 800352a:	e7f9      	b.n	8003520 <memset+0x4>

0800352c <_init>:
 800352c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800352e:	bf00      	nop
 8003530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003532:	bc08      	pop	{r3}
 8003534:	469e      	mov	lr, r3
 8003536:	4770      	bx	lr

08003538 <_fini>:
 8003538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800353a:	bf00      	nop
 800353c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800353e:	bc08      	pop	{r3}
 8003540:	469e      	mov	lr, r3
 8003542:	4770      	bx	lr
